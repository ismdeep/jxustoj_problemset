<?xml version="1.0" encoding="UTF-8"?> 
<fps version="1.0" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[ Intellectual Property]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>
<description><![CDATA[<p>TDP Inc. has decided to sue JCN Inc. for copyright infringement.  To this end, TDP wishes to find</p>
<i>infringing segments</i>
<p>within JCN's code base, to show to selected media representatives.  Since TDP has fired all its technical staff, it is looking to hire a consultant to be paid on a contingency basis should the lawsuit be successful. To demonstrate your qualifications for this position, you are  to solve the problem on a number of test cases.</p>
<p>Each test case begins with a positive integer <i>k</i>, the number of infringing segments to be found.  Following this line are two code bases.  The first code base is preceded by the line &quot;BEGIN TDP CODEBASE&quot; and contains a number of lines followed by the line &quot;END TDP CODEBASE&quot;.  The second code base is preceded by &quot;BEGIN JCN CODEBASE&quot; and followed by &quot;END JCN CODEBASE&quot;.  The line &quot;END TDP CODEBASE&quot; does not appear in the first code base and the line &quot;END JCN CODEBASE&quot; does not appear in the second. A line containing 0 follows the last test case.</p>
<p>For each test case you should output: (1) a line containing &quot;CASE <i>n</i>&quot; where <i>n</i> is the number of the test case; (2) up to <i>k</i> infringing segments.  Each segment should be printed exactly as it appears in the JCN code base (including newlines and whitespace) and should be preceded by a line containing  &quot;INFRINGING SEGMENT <i>m</i> LENGTH <i>l</i> POSITION <i>p</i>&quot; where  <i>m</i> is the number of the segment within the test case,  <i>l</i> is the length of the segment (in characters) and <i>p</i> is the position of the segment (in characters from the start of the JCN codebase).  Output an empty line between test cases.</p>
<p>A code base is simply a string of characters. An infringing segment is a non-empty contiguous sequence of characters in the JCN code base that is textually identical to some contiguous sequence   of characters in the TDP code base, and is not contained in a larger infringing segment.  You should consider all characters in the code base, including spaces and the <i>newline</i> character at the end of each line.</p>
<p>If there are <i>k</i> or fewer common segments, print them all in decreasing order by length; if several segments have the same length, print them in the order they occur in JCN's code base. If there are more than <i>k</i> segments, print the first <i>k</i>  according to the given order.</p>
<p>You may assume that no code base contains more than 50,000 characters.</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[6
BEGIN TDP CODEBASE
the quick brown fox
jumps over the lazy dog.
so there!
END TDP CODEBASE
BEGIN JCN CODEBASE
now is the time for all
good men to come to the aid
of the party.
so there!
END JCN CODEBASE
100
BEGIN TDP CODEBASE
xyzzy
END TDP CODEBASE
BEGIN JCN CODEBASE
xyzzabczzyy
END JCN CODEBASE
0
]]></sample_input>
<sample_output><![CDATA[CASE 1
INFRINGING SEGMENT 1 LENGTH 12 POSITION 64
.
so there!

INFRINGING SEGMENT 2 LENGTH 5 POSITION 6
 the 
INFRINGING SEGMENT 3 LENGTH 5 POSITION 42
o the
INFRINGING SEGMENT 4 LENGTH 5 POSITION 43
 the 
INFRINGING SEGMENT 5 LENGTH 5 POSITION 54
 the 
INFRINGING SEGMENT 6 LENGTH 3 POSITION 15
 fo

CASE 2
INFRINGING SEGMENT 1 LENGTH 4 POSITION 0
xyzz
INFRINGING SEGMENT 2 LENGTH 3 POSITION 7
zzy
INFRINGING SEGMENT 3 LENGTH 2 POSITION 10
y
]]></sample_output>
<test_input><![CDATA[1000
BEGIN TDP CODEBASE

begin bogus stuff
BEGIN TDP CODEBASE
BEGIN JCN CODEBASE
END JCN CODEBASE
END TDP CODEBASE not
not END TDP CODEBASE
END JCN CODEBASE not
not END JCN CODEBASE
end bogus stuff

END TDP CODEBASE
BEGIN JCN CODEBASE

begin bogus stuff
BEGIN TDP CODEBASE
END TDP CODEBASE
BEGIN JCN CODEBASE
END TDP CODEBASE not
not END TDP CODEBASE
END JCN CODEBASE not
not END JCN CODEBASE
end bogus stuff

END JCN CODEBASE
2
BEGIN TDP CODEBASE
abcdefxcdefg
END TDP CODEBASE
BEGIN JCN CODEBASE
abcdefg
END JCN CODEBASE
5
BEGIN TDP CODEBASE
the quick brown fox
jumps over the lazy dog.
so there!
END TDP CODEBASE
BEGIN JCN CODEBASE
now is the time for all
good men to come to the aid
of the party.
so there!
END JCN CODEBASE
100
BEGIN TDP CODEBASE
/* @judge_id: 1029TJ 10247  */
#include <stdio.h>
#include <string.h>
main(){char *x[30][30];int i,j,b,d,k;
x[1][1]=(char *)malloc(2);
strcat(x[1][1],"1");
x[1][2]=(char *)malloc(2);
strcat(x[1][2],"1");
x[1][3]=(char *)malloc(2);
strcat(x[1][3],"1");
x[1][4]=(char *)malloc(2);
strcat(x[1][4],"1");
x[1][5]=(char *)malloc(2);
strcat(x[1][5],"1");
x[1][6]=(char *)malloc(2);
strcat(x[1][6],"1");
x[1][7]=(char *)malloc(2);
strcat(x[1][7],"1");
x[1][8]=(char *)malloc(2);
strcat(x[1][8],"1");
x[1][9]=(char *)malloc(2);
strcat(x[1][9],"1");
x[1][10]=(char *)malloc(2);
strcat(x[1][10],"1");
x[1][11]=(char *)malloc(2);
strcat(x[1][11],"1");
x[1][12]=(char *)malloc(2);
strcat(x[1][12],"1");
x[1][13]=(char *)malloc(2);
strcat(x[1][13],"1");
x[1][14]=(char *)malloc(2);
strcat(x[1][14],"1");
x[1][15]=(char *)malloc(2);
strcat(x[1][15],"1");
x[1][16]=(char *)malloc(2);
strcat(x[1][16],"1");
x[1][17]=(char *)malloc(2);
strcat(x[1][17],"1");
x[1][18]=(char *)malloc(2);
strcat(x[1][18],"1");
x[1][19]=(char *)malloc(2);
strcat(x[1][19],"1");
x[1][20]=(char *)malloc(2);
strcat(x[1][20],"1");
x[1][21]=(char *)malloc(2);
strcat(x[1][21],"1");
x[2][1]=(char *)malloc(2);
strcat(x[2][1],"2");
x[2][2]=(char *)malloc(3);
strcat(x[2][2],"80");
x[2][3]=(char *)malloc(9);
strcat(x[2][3],"21964800");
x[2][4]=(char *)malloc(24);
strcat(x[2][4],"74836825861835980800000");
x[2][5]=(char *)malloc(65);
strcat(x[2][5],"26066549988998675561957036762896090673406694248362");
strcat(x[2][5],"80320000000000");
x[2][6]=(char *)malloc(165);
strcat(x[2][6],"41005268973580817988588059080490296081534693390328");
strcat(x[2][6],"55054184499367855150644326644215233192190463635631");
strcat(x[2][6],"00250066375544243473017456092975172943872000000000");
strcat(x[2][6],"00000000000000");
x[2][7]=(char *)malloc(404);
strcat(x[2][7],"24344114258986601673401341239959149651372090252468");
strcat(x[2][7],"51730007017475190131421700516106290558434146618842");
strcat(x[2][7],"38426510126936525915284822554973789784037398873503");
strcat(x[2][7],"48065083354021659447590713964485262521282492781163");
strcat(x[2][7],"74587947952600937789575140974403104763945296840800");
strcat(x[2][7],"52137118069438250576076120788331275507809612334188");
strcat(x[2][7],"79109191897030071988638349697985354771838843209699");
strcat(x[2][7],"34766080000000000000000000000000000000000000000000");
strcat(x[2][7],"000");
x[2][8]=(char *)malloc(958);
strcat(x[2][8],"70150024683575387541811881498966168526975695664851");
strcat(x[2][8],"50879684989160411107157616225185047153538629715969");
strcat(x[2][8],"32804203903839893333939405366151283793803624582330");
strcat(x[2][8],"41038180477828161321681576812622059160221126885609");
strcat(x[2][8],"43214710630673119788177170903185200715205093492427");
strcat(x[2][8],"54989899391268311037576444047435856097909663884754");
strcat(x[2][8],"00321509416138708522256206487139213233164290223347");
strcat(x[2][8],"20948708536902388466823562235494205239068684122403");
strcat(x[2][8],"19573302836850674651432516898161813303265720348092");
strcat(x[2][8],"98602742025113338912617551786096344546749400866603");
strcat(x[2][8],"04794949764459516805008715078814069673590473935130");
strcat(x[2][8],"02003658675476104709027016465077547345579773447093");
strcat(x[2][8],"64063429331159359604519220583701982241211839384082");
strcat(x[2][8],"22752893385438068442206720504676276386414566453049");
strcat(x[2][8],"15962219565339865938729139939256081556564240791383");
strcat(x[2][8],"97323000987133696877108079844872654702744447415739");
strcat(x[2][8],"66803221834541862018973348720658574553380258675795");
strcat(x[2][8],"08396630265036800000000000000000000000000000000000");
strcat(x[2][8],"00000000000000000000000000000000000000000000000000");
strcat(x[2][8],"0000000");
x[2][9]=(char *)malloc(2221);
strcat(x[2][9],"55184816417700517504174238347544248873146684961149");
strcat(x[2][9],"96382998702692591500420274213177471841468495673862");
strcat(x[2][9],"90521730327419862433749115555051939640172212006393");
strcat(x[2][9],"47823173777280422994469551958720358017722090322822");
strcat(x[2][9],"61176858126671972646348368284494821946069973883813");
strcat(x[2][9],"39610897645976842933337736555657791136975795118443");
strcat(x[2][9],"76703731217813996049043585053687740619134081787524");
strcat(x[2][9],"71080820753598623374835007634113043421063546030510");
strcat(x[2][9],"99312295277378644358269477785225983691679379598593");
strcat(x[2][9],"45220003890216080248723052292968643813838838002246");
strcat(x[2][9],"27647152412977324760764251659621977777489324003458");
strcat(x[2][9],"18313315485475789225941782512532999834532908721844");
strcat(x[2][9],"84813974092905104341906424066270855600960673108125");
strcat(x[2][9],"09907686670537399239307240541853514813615556406666");
strcat(x[2][9],"69862706437953519917384381946077653282050592654687");
strcat(x[2][9],"51111655025882845682841562629435714167489513214194");
strcat(x[2][9],"83162521329902170955825941182950167966851885715570");
strcat(x[2][9],"07754485769074574786397242719469036816428767054157");
strcat(x[2][9],"07433465980619476155099908828145974552867751158983");
strcat(x[2][9],"52929878512356969004112179823580931617382217827103");
strcat(x[2][9],"82783996140946422181021469680432905493784863859999");
strcat(x[2][9],"76854192468015016528905969085701435759934294365248");
strcat(x[2][9],"88083722171049543259187408442178626282493351413722");
strcat(x[2][9],"24708859062066182144438921860892442667833499747821");
strcat(x[2][9],"09680449084464674919355711470140024226527757678933");
strcat(x[2][9],"24998816997662647991224866905916692574269612325061");
strcat(x[2][9],"58739980717673429102992657299181089063871947158012");
strcat(x[2][9],"98604796539541143628526594308445336924615021186123");
strcat(x[2][9],"37033673490703298856092805479972676381629463293423");
strcat(x[2][9],"84030826686156232187559856380045068976384246908917");
strcat(x[2][9],"75922249999498960119463497069092143850253002256146");
strcat(x[2][9],"54641196612363056337458802984097554603177688950621");
strcat(x[2][9],"44560427329213368694007776819476145519901502014955");
strcat(x[2][9],"77546772278245967683891219309360031247531031294234");
strcat(x[2][9],"46806336040015613842868370349539846854501108911642");
strcat(x[2][9],"19505278390579132134102916862435761029539141025149");
strcat(x[2][9],"28913109499613084812408676973240271324885448208644");
strcat(x[2][9],"91628955955192813469778205733424210504652060360955");
strcat(x[2][9],"77658783204638155918904314416859843794615860793983");
strcat(x[2][9],"29182975610243472102698953424397401438622731873925");
strcat(x[2][9],"70427457994441742149828294660325376000000000000000");
strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
strcat(x[2][9],"00000000000000000000");
x[2][10]=(char *)malloc(5055);
strcat(x[2][10],"43395481677793492582976150229527319481832931952928");
strcat(x[2][10],"72246578846629686439813370511761987529308089114913");
strcat(x[2][10],"98651413502336525549687910729419315235399982721322");
strcat(x[2][10],"10599726592738666739902358903206398902335237423709");
strcat(x[2][10],"43970869199907453881436847191974692119559255106859");
strcat(x[2][10],"45084926368871498088965120619200900235748928011954");
strcat(x[2][10],"56766952541251449677528149969040542534059142975555");
strcat(x[2][10],"84083354352053089761755889057593977800321857617423");
strcat(x[2][10],"05901189406677707017663819454129695904200945953631");
strcat(x[2][10],"45267215277680540060098912471967655263720054015867");
strcat(x[2][10],"24871122542563702181185089918634657057213017524368");
strcat(x[2][10],"79404660788807280409477424154829999415511547858494");
strcat(x[2][10],"97845372994352885496747249725359463130436168765654");
strcat(x[2][10],"36802679226184045437833398236963161613176885097650");
strcat(x[2][10],"50007078975559638104773062938810982671445762108655");
strcat(x[2][10],"73147775618459421133208399357517632935860979586441");
strcat(x[2][10],"44029919456933848938419576540200901529120070158762");
strcat(x[2][10],"36804867749000834473815632726893846945078630233140");
strcat(x[2][10],"78602857426771749237140009948136106406822585691220");
strcat(x[2][10],"59404275627465008963940117969554012879498503245723");
strcat(x[2][10],"23181780904298821660584951671688788263228011142555");
strcat(x[2][10],"19442941831620135121439649859927067349329009807437");
strcat(x[2][10],"42237851436644302475299020730680316510595661646549");
strcat(x[2][10],"73736764260369842937718218103477964074028442516526");
strcat(x[2][10],"79407470248973183975103327250643727071040613051019");
strcat(x[2][10],"85311706569916046937297966951231145445998002737083");
strcat(x[2][10],"07019435395542538090983350523750933844488681503445");
strcat(x[2][10],"32656834219294496474752306942492740941995107586755");
strcat(x[2][10],"37533936782935894941923646803024329100050921315909");
strcat(x[2][10],"78769675435589015155518345241676177652558761553905");
strcat(x[2][10],"82280954703402326313856564108866582741560748728643");
strcat(x[2][10],"90513642281875460231493210062902079993707975130435");
strcat(x[2][10],"36996741800878194299311215563317541601985619440938");
strcat(x[2][10],"98676095235074221399605516684660692475054670100364");
strcat(x[2][10],"32521333323396228317916108143118534395174534691912");
strcat(x[2][10],"64072856649785396040845854010580392344958748019083");
strcat(x[2][10],"19080765762582587186999277673944148980676851473602");
strcat(x[2][10],"33810438454532391030724586251935445580769758133011");
strcat(x[2][10],"08241097955049112912596530739657026723578873536392");
strcat(x[2][10],"15893646295031806485283796124033701940495796213688");
strcat(x[2][10],"05062687217365069967192714069701104294037590987988");
strcat(x[2][10],"42923936155448192138042526384346067762978881427944");
strcat(x[2][10],"51018817030008563992824661451541951878179616852123");
strcat(x[2][10],"65442289690745026060690608698079277981901650583555");
strcat(x[2][10],"34634529948224509924085130577497662937820227078841");
strcat(x[2][10],"89120535441785925182678638906095332841512912594396");
strcat(x[2][10],"22674664501019959958435009112526927614601680781778");
strcat(x[2][10],"19902187264813942429947930069627563380622187909866");
strcat(x[2][10],"69160954537444098551800583966836365385338042397024");
strcat(x[2][10],"12142234899760256134313510057923807863499487847863");
strcat(x[2][10],"23864799417878080124777311820652465607616428351585");
strcat(x[2][10],"10437958800461270609454630427795041186387062799944");
strcat(x[2][10],"86288155125527235987665003584628526504391651814308");
strcat(x[2][10],"03788754363189170406273616526022870590693868570870");
strcat(x[2][10],"00635709898770405145778674967210667106195984482974");
strcat(x[2][10],"05347550750706205973906168833790363175985190440004");
strcat(x[2][10],"07921806520365689534500077549550057980687587610639");
strcat(x[2][10],"45291826476007950012642072390719467853203574575191");
strcat(x[2][10],"42658995179867804017175049872492956843823669933395");
strcat(x[2][10],"36021987124581460710261031300825809044695803465324");
strcat(x[2][10],"59240257330476731928142317037571678006588842269130");
strcat(x[2][10],"86523139259130072741725988069970929274893193846831");
strcat(x[2][10],"45965629295411258498624696522023099016822858645678");
strcat(x[2][10],"15766081625261511031208304943218521550329043966692");
strcat(x[2][10],"42962375173472154633552934317579735394419175458149");
strcat(x[2][10],"36665950840759331681441767743028019202652557990846");
strcat(x[2][10],"62244559399420898330051327302051882869871141759928");
strcat(x[2][10],"16268476892028417219731756203648854241226081628198");
strcat(x[2][10],"43271107862968456058057157708577915003351121052351");
strcat(x[2][10],"41431239552868824615839718953287557534005828616833");
strcat(x[2][10],"08513850085055293061630830914293606124655464158921");
strcat(x[2][10],"46698213386284720877315715604105304880563432974930");
strcat(x[2][10],"05435477214071932831391615228717056400926140440145");
strcat(x[2][10],"44854745730142284757181159506520358158554714200328");
strcat(x[2][10],"67366750183006958184351825202792869816923281209152");
strcat(x[2][10],"76479363125838298818791548888458125808667808828051");
strcat(x[2][10],"75542957090789146997369927321558024636308418822929");
strcat(x[2][10],"95492455960815307672092056264011794399976842471606");
strcat(x[2][10],"23504184893226651975997324686189010475216915129079");
strcat(x[2][10],"80411742586237613602933821618544452972569303634819");
strcat(x[2][10],"34026031492321214860066592225920336194360524514290");
strcat(x[2][10],"81209768734690402718770678018987679630327849110731");
strcat(x[2][10],"49931510250052158759386224082154374695306658996261");
strcat(x[2][10],"87898293151151509429257410678730571863668911533177");
strcat(x[2][10],"60870258201709329118485542376826780296468386345130");
strcat(x[2][10],"80894898210961708330412666869204733463603861223963");
strcat(x[2][10],"37472769832384792572597689932146314340328103679737");
strcat(x[2][10],"59499603119867320572199598009185738441240683325602");
strcat(x[2][10],"53201560879727526239152789300838626688267672354349");
strcat(x[2][10],"79543754454879996203596583204795576251386668634612");
strcat(x[2][10],"73073040093338095781255661417565017087240907890528");
strcat(x[2][10],"38731935291592823167392538308174801298426002695642");
strcat(x[2][10],"36970505117337567387071265674932948313799563321476");
strcat(x[2][10],"97474487450458861348252779806720000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
strcat(x[2][10],"0000");
x[3][1]=(char *)malloc(2);
strcat(x[3][1],"6");
x[3][2]=(char *)malloc(8);
strcat(x[3][2],"7484400");
x[3][3]=(char *)malloc(39);
strcat(x[3][3],"35417271278873496315860673177600000000");
x[3][4]=(char *)malloc(169);
strcat(x[3][4],"54714689201271396166464418564370309731330604107860");
strcat(x[3][4],"20281912033630235412517090151116983074087978403851");
strcat(x[3][4],"78119946966391820458049986500071192547819520000000");
strcat(x[3][4],"000000000000000000");
x[3][5]=(char *)malloc(675);
strcat(x[3][5],"58361314001262035923951371535851482325730388972602");
strcat(x[3][5],"33148491512370401834117219413276204849361226379422");
strcat(x[3][5],"93164741849360306632764958523207542193417101375270");
strcat(x[3][5],"81349354611978276450260796811732559240150194044226");
strcat(x[3][5],"90668320182267740620319363099933827028867728140749");
strcat(x[3][5],"91953059859187893309056217107536861090292969083421");
strcat(x[3][5],"75944943953427898932102000929828500873823264373290");
strcat(x[3][5],"25865213551926905003591255521518489159536209344897");
strcat(x[3][5],"98782852083008479208704588563269702286841978164088");
strcat(x[3][5],"94150214630674320564386168050370199043185242456953");
strcat(x[3][5],"13420729504060765058837505237306183823482512717975");
strcat(x[3][5],"73885121946610140433868523728909629907586252800000");
strcat(x[3][5],"00000000000000000000000000000000000000000000000000");
strcat(x[3][5],"000000000000000000000000");
x[3][6]=(char *)malloc(2541);
strcat(x[3][6],"15624264289858381167166638476020539199936877066827");
strcat(x[3][6],"44920691775874495819954663026480223772196738080669");
strcat(x[3][6],"68923307567418584020755507622062129402536831792096");
strcat(x[3][6],"30381242515557503674265920419045824985517469070276");
strcat(x[3][6],"33839316542421370591453376229341910810176981071401");
strcat(x[3][6],"27498383977604380141938321352618076257143332332345");
strcat(x[3][6],"13722648113071641811315718401462251331435493367916");
strcat(x[3][6],"81579161141072353954611569315444940492137110490705");
strcat(x[3][6],"29172353048517704408731610614014933231642477808459");
strcat(x[3][6],"03608589631273520040636528697768615106352751345782");
strcat(x[3][6],"86951935516170331649818304978017394288298776915313");
strcat(x[3][6],"87652460821897056158086550578237573357659291405420");
strcat(x[3][6],"71307695335833920543237254675056946500430178857831");
strcat(x[3][6],"62131175637149277736184829354053759135041181238702");
strcat(x[3][6],"90743328543928367041870709181254903935082463026663");
strcat(x[3][6],"78797719593633682454651703335380338567544717919434");
strcat(x[3][6],"22653673248392456939195345403234274009037368484992");
strcat(x[3][6],"98375319610582187859384514170568487091552266801013");
strcat(x[3][6],"22129496886994243792189658442546672390003979313721");
strcat(x[3][6],"50621376330024122134138025485394022681029369617764");
strcat(x[3][6],"04190984455457042051777640216943389738358926324810");
strcat(x[3][6],"20230246682253105279931577832379600389989429245582");
strcat(x[3][6],"68196422007313773155858863734967579481066684965391");
strcat(x[3][6],"17368346136250967091106042044752520779639289403423");
strcat(x[3][6],"71835265118317930171907639085896925032111285645626");
strcat(x[3][6],"19647252833663909382870703151503488518398077628825");
strcat(x[3][6],"95789667663091312252336698505040349029979366036888");
strcat(x[3][6],"74070907087428485524235623732559160365843830362657");
strcat(x[3][6],"45380150817524556320768188392192779004990793063389");
strcat(x[3][6],"16360508099383130087637853840392036573975208329370");
strcat(x[3][6],"13360259293706230922648562608307881020545340389250");
strcat(x[3][6],"28912053809181977076722329254103061856301596459261");
strcat(x[3][6],"16960236661113566995260011864522421875748669647874");
strcat(x[3][6],"44226498773231062980111128134643418654713838064098");
strcat(x[3][6],"17363323429463037627520603931839007392104278555939");
strcat(x[3][6],"76291462563341678848519906691612326891947676936654");
strcat(x[3][6],"48569070644104927323508960102961763524008532256497");
strcat(x[3][6],"85864825923643823393693175304614481721928460381455");
strcat(x[3][6],"90728773466524988048873503222115699527802830223824");
strcat(x[3][6],"74889025308219214228954816030771980215088316014439");
strcat(x[3][6],"19185903780383308588186389208099366885700869755992");
strcat(x[3][6],"62300811144666429327131360667779577890678792741758");
strcat(x[3][6],"13935010256359253189963948489831195073302019267715");
strcat(x[3][6],"96534027598907775822107934620913751165671726681304");
strcat(x[3][6],"45857897041768494633696585326667665576390179404542");
strcat(x[3][6],"30390687757321966455677648554868183631034056704000");
strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
strcat(x[3][6],"0000000000000000000000000000000000000000");
x[3][7]=(char *)malloc(9180);
strcat(x[3][7],"29084744594278744626586535191794912907878559979447");
strcat(x[3][7],"83337411106058974295838414991677820381042912946256");
strcat(x[3][7],"99987854137029792125265704463867799770645310636494");
strcat(x[3][7],"00507897985419506765774793101819559397765736758434");
strcat(x[3][7],"44014582942748558404899910398719480499122182782924");
strcat(x[3][7],"72306197299429976139186060146753129091378056419808");
strcat(x[3][7],"64606546199772063795298561219741550221259145231097");
strcat(x[3][7],"04380017634929489186403066265971802011664547360144");
strcat(x[3][7],"00494411931230960646964451911460911282703229767013");
strcat(x[3][7],"08860936907854018174780757300426705060444594521011");
strcat(x[3][7],"66436386621082433653294835251581703943071713861066");
strcat(x[3][7],"81369223874939366543353337235122013549540930220356");
strcat(x[3][7],"94376574883112091730900366330138165545097099046356");
strcat(x[3][7],"50003033838269074946358193519805889990839222867723");
strcat(x[3][7],"20787234619401981715621193821377274956525593249019");
strcat(x[3][7],"49738954687283290352647412389617637971737110549284");
strcat(x[3][7],"04549256870675598737026270783427407891750755077771");
strcat(x[3][7],"51610630986362989411726459550904972634314669755687");
strcat(x[3][7],"83978213325872507206519200863974657985620598238140");
strcat(x[3][7],"00833914336056356451779840033590536065684865838930");
strcat(x[3][7],"56507614704513056679465488350970924251771215141102");
strcat(x[3][7],"78710191796461628948821028258665048226162084218374");
strcat(x[3][7],"33550272219751219610089527473291759408453782148150");
strcat(x[3][7],"70021180052515179340276647236706369655448758954053");
strcat(x[3][7],"49989843967290711033279906149530164303262483943910");
strcat(x[3][7],"43495840866202936185326384655267013710382867769169");
strcat(x[3][7],"84579084374487956972060727454593091977756463480872");
strcat(x[3][7],"05125144278521646962486715945290022187679314712574");
strcat(x[3][7],"86139086588489125710810687700730393489411378273122");
strcat(x[3][7],"12769790409889703756125383030771571355247994698091");
strcat(x[3][7],"52688908337200894651269411490479042183546038368784");
strcat(x[3][7],"67326592399124469176555122749581216699408689244808");
strcat(x[3][7],"55603789301277074585650177769547805033932617201633");
strcat(x[3][7],"65676911647287841175950119773492996606703058815528");
strcat(x[3][7],"81743413298885213726172915541604279352360958394418");
strcat(x[3][7],"62549619632497806505374788170859727221311078190578");
strcat(x[3][7],"39199599536709663020242538511454011729584773196136");
strcat(x[3][7],"85227312924407379034063402507841279451961962111432");
strcat(x[3][7],"47091853229177398192101560341940062676529251540592");
strcat(x[3][7],"87183301011583577016406765369353836508368754381708");
strcat(x[3][7],"24076731992504157942618979804083963598627647993681");
strcat(x[3][7],"04463340182603608799527372267413981506328244909049");
strcat(x[3][7],"31176827458750614179818176265927416574042085928340");
strcat(x[3][7],"07386285328178943543432642517442734795128033214416");
strcat(x[3][7],"33458768191949222446379250183942930053603310268974");
strcat(x[3][7],"70722630285319505150902989831733764031194694802953");
strcat(x[3][7],"41820915574109635405705999628957598945811391910167");
strcat(x[3][7],"15838402654470253340580893540193429456175715300170");
strcat(x[3][7],"03165186552247001379574629230566028013403417616728");
strcat(x[3][7],"54416049044045441754968908051805017650349375583134");
strcat(x[3][7],"20026912124936294010305706429774738269728035061259");
strcat(x[3][7],"15857588920216616209047961171593372245442272332164");
strcat(x[3][7],"44037971828579298144701929734729051408057528003427");
strcat(x[3][7],"11398897484053426537729738272280603980379210874389");
strcat(x[3][7],"93172866620784850079070954193771923282927527106947");
strcat(x[3][7],"93695545975696722122385205054363173783630673651259");
strcat(x[3][7],"37904132951108515648005428698332233028513026256199");
strcat(x[3][7],"27099181232621975292771541564900333860737651060472");
strcat(x[3][7],"54475947192092914298430615371553133190499140067824");
strcat(x[3][7],"84850320065083985452492201697738480933221958670686");
strcat(x[3][7],"45641908716455990652816153987202002977478467792487");
strcat(x[3][7],"40509904409775798969009736912580598530725957637188");
strcat(x[3][7],"63101068103325427334270779747843956523785628190197");
strcat(x[3][7],"91141132631177403380194577172745833291586771358448");
strcat(x[3][7],"21764844149973784116046444295083219049190024912335");
strcat(x[3][7],"19008918480875472191313796768589391309140156129681");
strcat(x[3][7],"47199681035606125325238988701069957737282940756224");
strcat(x[3][7],"15652921110816184275667462155208605846490436753967");
strcat(x[3][7],"68826434231896321635651210276381822482581130981099");
strcat(x[3][7],"76545508463559797306439982706965257109959914625881");
strcat(x[3][7],"89376709477152159083586091317992045525766057072107");
strcat(x[3][7],"73628515348246925459060138913712434595724244412290");
strcat(x[3][7],"96078340868433833678321640589074043313079627772555");
strcat(x[3][7],"86731694997782517052155064065484988143916968789460");
strcat(x[3][7],"78178681810074811490741302250648565456927305219532");
strcat(x[3][7],"64594696649562425521764993596799561887048961140991");
strcat(x[3][7],"93755606086901936126877750243789308464995582006223");
strcat(x[3][7],"37223952943910345433252666393890356418281315704649");
strcat(x[3][7],"34531961049366749553787906125078702758099723050494");
strcat(x[3][7],"23831957940228413469759092884006639151607534810138");
strcat(x[3][7],"05104787669044630471390750779608474906080045758259");
strcat(x[3][7],"61652130630087784149923628280032340607536679852134");
strcat(x[3][7],"11088487438094782572225787521879121409683704605251");
strcat(x[3][7],"58920795423526394917270295741978669386922273515362");
strcat(x[3][7],"09106800362055622398115154883871346466366581572947");
strcat(x[3][7],"85457812619146614502629329179021067318170606261821");
strcat(x[3][7],"79862651658342621472808454727287365709984192679061");
strcat(x[3][7],"29064090439255251278814337596198025024663548865324");
strcat(x[3][7],"23289961682696285485084604150669787824705718957346");
strcat(x[3][7],"75658334891571011273493786461898079978935615279234");
strcat(x[3][7],"39595005514731249244544391964197710626067115879473");
strcat(x[3][7],"50653841941081739052378604530556437764455209877651");
strcat(x[3][7],"14403973639460023882832062247078389987347809914987");
strcat(x[3][7],"44777063363110850064162556648893586837728448270805");
strcat(x[3][7],"51671208017298999618447374544541140027783201183680");
strcat(x[3][7],"19275466238454277320736893130434432194890055702337");
strcat(x[3][7],"01889703037418808204075091394375457879338890305166");
strcat(x[3][7],"44682890853324480153107059134384642489064697551625");
strcat(x[3][7],"80713392651399819521742274132007256541584483471728");
strcat(x[3][7],"80206347637281163236540796950652255835360370982910");
strcat(x[3][7],"73008794756196711327179143135271030750002279962724");
strcat(x[3][7],"57402217679406834995168093170361733469194360112916");
strcat(x[3][7],"09641309395917837972905190317771313273440185481628");
strcat(x[3][7],"04917766636587156434523445047415247190115879357886");
strcat(x[3][7],"94660018772310465629313460751003612712992607431313");
strcat(x[3][7],"09759287653617509811513204963450171287927296741565");
strcat(x[3][7],"83301234767495902249158048910482953371462271958198");
strcat(x[3][7],"22777891994434890248369765962890816088515760262005");
strcat(x[3][7],"09446517689240695826058092072112921316332730097390");
strcat(x[3][7],"86343141225848063937331514059346919911050054607901");
strcat(x[3][7],"72537669810446351214458694301474877909395968410325");
strcat(x[3][7],"78504869539420572279546340858304263712782263204088");
strcat(x[3][7],"47123921900952989288303473411546040040395467938985");
strcat(x[3][7],"51206957808654888483439258888416137349085566533425");
strcat(x[3][7],"33634456904845185183256417126735475598473730238643");
strcat(x[3][7],"72144708352422215840834945519370048515396377078408");
strcat(x[3][7],"77036406729415908468574474794009557517219196414539");
strcat(x[3][7],"71677078919884849339521549816498868087673118266761");
strcat(x[3][7],"47738037959218588982615812141746996328479921109650");
strcat(x[3][7],"36707218070884075578449230952744112750765684762747");
strcat(x[3][7],"56958538805965363899725740708865474470172769560827");
strcat(x[3][7],"04301496568125390251346713712429545256134459081777");
strcat(x[3][7],"25959779883327492716595745072036483313885817802111");
strcat(x[3][7],"88857951575050133859037146158756510459092174100404");
strcat(x[3][7],"04306678390374776338775920245699586261685868410939");
strcat(x[3][7],"74369910476019486650367005474977278489567725827419");
strcat(x[3][7],"49940153244206539164534549493460283855572910034405");
strcat(x[3][7],"32174791028298440854962606006556052961566946794231");
strcat(x[3][7],"06392707460563152836228625412710010372923259388706");
strcat(x[3][7],"58504731786762214819830181319093882118051727410246");
strcat(x[3][7],"99025509094212001777996313499387599980945105703449");
strcat(x[3][7],"33249634056211782245056616886334509675225504535340");
strcat(x[3][7],"68491040286765437877092994594440227775617769124999");
strcat(x[3][7],"06498109454675717758290728595311903179544705540677");
strcat(x[3][7],"32766032408033424157845463726255217303656120176545");
strcat(x[3][7],"34570156331533251105837485855376704280173016087228");
strcat(x[3][7],"08677169423292705409367277409418835005610061709634");
strcat(x[3][7],"02285636683712421824957479238711499383813992240163");
strcat(x[3][7],"33929772002261033270453129903856971426483870694689");
strcat(x[3][7],"71072380880010370334802653189430384874337535880481");
strcat(x[3][7],"88280700536471530642757197438128544945806820464487");
strcat(x[3][7],"22512673175536313003903032416695500350707147461743");
strcat(x[3][7],"73984869920595240683156586507594769021885695516963");
strcat(x[3][7],"82663995344405755723901389096327728554365395768239");
strcat(x[3][7],"99114945486860795120122247991861918124545706523472");
strcat(x[3][7],"46878716384825656044095189289366343851923180582949");
strcat(x[3][7],"99985264128545177612472397771798106122664201877235");
strcat(x[3][7],"39611436527908773464819624807300647489160425995729");
strcat(x[3][7],"31092098805185953956791169540740673830200568070369");
strcat(x[3][7],"32826582892759524694642064573382618319447447741139");
strcat(x[3][7],"46015295352603330879497912762301092623354786013950");
strcat(x[3][7],"91158344670521231728178833660483470586738232262202");
strcat(x[3][7],"74583349786210788048334699704888162353770949048891");
strcat(x[3][7],"38428920697574501988991190475141103574163566938409");
strcat(x[3][7],"19299291740364470023490557926921631648228360624449");
strcat(x[3][7],"82069074707875744579094328859602990290741555160257");
strcat(x[3][7],"90299668899031400911412360777583361415958278051930");
strcat(x[3][7],"01114054913969432586459698510330056482728388015165");
strcat(x[3][7],"46922452310564514735456554804496711835424511833560");
strcat(x[3][7],"20259286069334765566388572997663612943486744300299");
strcat(x[3][7],"75825029986179982453790007327183825574210472938220");
strcat(x[3][7],"98006070316402087444113570350362093173779802443850");
strcat(x[3][7],"18024027120657093000830291675662883059300895263657");
strcat(x[3][7],"71038593060924517145696272084216197991940363593814");
strcat(x[3][7],"31235964223024642546161624324804686145271744374979");
strcat(x[3][7],"31170216554509317756797194916356233837230530540052");
strcat(x[3][7],"95662443740495327370372044519255985879948212726604");
strcat(x[3][7],"24754204855387064992709905299500684050772415743702");
strcat(x[3][7],"66730611906033998354736689497945499343257600000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
strcat(x[3][7],"00000000000000000000000000000");
x[4][1]=(char *)malloc(3);
strcat(x[4][1],"24");
x[4][2]=(char *)malloc(17);
strcat(x[4][2],"3892643213082624");
x[4][3]=(char *)malloc(112);
strcat(x[4][3],"11168291064879088019193230412527305191273783337969");
strcat(x[4][3],"20805568773780360323955699188899726020489099078167");
strcat(x[4][3],"71223552000");
x[4][4]=(char *)malloc(643);
strcat(x[4][4],"12600247869431333152293478431507503520441942212374");
strcat(x[4][4],"38310887393979180719705785341207922651742676629688");
strcat(x[4][4],"16665985072986350032680041952388930581681236745288");
strcat(x[4][4],"69221370133298786933455585379974211881374132806721");
strcat(x[4][4],"79418968891373401910462224354361905712940056625677");
strcat(x[4][4],"51881931674187595011884573538361918450162098698787");
strcat(x[4][4],"03544307721805061472561198652614931052530585010235");
strcat(x[4][4],"35830116917938112983260261606626216542577309415763");
strcat(x[4][4],"54721156040229380151095630710994246186162851462182");
strcat(x[4][4],"31644581598227575182552914440402407875796095712300");
strcat(x[4][4],"22074254021043700761268827954980045863976441605861");
strcat(x[4][4],"84269460455125239887387649139565707651239614190689");
strcat(x[4][4],"453392613705507277327302656000000000000000");
x[4][5]=(char *)malloc(3382);
strcat(x[4][5],"82333229941175479592513220450269545846383281777597");
strcat(x[4][5],"54408653219751679364539512357340150146166134496207");
strcat(x[4][5],"40713939182041883759025986920373965767514222325920");
strcat(x[4][5],"90898741194021083131667829936802120287504042873003");
strcat(x[4][5],"19767740469835310084277229164113319195107247737593");
strcat(x[4][5],"80096741279835134057131573865701518431005162199875");
strcat(x[4][5],"21948543574237663507439544604750926599458612768709");
strcat(x[4][5],"75146865640090887862815742330261740699811967797405");
strcat(x[4][5],"64187595655418705302755363849458416961038387428062");
strcat(x[4][5],"59272650714083200746588880715409958294656296585179");
strcat(x[4][5],"58054036884768578494243329622148828303361328982969");
strcat(x[4][5],"01081306595343013724080907257217039929917558256973");
strcat(x[4][5],"73643004960731801014672120021460738535471471003372");
strcat(x[4][5],"09159396208568750239878596423129254320237785398937");
strcat(x[4][5],"41977562315853237358988644262837860185367074823769");
strcat(x[4][5],"65069038376601800667085094094952668040766801244552");
strcat(x[4][5],"70929023547546263825164872378441679962452928654723");
strcat(x[4][5],"14619732890539797639556974902176454310829844839448");
strcat(x[4][5],"56182503756133324079293290504000063666570643647922");
strcat(x[4][5],"12763720809392837747637500029933705366725575926330");
strcat(x[4][5],"85704903566618380584072103425482345229369898678385");
strcat(x[4][5],"95206039912500224124323893224610230340073318024789");
strcat(x[4][5],"32095400878180363696526781113928151223861325671939");
strcat(x[4][5],"51533690230600885096941855601753119007234173391289");
strcat(x[4][5],"08608520608128314122853542676450098850274645696890");
strcat(x[4][5],"54546359183797135037951792145823157699873685656264");
strcat(x[4][5],"39184131701652078122613187408743830585727154639121");
strcat(x[4][5],"63735557494204122193531601606154591658100237266594");
strcat(x[4][5],"14056424519263326131245812261047278135744850195944");
strcat(x[4][5],"76556352770449692122147271124819689590273692013537");
strcat(x[4][5],"88844810821102826784305345752919163864020398254123");
strcat(x[4][5],"14591463304437000915280868138102132883267506115563");
strcat(x[4][5],"70304279857854926608558956269493995132023833713432");
strcat(x[4][5],"41059016330107027447693592487330261289954703988443");
strcat(x[4][5],"42243941431156472059267543144668523875651825807414");
strcat(x[4][5],"30907771209850367333717095874323787518626511813651");
strcat(x[4][5],"04937090135545814069800634260819256676961369744466");
strcat(x[4][5],"67408003412890364043867431117083173717842494563807");
strcat(x[4][5],"50781292319634413091406366182267269591077299944779");
strcat(x[4][5],"88383885920155855045873327389846579366233021888559");
strcat(x[4][5],"35677377537386034385082467967344250531962240565653");
strcat(x[4][5],"63069071582814225012922599916225485288305398882426");
strcat(x[4][5],"13191087620560183099553620422524808857818046345281");
strcat(x[4][5],"69007782427194290289238268341088148907298693745907");
strcat(x[4][5],"80611722229592596282817149189185720849340998078599");
strcat(x[4][5],"99207031599241636695290715975493231329247071628603");
strcat(x[4][5],"64842232601686745358989424491222694585077872806688");
strcat(x[4][5],"93139549242249017696972400120518200904851889420578");
strcat(x[4][5],"54646605994572605758585175633567356486647728295491");
strcat(x[4][5],"94467897341072028550226345056926010023354958059968");
strcat(x[4][5],"82929937633084189749483437477736423235049093932903");
strcat(x[4][5],"35712248236462208366887752345044010834938331089205");
strcat(x[4][5],"22056335788635298601759064099339832342761409773809");
strcat(x[4][5],"94419607536840693277006196028489206723370532878994");
strcat(x[4][5],"12391881296712081990114300552393471266822608679385");
strcat(x[4][5],"79955813808155194089541837224303817579764017188422");
strcat(x[4][5],"86818129290142967769840464584256180919693607431855");
strcat(x[4][5],"35612628573130415538752549946312529347444253565312");
strcat(x[4][5],"37289741446271770437497168049004242307658111031646");
strcat(x[4][5],"00707814164626138602404807405090303027650835356705");
strcat(x[4][5],"06473538275569077826804446491991732104369612344040");
strcat(x[4][5],"26120837789034443050927771681428953869579606881537");
strcat(x[4][5],"03189121238250803872045323684952540492285999331137");
strcat(x[4][5],"29655484721622015871216150515094773524141939885369");
strcat(x[4][5],"27340264805458665881430414483247801954500710669673");
strcat(x[4][5],"51700351428657546526174427276532214567310171665427");
strcat(x[4][5],"72558028708249600000000000000000000000000000000000");
strcat(x[4][5],"0000000000000000000000000000000");
x[5][1]=(char *)malloc(4);
strcat(x[5][1],"120");
x[5][2]=(char *)malloc(30);
strcat(x[5][2],"34111736086958726676480000000");
x[5][3]=(char *)malloc(248);
strcat(x[5][3],"58839377205941583103463182799954414201366511570384");
strcat(x[5][3],"56422426741369195154553196178926207720498703908961");
strcat(x[5][3],"85636867054656326437951964198803561336543381312801");
strcat(x[5][3],"24615088422683225187435613410128564671858725029474");
strcat(x[5][3],"67126374400000000000000000000000000000000000000");
x[5][4]=(char *)malloc(1775);
strcat(x[5][4],"25745789432438429906884778240545059461396921014943");
strcat(x[5][4],"33340284031300973098266683062996213179748610326429");
strcat(x[5][4],"34187864360989415653217268257852830142760812892903");
strcat(x[5][4],"53318969112850899660706457960908009433762180285705");
strcat(x[5][4],"58075844884454537552370318212998548749276488835748");
strcat(x[5][4],"81010890919754894799814839485168732900641905469482");
strcat(x[5][4],"57570660508491662207662262214338971159964562991874");
strcat(x[5][4],"46049443095583839453116059305461245705945545910863");
strcat(x[5][4],"17635774942204633941803626300180317018867620589284");
strcat(x[5][4],"41857941900207006264171506070916761515179083589078");
strcat(x[5][4],"64850625419135144200512892484689522013441516135409");
strcat(x[5][4],"26245389949971968850519430713047057564344522268073");
strcat(x[5][4],"36931408133973545701696491882968121661208794361621");
strcat(x[5][4],"01803832209397408208509503576799619609183681572993");
strcat(x[5][4],"02068534906402486026262672062053338940763733657824");
strcat(x[5][4],"91487421742107185258312204043725752138014516231693");
strcat(x[5][4],"65144788021763768817146895479160376897401288403856");
strcat(x[5][4],"14451780724259395819927655094838959617331271576004");
strcat(x[5][4],"73451716455726393530131249809702391882969607246160");
strcat(x[5][4],"41607520918343157652358489409077596424345689112755");
strcat(x[5][4],"67358420981303154154358494815718240443111020677376");
strcat(x[5][4],"17961938516517689305612752287388461170548998933756");
strcat(x[5][4],"40844294697926001821037273894706897109827314588486");
strcat(x[5][4],"48066717896542298837505469316187352817821412410797");
strcat(x[5][4],"43628319961659290477923338408552035794651732602830");
strcat(x[5][4],"85762172120099585805612965352921974545818452966364");
strcat(x[5][4],"47268199107086496115658190322615675661281048845811");
strcat(x[5][4],"72645662523607027752013809883315685616536886149306");
strcat(x[5][4],"74679128957275993072955820963093617242778834180640");
strcat(x[5][4],"37815148918806105569042656626023312200159009818614");
strcat(x[5][4],"50500960444377476538990957265369093534301316515238");
strcat(x[5][4],"38222443153546129621565990502400000000000000000000");
strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
strcat(x[5][4],"000000000000000000000000");
x[6][1]=(char *)malloc(4);
strcat(x[6][1],"720");
x[6][2]=(char *)malloc(48);
strcat(x[6][2],"11942354952042770431904585727413846016000000000");
x[6][3]=(char *)malloc(473);
strcat(x[6][3],"33931862351641030265591470340890318858338627001624");
strcat(x[6][3],"01431094466910725815103355576409849458625111467673");
strcat(x[6][3],"96317149016685722183509838509699391647268610699451");
strcat(x[6][3],"35792871248131865909483478283615610890667818394712");
strcat(x[6][3],"85337327697532413160274492651868920958018558519594");
strcat(x[6][3],"86013117961671607922946860314049604433058145696020");
strcat(x[6][3],"03551054096114513298064699429853494106675181505118");
strcat(x[6][3],"59718736808929262155050122065629321268595555967855");
strcat(x[6][3],"84334438400000000000000000000000000000000000000000");
strcat(x[6][3],"0000000000000000000000");
x[7][1]=(char *)malloc(5);
strcat(x[7][1],"5040");
x[7][2]=(char *)malloc(70);
strcat(x[7][2],"33903054609530613510801584599672553526711367553766");
strcat(x[7][2],"6539520000000000000");
x[7][3]=(char *)malloc(811);
strcat(x[7][3],"45900861217119383737917588570564661646981101072388");
strcat(x[7][3],"61060298853858863187587242643460891828903877389142");
strcat(x[7][3],"26187622773216840453787827596432869775253811869965");
strcat(x[7][3],"55795424310461872647575848445980763505549081547848");
strcat(x[7][3],"16513558745289225234038737331302443675608594813756");
strcat(x[7][3],"20301079868769283552722539583238135272835521240747");
strcat(x[7][3],"28235139807533616785514319765369533947270567404310");
strcat(x[7][3],"65716265315159321859392496035501905197130812759096");
strcat(x[7][3],"80281878034146978338709100091586806154099944838550");
strcat(x[7][3],"00401464978298261480095876358667319712928622730099");
strcat(x[7][3],"59584239907659544129936368821719989949149056862379");
strcat(x[7][3],"92062170189486126721025725020359267567249198930141");
strcat(x[7][3],"38642722187004874943783417656102762239793053691250");
strcat(x[7][3],"89982551970234408160261213807850061296143794201139");
strcat(x[7][3],"89979214970880000000000000000000000000000000000000");
strcat(x[7][3],"00000000000000000000000000000000000000000000000000");
strcat(x[7][3],"0000000000");
x[8][1]=(char *)malloc(6);
strcat(x[8][1],"40320");
x[8][2]=(char *)malloc(98);
strcat(x[8][2],"14225115631196644887661494678136964890026836604975");
strcat(x[8][2],"63309963214502771962235804712960000000000000000");
x[9][1]=(char *)malloc(7);
strcat(x[9][1],"362880");
x[9][2]=(char *)malloc(131);
strcat(x[9][2],"14857159644817614973095227336208257378855699612846");
strcat(x[9][2],"88766942216863704985393094065876545992131370884059");
strcat(x[9][2],"645617234469978112000000000000");
x[10][1]=(char *)malloc(8);
strcat(x[10][1],"3628800");
x[10][2]=(char *)malloc(169);
strcat(x[10][2],"61233741050046626424711560849582796524943275475484");
strcat(x[10][2],"68035961789943805133285502705500842088069697355270");
strcat(x[10][2],"00221453969564832440571463528528225710899200000000");
strcat(x[10][2],"000000000000000000");
x[11][1]=(char *)malloc(9);
strcat(x[11][1],"39916800");
x[12][1]=(char *)malloc(10);
strcat(x[12][1],"479001600");
x[13][1]=(char *)malloc(11);
strcat(x[13][1],"6227020800");
x[14][1]=(char *)malloc(12);
strcat(x[14][1],"87178291200");
x[15][1]=(char *)malloc(14);
strcat(x[15][1],"1307674368000");
x[16][1]=(char *)malloc(15);
strcat(x[16][1],"20922789888000");
x[17][1]=(char *)malloc(16);
strcat(x[17][1],"355687428096000");
x[18][1]=(char *)malloc(17);
strcat(x[18][1],"6402373705728000");
x[19][1]=(char *)malloc(19);
strcat(x[19][1],"121645100408832000");
x[20][1]=(char *)malloc(20);
strcat(x[20][1],"2432902008176640000");
x[21][1]=(char *)malloc(21);
strcat(x[21][1],"51090942171709440000");
while (2 == scanf("%d%d",&k,&d)) {
if (k < 1 || d < 1 || k*d > 21) *(char *)0 = 0;
printf("%s\n",x[k][d]);}}
END TDP CODEBASE
BEGIN JCN CODEBASE
#include <stdio.h>
#include <string.h>
main(){char *x[30][30];
   int i,j,b,d,k;
   x[1][1]=(char *)malloc(2);
   strcat(x[1][1],"1");
   x[1][2]=(char *)malloc(2);
   strcat(x[1][2],"1");
   x[1][3]=(char *)malloc(2);
   strcat(x[1][3],"1");
   x[1][4]=(char *)malloc(2);
   strcat(x[1][4],"1");
   x[1][5]=(char *)malloc(2);
   strcat(x[1][5],"1");
   x[1][6]=(char *)malloc(2);
   strcat(x[1][6],"1");
   x[1][7]=(char *)malloc(2);
   strcat(x[1][7],"1");
   x[1][8]=(char *)malloc(2);
   strcat(x[1][8],"1");
   x[1][9]=(char *)malloc(2);
   strcat(x[1][9],"1");
   x[1][10]=(char *)malloc(2);
   strcat(x[1][10],"1");
   x[1][11]=(char *)malloc(2);
   strcat(x[1][11],"1");
   x[1][12]=(char *)malloc(2);
   strcat(x[1][12],"1");
   x[1][13]=(char *)malloc(2);
   strcat(x[1][13],"1");
   x[1][14]=(char *)malloc(2);
   strcat(x[1][14],"1");
   x[1][15]=(char *)malloc(2);
   strcat(x[1][15],"1");
   x[1][16]=(char *)malloc(2);
   strcat(x[1][16],"1");
   x[1][17]=(char *)malloc(2);
   strcat(x[1][17],"1");
   x[1][18]=(char *)malloc(2);
   strcat(x[1][18],"1");
   x[1][19]=(char *)malloc(2);
   strcat(x[1][19],"1");
   x[1][20]=(char *)malloc(2);
   strcat(x[1][20],"1");
   x[1][21]=(char *)malloc(2);
   strcat(x[1][21],"1");
   x[2][1]=(char *)malloc(2);
   strcat(x[2][1],"2");
   x[2][2]=(char *)malloc(3);
   strcat(x[2][2],"80");
   x[2][3]=(char *)malloc(9);
   strcat(x[2][3],"21964800");
   x[2][4]=(char *)malloc(24);
   strcat(x[2][4],"74836825861835980800000");
   x[2][5]=(char *)malloc(65);
   strcat(x[2][5],"26066549988998675561957036762896090673406694248362");
   strcat(x[2][5],"80320000000000");
   x[2][6]=(char *)malloc(165);
   strcat(x[2][6],"41005268973580817988588059080490296081534693390328");
   strcat(x[2][6],"55054184499367855150644326644215233192190463635631");
   strcat(x[2][6],"00250066375544243473017456092975172943872000000000");
   strcat(x[2][6],"00000000000000");
   x[2][7]=(char *)malloc(404);
   strcat(x[2][7],"24344114258986601673401341239959149651372090252468");
   strcat(x[2][7],"51730007017475190131421700516106290558434146618842");
   strcat(x[2][7],"38426510126936525915284822554973789784037398873503");
   strcat(x[2][7],"48065083354021659447590713964485262521282492781163");
   strcat(x[2][7],"74587947952600937789575140974403104763945296840800");
   strcat(x[2][7],"52137118069438250576076120788331275507809612334188");
   strcat(x[2][7],"79109191897030071988638349697985354771838843209699");
   strcat(x[2][7],"34766080000000000000000000000000000000000000000000");
   strcat(x[2][7],"000");
   x[2][8]=(char *)malloc(958);
   strcat(x[2][8],"70150024683575387541811881498966168526975695664851");
   strcat(x[2][8],"50879684989160411107157616225185047153538629715969");
   strcat(x[2][8],"32804203903839893333939405366151283793803624582330");
   strcat(x[2][8],"41038180477828161321681576812622059160221126885609");
   strcat(x[2][8],"43214710630673119788177170903185200715205093492427");
   strcat(x[2][8],"54989899391268311037576444047435856097909663884754");
   strcat(x[2][8],"00321509416138708522256206487139213233164290223347");
   strcat(x[2][8],"20948708536902388466823562235494205239068684122403");
   strcat(x[2][8],"19573302836850674651432516898161813303265720348092");
   strcat(x[2][8],"98602742025113338912617551786096344546749400866603");
   strcat(x[2][8],"04794949764459516805008715078814069673590473935130");
   strcat(x[2][8],"02003658675476104709027016465077547345579773447093");
   strcat(x[2][8],"64063429331159359604519220583701982241211839384082");
   strcat(x[2][8],"22752893385438068442206720504676276386414566453049");
   strcat(x[2][8],"15962219565339865938729139939256081556564240791383");
   strcat(x[2][8],"97323000987133696877108079844872654702744447415739");
   strcat(x[2][8],"66803221834541862018973348720658574553380258675795");
   strcat(x[2][8],"08396630265036800000000000000000000000000000000000");
   strcat(x[2][8],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][8],"0000000");
   x[2][9]=(char *)malloc(2221);
   strcat(x[2][9],"55184816417700517504174238347544248873146684961149");
   strcat(x[2][9],"96382998702692591500420274213177471841468495673862");
   strcat(x[2][9],"90521730327419862433749115555051939640172212006393");
   strcat(x[2][9],"47823173777280422994469551958720358017722090322822");
   strcat(x[2][9],"61176858126671972646348368284494821946069973883813");
   strcat(x[2][9],"39610897645976842933337736555657791136975795118443");
   strcat(x[2][9],"76703731217813996049043585053687740619134081787524");
   strcat(x[2][9],"71080820753598623374835007634113043421063546030510");
   strcat(x[2][9],"99312295277378644358269477785225983691679379598593");
   strcat(x[2][9],"45220003890216080248723052292968643813838838002246");
   strcat(x[2][9],"27647152412977324760764251659621977777489324003458");
   strcat(x[2][9],"18313315485475789225941782512532999834532908721844");
   strcat(x[2][9],"84813974092905104341906424066270855600960673108125");
   strcat(x[2][9],"09907686670537399239307240541853514813615556406666");
   strcat(x[2][9],"69862706437953519917384381946077653282050592654687");
   strcat(x[2][9],"51111655025882845682841562629435714167489513214194");
   strcat(x[2][9],"83162521329902170955825941182950167966851885715570");
   strcat(x[2][9],"07754485769074574786397242719469036816428767054157");
   strcat(x[2][9],"07433465980619476155099908828145974552867751158983");
   strcat(x[2][9],"52929878512356969004112179823580931617382217827103");
   strcat(x[2][9],"82783996140946422181021469680432905493784863859999");
   strcat(x[2][9],"76854192468015016528905969085701435759934294365248");
   strcat(x[2][9],"88083722171049543259187408442178626282493351413722");
   strcat(x[2][9],"24708859062066182144438921860892442667833499747821");
   strcat(x[2][9],"09680449084464674919355711470140024226527757678933");
   strcat(x[2][9],"24998816997662647991224866905916692574269612325061");
   strcat(x[2][9],"58739980717673429102992657299181089063871947158012");
   strcat(x[2][9],"98604796539541143628526594308445336924615021186123");
   strcat(x[2][9],"37033673490703298856092805479972676381629463293423");
   strcat(x[2][9],"84030826686156232187559856380045068976384246908917");
   strcat(x[2][9],"75922249999498960119463497069092143850253002256146");
   strcat(x[2][9],"54641196612363056337458802984097554603177688950621");
   strcat(x[2][9],"44560427329213368694007776819476145519901502014955");
   strcat(x[2][9],"77546772278245967683891219309360031247531031294234");
   strcat(x[2][9],"46806336040015613842868370349539846854501108911642");
   strcat(x[2][9],"19505278390579132134102916862435761029539141025149");
   strcat(x[2][9],"28913109499613084812408676973240271324885448208644");
   strcat(x[2][9],"91628955955192813469778205733424210504652060360955");
   strcat(x[2][9],"77658783204638155918904314416859843794615860793983");
   strcat(x[2][9],"29182975610243472102698953424397401438622731873925");
   strcat(x[2][9],"70427457994441742149828294660325376000000000000000");
   strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][9],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][9],"00000000000000000000");
   x[2][10]=(char *)malloc(5055);
   strcat(x[2][10],"43395481677793492582976150229527319481832931952928");
   strcat(x[2][10],"72246578846629686439813370511761987529308089114913");
   strcat(x[2][10],"98651413502336525549687910729419315235399982721322");
   strcat(x[2][10],"10599726592738666739902358903206398902335237423709");
   strcat(x[2][10],"43970869199907453881436847191974692119559255106859");
   strcat(x[2][10],"45084926368871498088965120619200900235748928011954");
   strcat(x[2][10],"56766952541251449677528149969040542534059142975555");
   strcat(x[2][10],"84083354352053089761755889057593977800321857617423");
   strcat(x[2][10],"05901189406677707017663819454129695904200945953631");
   strcat(x[2][10],"45267215277680540060098912471967655263720054015867");
   strcat(x[2][10],"24871122542563702181185089918634657057213017524368");
   strcat(x[2][10],"79404660788807280409477424154829999415511547858494");
   strcat(x[2][10],"97845372994352885496747249725359463130436168765654");
   strcat(x[2][10],"36802679226184045437833398236963161613176885097650");
   strcat(x[2][10],"50007078975559638104773062938810982671445762108655");
   strcat(x[2][10],"73147775618459421133208399357517632935860979586441");
   strcat(x[2][10],"44029919456933848938419576540200901529120070158762");
   strcat(x[2][10],"36804867749000834473815632726893846945078630233140");
   strcat(x[2][10],"78602857426771749237140009948136106406822585691220");
   strcat(x[2][10],"59404275627465008963940117969554012879498503245723");
   strcat(x[2][10],"23181780904298821660584951671688788263228011142555");
   strcat(x[2][10],"19442941831620135121439649859927067349329009807437");
   strcat(x[2][10],"42237851436644302475299020730680316510595661646549");
   strcat(x[2][10],"73736764260369842937718218103477964074028442516526");
   strcat(x[2][10],"79407470248973183975103327250643727071040613051019");
   strcat(x[2][10],"85311706569916046937297966951231145445998002737083");
   strcat(x[2][10],"07019435395542538090983350523750933844488681503445");
   strcat(x[2][10],"32656834219294496474752306942492740941995107586755");
   strcat(x[2][10],"37533936782935894941923646803024329100050921315909");
   strcat(x[2][10],"78769675435589015155518345241676177652558761553905");
   strcat(x[2][10],"82280954703402326313856564108866582741560748728643");
   strcat(x[2][10],"90513642281875460231493210062902079993707975130435");
   strcat(x[2][10],"36996741800878194299311215563317541601985619440938");
   strcat(x[2][10],"98676095235074221399605516684660692475054670100364");
   strcat(x[2][10],"32521333323396228317916108143118534395174534691912");
   strcat(x[2][10],"64072856649785396040845854010580392344958748019083");
   strcat(x[2][10],"19080765762582587186999277673944148980676851473602");
   strcat(x[2][10],"33810438454532391030724586251935445580769758133011");
   strcat(x[2][10],"08241097955049112912596530739657026723578873536392");
   strcat(x[2][10],"15893646295031806485283796124033701940495796213688");
   strcat(x[2][10],"05062687217365069967192714069701104294037590987988");
   strcat(x[2][10],"42923936155448192138042526384346067762978881427944");
   strcat(x[2][10],"51018817030008563992824661451541951878179616852123");
   strcat(x[2][10],"65442289690745026060690608698079277981901650583555");
   strcat(x[2][10],"34634529948224509924085130577497662937820227078841");
   strcat(x[2][10],"89120535441785925182678638906095332841512912594396");
   strcat(x[2][10],"22674664501019959958435009112526927614601680781778");
   strcat(x[2][10],"19902187264813942429947930069627563380622187909866");
   strcat(x[2][10],"69160954537444098551800583966836365385338042397024");
   strcat(x[2][10],"12142234899760256134313510057923807863499487847863");
   strcat(x[2][10],"23864799417878080124777311820652465607616428351585");
   strcat(x[2][10],"10437958800461270609454630427795041186387062799944");
   strcat(x[2][10],"86288155125527235987665003584628526504391651814308");
   strcat(x[2][10],"03788754363189170406273616526022870590693868570870");
   strcat(x[2][10],"00635709898770405145778674967210667106195984482974");
   strcat(x[2][10],"05347550750706205973906168833790363175985190440004");
   strcat(x[2][10],"07921806520365689534500077549550057980687587610639");
   strcat(x[2][10],"45291826476007950012642072390719467853203574575191");
   strcat(x[2][10],"42658995179867804017175049872492956843823669933395");
   strcat(x[2][10],"36021987124581460710261031300825809044695803465324");
   strcat(x[2][10],"59240257330476731928142317037571678006588842269130");
   strcat(x[2][10],"86523139259130072741725988069970929274893193846831");
   strcat(x[2][10],"45965629295411258498624696522023099016822858645678");
   strcat(x[2][10],"15766081625261511031208304943218521550329043966692");
   strcat(x[2][10],"42962375173472154633552934317579735394419175458149");
   strcat(x[2][10],"36665950840759331681441767743028019202652557990846");
   strcat(x[2][10],"62244559399420898330051327302051882869871141759928");
   strcat(x[2][10],"16268476892028417219731756203648854241226081628198");
   strcat(x[2][10],"43271107862968456058057157708577915003351121052351");
   strcat(x[2][10],"41431239552868824615839718953287557534005828616833");
   strcat(x[2][10],"08513850085055293061630830914293606124655464158921");
   strcat(x[2][10],"46698213386284720877315715604105304880563432974930");
   strcat(x[2][10],"05435477214071932831391615228717056400926140440145");
   strcat(x[2][10],"44854745730142284757181159506520358158554714200328");
   strcat(x[2][10],"67366750183006958184351825202792869816923281209152");
   strcat(x[2][10],"76479363125838298818791548888458125808667808828051");
   strcat(x[2][10],"75542957090789146997369927321558024636308418822929");
   strcat(x[2][10],"95492455960815307672092056264011794399976842471606");
   strcat(x[2][10],"23504184893226651975997324686189010475216915129079");
   strcat(x[2][10],"80411742586237613602933821618544452972569303634819");
   strcat(x[2][10],"34026031492321214860066592225920336194360524514290");
   strcat(x[2][10],"81209768734690402718770678018987679630327849110731");
   strcat(x[2][10],"49931510250052158759386224082154374695306658996261");
   strcat(x[2][10],"87898293151151509429257410678730571863668911533177");
   strcat(x[2][10],"60870258201709329118485542376826780296468386345130");
   strcat(x[2][10],"80894898210961708330412666869204733463603861223963");
   strcat(x[2][10],"37472769832384792572597689932146314340328103679737");
   strcat(x[2][10],"59499603119867320572199598009185738441240683325602");
   strcat(x[2][10],"53201560879727526239152789300838626688267672354349");
   strcat(x[2][10],"79543754454879996203596583204795576251386668634612");
   strcat(x[2][10],"73073040093338095781255661417565017087240907890528");
   strcat(x[2][10],"38731935291592823167392538308174801298426002695642");
   strcat(x[2][10],"36970505117337567387071265674932948313799563321476");
   strcat(x[2][10],"97474487450458861348252779806720000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"00000000000000000000000000000000000000000000000000");
   strcat(x[2][10],"0000");
   x[3][1]=(char *)malloc(2);
   strcat(x[3][1],"6");
   x[3][2]=(char *)malloc(8);
   strcat(x[3][2],"7484400");
   x[3][3]=(char *)malloc(39);
   strcat(x[3][3],"35417271278873496315860673177600000000");
   x[3][4]=(char *)malloc(169);
   strcat(x[3][4],"54714689201271396166464418564370309731330604107860");
   strcat(x[3][4],"20281912033630235412517090151116983074087978403851");
   strcat(x[3][4],"78119946966391820458049986500071192547819520000000");
   strcat(x[3][4],"000000000000000000");
   x[3][5]=(char *)malloc(675);
   strcat(x[3][5],"58361314001262035923951371535851482325730388972602");
   strcat(x[3][5],"33148491512370401834117219413276204849361226379422");
   strcat(x[3][5],"93164741849360306632764958523207542193417101375270");
   strcat(x[3][5],"81349354611978276450260796811732559240150194044226");
   strcat(x[3][5],"90668320182267740620319363099933827028867728140749");
   strcat(x[3][5],"91953059859187893309056217107536861090292969083421");
   strcat(x[3][5],"75944943953427898932102000929828500873823264373290");
   strcat(x[3][5],"25865213551926905003591255521518489159536209344897");
   strcat(x[3][5],"98782852083008479208704588563269702286841978164088");
   strcat(x[3][5],"94150214630674320564386168050370199043185242456953");
   strcat(x[3][5],"13420729504060765058837505237306183823482512717975");
   strcat(x[3][5],"73885121946610140433868523728909629907586252800000");
   strcat(x[3][5],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][5],"000000000000000000000000");
   x[3][6]=(char *)malloc(2541);
   strcat(x[3][6],"15624264289858381167166638476020539199936877066827");
   strcat(x[3][6],"44920691775874495819954663026480223772196738080669");
   strcat(x[3][6],"68923307567418584020755507622062129402536831792096");
   strcat(x[3][6],"30381242515557503674265920419045824985517469070276");
   strcat(x[3][6],"33839316542421370591453376229341910810176981071401");
   strcat(x[3][6],"27498383977604380141938321352618076257143332332345");
   strcat(x[3][6],"13722648113071641811315718401462251331435493367916");
   strcat(x[3][6],"81579161141072353954611569315444940492137110490705");
   strcat(x[3][6],"29172353048517704408731610614014933231642477808459");
   strcat(x[3][6],"03608589631273520040636528697768615106352751345782");
   strcat(x[3][6],"86951935516170331649818304978017394288298776915313");
   strcat(x[3][6],"87652460821897056158086550578237573357659291405420");
   strcat(x[3][6],"71307695335833920543237254675056946500430178857831");
   strcat(x[3][6],"62131175637149277736184829354053759135041181238702");
   strcat(x[3][6],"90743328543928367041870709181254903935082463026663");
   strcat(x[3][6],"78797719593633682454651703335380338567544717919434");
   strcat(x[3][6],"22653673248392456939195345403234274009037368484992");
   strcat(x[3][6],"98375319610582187859384514170568487091552266801013");
   strcat(x[3][6],"22129496886994243792189658442546672390003979313721");
   strcat(x[3][6],"50621376330024122134138025485394022681029369617764");
   strcat(x[3][6],"04190984455457042051777640216943389738358926324810");
   strcat(x[3][6],"20230246682253105279931577832379600389989429245582");
   strcat(x[3][6],"68196422007313773155858863734967579481066684965391");
   strcat(x[3][6],"17368346136250967091106042044752520779639289403423");
   strcat(x[3][6],"71835265118317930171907639085896925032111285645626");
   strcat(x[3][6],"19647252833663909382870703151503488518398077628825");
   strcat(x[3][6],"95789667663091312252336698505040349029979366036888");
   strcat(x[3][6],"74070907087428485524235623732559160365843830362657");
   strcat(x[3][6],"45380150817524556320768188392192779004990793063389");
   strcat(x[3][6],"16360508099383130087637853840392036573975208329370");
   strcat(x[3][6],"13360259293706230922648562608307881020545340389250");
   strcat(x[3][6],"28912053809181977076722329254103061856301596459261");
   strcat(x[3][6],"16960236661113566995260011864522421875748669647874");
   strcat(x[3][6],"44226498773231062980111128134643418654713838064098");
   strcat(x[3][6],"17363323429463037627520603931839007392104278555939");
   strcat(x[3][6],"76291462563341678848519906691612326891947676936654");
   strcat(x[3][6],"48569070644104927323508960102961763524008532256497");
   strcat(x[3][6],"85864825923643823393693175304614481721928460381455");
   strcat(x[3][6],"90728773466524988048873503222115699527802830223824");
   strcat(x[3][6],"74889025308219214228954816030771980215088316014439");
   strcat(x[3][6],"19185903780383308588186389208099366885700869755992");
   strcat(x[3][6],"62300811144666429327131360667779577890678792741758");
   strcat(x[3][6],"13935010256359253189963948489831195073302019267715");
   strcat(x[3][6],"96534027598907775822107934620913751165671726681304");
   strcat(x[3][6],"45857897041768494633696585326667665576390179404542");
   strcat(x[3][6],"30390687757321966455677648554868183631034056704000");
   strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][6],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][6],"0000000000000000000000000000000000000000");
   x[3][7]=(char *)malloc(9180);
   strcat(x[3][7],"29084744594278744626586535191794912907878559979447");
   strcat(x[3][7],"83337411106058974295838414991677820381042912946256");
   strcat(x[3][7],"99987854137029792125265704463867799770645310636494");
   strcat(x[3][7],"00507897985419506765774793101819559397765736758434");
   strcat(x[3][7],"44014582942748558404899910398719480499122182782924");
   strcat(x[3][7],"72306197299429976139186060146753129091378056419808");
   strcat(x[3][7],"64606546199772063795298561219741550221259145231097");
   strcat(x[3][7],"04380017634929489186403066265971802011664547360144");
   strcat(x[3][7],"00494411931230960646964451911460911282703229767013");
   strcat(x[3][7],"08860936907854018174780757300426705060444594521011");
   strcat(x[3][7],"66436386621082433653294835251581703943071713861066");
   strcat(x[3][7],"81369223874939366543353337235122013549540930220356");
   strcat(x[3][7],"94376574883112091730900366330138165545097099046356");
   strcat(x[3][7],"50003033838269074946358193519805889990839222867723");
   strcat(x[3][7],"20787234619401981715621193821377274956525593249019");
   strcat(x[3][7],"49738954687283290352647412389617637971737110549284");
   strcat(x[3][7],"04549256870675598737026270783427407891750755077771");
   strcat(x[3][7],"51610630986362989411726459550904972634314669755687");
   strcat(x[3][7],"83978213325872507206519200863974657985620598238140");
   strcat(x[3][7],"00833914336056356451779840033590536065684865838930");
   strcat(x[3][7],"56507614704513056679465488350970924251771215141102");
   strcat(x[3][7],"78710191796461628948821028258665048226162084218374");
   strcat(x[3][7],"33550272219751219610089527473291759408453782148150");
   strcat(x[3][7],"70021180052515179340276647236706369655448758954053");
   strcat(x[3][7],"49989843967290711033279906149530164303262483943910");
   strcat(x[3][7],"43495840866202936185326384655267013710382867769169");
   strcat(x[3][7],"84579084374487956972060727454593091977756463480872");
   strcat(x[3][7],"05125144278521646962486715945290022187679314712574");
   strcat(x[3][7],"86139086588489125710810687700730393489411378273122");
   strcat(x[3][7],"12769790409889703756125383030771571355247994698091");
   strcat(x[3][7],"52688908337200894651269411490479042183546038368784");
   strcat(x[3][7],"67326592399124469176555122749581216699408689244808");
   strcat(x[3][7],"55603789301277074585650177769547805033932617201633");
   strcat(x[3][7],"65676911647287841175950119773492996606703058815528");
   strcat(x[3][7],"81743413298885213726172915541604279352360958394418");
   strcat(x[3][7],"62549619632497806505374788170859727221311078190578");
   strcat(x[3][7],"39199599536709663020242538511454011729584773196136");
   strcat(x[3][7],"85227312924407379034063402507841279451961962111432");
   strcat(x[3][7],"47091853229177398192101560341940062676529251540592");
   strcat(x[3][7],"87183301011583577016406765369353836508368754381708");
   strcat(x[3][7],"24076731992504157942618979804083963598627647993681");
   strcat(x[3][7],"04463340182603608799527372267413981506328244909049");
   strcat(x[3][7],"31176827458750614179818176265927416574042085928340");
   strcat(x[3][7],"07386285328178943543432642517442734795128033214416");
   strcat(x[3][7],"33458768191949222446379250183942930053603310268974");
   strcat(x[3][7],"70722630285319505150902989831733764031194694802953");
   strcat(x[3][7],"41820915574109635405705999628957598945811391910167");
   strcat(x[3][7],"15838402654470253340580893540193429456175715300170");
   strcat(x[3][7],"03165186552247001379574629230566028013403417616728");
   strcat(x[3][7],"54416049044045441754968908051805017650349375583134");
   strcat(x[3][7],"20026912124936294010305706429774738269728035061259");
   strcat(x[3][7],"15857588920216616209047961171593372245442272332164");
   strcat(x[3][7],"44037971828579298144701929734729051408057528003427");
   strcat(x[3][7],"11398897484053426537729738272280603980379210874389");
   strcat(x[3][7],"93172866620784850079070954193771923282927527106947");
   strcat(x[3][7],"93695545975696722122385205054363173783630673651259");
   strcat(x[3][7],"37904132951108515648005428698332233028513026256199");
   strcat(x[3][7],"27099181232621975292771541564900333860737651060472");
   strcat(x[3][7],"54475947192092914298430615371553133190499140067824");
   strcat(x[3][7],"84850320065083985452492201697738480933221958670686");
   strcat(x[3][7],"45641908716455990652816153987202002977478467792487");
   strcat(x[3][7],"40509904409775798969009736912580598530725957637188");
   strcat(x[3][7],"63101068103325427334270779747843956523785628190197");
   strcat(x[3][7],"91141132631177403380194577172745833291586771358448");
   strcat(x[3][7],"21764844149973784116046444295083219049190024912335");
   strcat(x[3][7],"19008918480875472191313796768589391309140156129681");
   strcat(x[3][7],"47199681035606125325238988701069957737282940756224");
   strcat(x[3][7],"15652921110816184275667462155208605846490436753967");
   strcat(x[3][7],"68826434231896321635651210276381822482581130981099");
   strcat(x[3][7],"76545508463559797306439982706965257109959914625881");
   strcat(x[3][7],"89376709477152159083586091317992045525766057072107");
   strcat(x[3][7],"73628515348246925459060138913712434595724244412290");
   strcat(x[3][7],"96078340868433833678321640589074043313079627772555");
   strcat(x[3][7],"86731694997782517052155064065484988143916968789460");
   strcat(x[3][7],"78178681810074811490741302250648565456927305219532");
   strcat(x[3][7],"64594696649562425521764993596799561887048961140991");
   strcat(x[3][7],"93755606086901936126877750243789308464995582006223");
   strcat(x[3][7],"37223952943910345433252666393890356418281315704649");
   strcat(x[3][7],"34531961049366749553787906125078702758099723050494");
   strcat(x[3][7],"23831957940228413469759092884006639151607534810138");
   strcat(x[3][7],"05104787669044630471390750779608474906080045758259");
   strcat(x[3][7],"61652130630087784149923628280032340607536679852134");
   strcat(x[3][7],"11088487438094782572225787521879121409683704605251");
   strcat(x[3][7],"58920795423526394917270295741978669386922273515362");
   strcat(x[3][7],"09106800362055622398115154883871346466366581572947");
   strcat(x[3][7],"85457812619146614502629329179021067318170606261821");
   strcat(x[3][7],"79862651658342621472808454727287365709984192679061");
   strcat(x[3][7],"29064090439255251278814337596198025024663548865324");
   strcat(x[3][7],"23289961682696285485084604150669787824705718957346");
   strcat(x[3][7],"75658334891571011273493786461898079978935615279234");
   strcat(x[3][7],"39595005514731249244544391964197710626067115879473");
   strcat(x[3][7],"50653841941081739052378604530556437764455209877651");
   strcat(x[3][7],"14403973639460023882832062247078389987347809914987");
   strcat(x[3][7],"44777063363110850064162556648893586837728448270805");
   strcat(x[3][7],"51671208017298999618447374544541140027783201183680");
   strcat(x[3][7],"19275466238454277320736893130434432194890055702337");
   strcat(x[3][7],"01889703037418808204075091394375457879338890305166");
   strcat(x[3][7],"44682890853324480153107059134384642489064697551625");
   strcat(x[3][7],"80713392651399819521742274132007256541584483471728");
   strcat(x[3][7],"80206347637281163236540796950652255835360370982910");
   strcat(x[3][7],"73008794756196711327179143135271030750002279962724");
   strcat(x[3][7],"57402217679406834995168093170361733469194360112916");
   strcat(x[3][7],"09641309395917837972905190317771313273440185481628");
   strcat(x[3][7],"04917766636587156434523445047415247190115879357886");
   strcat(x[3][7],"94660018772310465629313460751003612712992607431313");
   strcat(x[3][7],"09759287653617509811513204963450171287927296741565");
   strcat(x[3][7],"83301234767495902249158048910482953371462271958198");
   strcat(x[3][7],"22777891994434890248369765962890816088515760262005");
   strcat(x[3][7],"09446517689240695826058092072112921316332730097390");
   strcat(x[3][7],"86343141225848063937331514059346919911050054607901");
   strcat(x[3][7],"72537669810446351214458694301474877909395968410325");
   strcat(x[3][7],"78504869539420572279546340858304263712782263204088");
   strcat(x[3][7],"47123921900952989288303473411546040040395467938985");
   strcat(x[3][7],"51206957808654888483439258888416137349085566533425");
   strcat(x[3][7],"33634456904845185183256417126735475598473730238643");
   strcat(x[3][7],"72144708352422215840834945519370048515396377078408");
   strcat(x[3][7],"77036406729415908468574474794009557517219196414539");
   strcat(x[3][7],"71677078919884849339521549816498868087673118266761");
   strcat(x[3][7],"47738037959218588982615812141746996328479921109650");
   strcat(x[3][7],"36707218070884075578449230952744112750765684762747");
   strcat(x[3][7],"56958538805965363899725740708865474470172769560827");
   strcat(x[3][7],"04301496568125390251346713712429545256134459081777");
   strcat(x[3][7],"25959779883327492716595745072036483313885817802111");
   strcat(x[3][7],"88857951575050133859037146158756510459092174100404");
   strcat(x[3][7],"04306678390374776338775920245699586261685868410939");
   strcat(x[3][7],"74369910476019486650367005474977278489567725827419");
   strcat(x[3][7],"49940153244206539164534549493460283855572910034405");
   strcat(x[3][7],"32174791028298440854962606006556052961566946794231");
   strcat(x[3][7],"06392707460563152836228625412710010372923259388706");
   strcat(x[3][7],"58504731786762214819830181319093882118051727410246");
   strcat(x[3][7],"99025509094212001777996313499387599980945105703449");
   strcat(x[3][7],"33249634056211782245056616886334509675225504535340");
   strcat(x[3][7],"68491040286765437877092994594440227775617769124999");
   strcat(x[3][7],"06498109454675717758290728595311903179544705540677");
   strcat(x[3][7],"32766032408033424157845463726255217303656120176545");
   strcat(x[3][7],"34570156331533251105837485855376704280173016087228");
   strcat(x[3][7],"08677169423292705409367277409418835005610061709634");
   strcat(x[3][7],"02285636683712421824957479238711499383813992240163");
   strcat(x[3][7],"33929772002261033270453129903856971426483870694689");
   strcat(x[3][7],"71072380880010370334802653189430384874337535880481");
   strcat(x[3][7],"88280700536471530642757197438128544945806820464487");
   strcat(x[3][7],"22512673175536313003903032416695500350707147461743");
   strcat(x[3][7],"73984869920595240683156586507594769021885695516963");
   strcat(x[3][7],"82663995344405755723901389096327728554365395768239");
   strcat(x[3][7],"99114945486860795120122247991861918124545706523472");
   strcat(x[3][7],"46878716384825656044095189289366343851923180582949");
   strcat(x[3][7],"99985264128545177612472397771798106122664201877235");
   strcat(x[3][7],"39611436527908773464819624807300647489160425995729");
   strcat(x[3][7],"31092098805185953956791169540740673830200568070369");
   strcat(x[3][7],"32826582892759524694642064573382618319447447741139");
   strcat(x[3][7],"46015295352603330879497912762301092623354786013950");
   strcat(x[3][7],"91158344670521231728178833660483470586738232262202");
   strcat(x[3][7],"74583349786210788048334699704888162353770949048891");
   strcat(x[3][7],"38428920697574501988991190475141103574163566938409");
   strcat(x[3][7],"19299291740364470023490557926921631648228360624449");
   strcat(x[3][7],"82069074707875744579094328859602990290741555160257");
   strcat(x[3][7],"90299668899031400911412360777583361415958278051930");
   strcat(x[3][7],"01114054913969432586459698510330056482728388015165");
   strcat(x[3][7],"46922452310564514735456554804496711835424511833560");
   strcat(x[3][7],"20259286069334765566388572997663612943486744300299");
   strcat(x[3][7],"75825029986179982453790007327183825574210472938220");
   strcat(x[3][7],"98006070316402087444113570350362093173779802443850");
   strcat(x[3][7],"18024027120657093000830291675662883059300895263657");
   strcat(x[3][7],"71038593060924517145696272084216197991940363593814");
   strcat(x[3][7],"31235964223024642546161624324804686145271744374979");
   strcat(x[3][7],"31170216554509317756797194916356233837230530540052");
   strcat(x[3][7],"95662443740495327370372044519255985879948212726604");
   strcat(x[3][7],"24754204855387064992709905299500684050772415743702");
   strcat(x[3][7],"66730611906033998354736689497945499343257600000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000000000000000000000000");
   strcat(x[3][7],"00000000000000000000000000000");
   x[4][1]=(char *)malloc(3);
   strcat(x[4][1],"24");
   x[4][2]=(char *)malloc(17);
   strcat(x[4][2],"3892643213082624");
   x[4][3]=(char *)malloc(112);
   strcat(x[4][3],"11168291064879088019193230412527305191273783337969");
   strcat(x[4][3],"20805568773780360323955699188899726020489099078167");
   strcat(x[4][3],"71223552000");
   x[4][4]=(char *)malloc(643);
   strcat(x[4][4],"12600247869431333152293478431507503520441942212374");
   strcat(x[4][4],"38310887393979180719705785341207922651742676629688");
   strcat(x[4][4],"16665985072986350032680041952388930581681236745288");
   strcat(x[4][4],"69221370133298786933455585379974211881374132806721");
   strcat(x[4][4],"79418968891373401910462224354361905712940056625677");
   strcat(x[4][4],"51881931674187595011884573538361918450162098698787");
   strcat(x[4][4],"03544307721805061472561198652614931052530585010235");
   strcat(x[4][4],"35830116917938112983260261606626216542577309415763");
   strcat(x[4][4],"54721156040229380151095630710994246186162851462182");
   strcat(x[4][4],"31644581598227575182552914440402407875796095712300");
   strcat(x[4][4],"22074254021043700761268827954980045863976441605861");
   strcat(x[4][4],"84269460455125239887387649139565707651239614190689");
   strcat(x[4][4],"453392613705507277327302656000000000000000");
   x[4][5]=(char *)malloc(3382);
   strcat(x[4][5],"82333229941175479592513220450269545846383281777597");
   strcat(x[4][5],"54408653219751679364539512357340150146166134496207");
   strcat(x[4][5],"40713939182041883759025986920373965767514222325920");
   strcat(x[4][5],"90898741194021083131667829936802120287504042873003");
   strcat(x[4][5],"19767740469835310084277229164113319195107247737593");
   strcat(x[4][5],"80096741279835134057131573865701518431005162199875");
   strcat(x[4][5],"21948543574237663507439544604750926599458612768709");
   strcat(x[4][5],"75146865640090887862815742330261740699811967797405");
   strcat(x[4][5],"64187595655418705302755363849458416961038387428062");
   strcat(x[4][5],"59272650714083200746588880715409958294656296585179");
   strcat(x[4][5],"58054036884768578494243329622148828303361328982969");
   strcat(x[4][5],"01081306595343013724080907257217039929917558256973");
   strcat(x[4][5],"73643004960731801014672120021460738535471471003372");
   strcat(x[4][5],"09159396208568750239878596423129254320237785398937");
   strcat(x[4][5],"41977562315853237358988644262837860185367074823769");
   strcat(x[4][5],"65069038376601800667085094094952668040766801244552");
   strcat(x[4][5],"70929023547546263825164872378441679962452928654723");
   strcat(x[4][5],"14619732890539797639556974902176454310829844839448");
   strcat(x[4][5],"56182503756133324079293290504000063666570643647922");
   strcat(x[4][5],"12763720809392837747637500029933705366725575926330");
   strcat(x[4][5],"85704903566618380584072103425482345229369898678385");
   strcat(x[4][5],"95206039912500224124323893224610230340073318024789");
   strcat(x[4][5],"32095400878180363696526781113928151223861325671939");
   strcat(x[4][5],"51533690230600885096941855601753119007234173391289");
   strcat(x[4][5],"08608520608128314122853542676450098850274645696890");
   strcat(x[4][5],"54546359183797135037951792145823157699873685656264");
   strcat(x[4][5],"39184131701652078122613187408743830585727154639121");
   strcat(x[4][5],"63735557494204122193531601606154591658100237266594");
   strcat(x[4][5],"14056424519263326131245812261047278135744850195944");
   strcat(x[4][5],"76556352770449692122147271124819689590273692013537");
   strcat(x[4][5],"88844810821102826784305345752919163864020398254123");
   strcat(x[4][5],"14591463304437000915280868138102132883267506115563");
   strcat(x[4][5],"70304279857854926608558956269493995132023833713432");
   strcat(x[4][5],"41059016330107027447693592487330261289954703988443");
   strcat(x[4][5],"42243941431156472059267543144668523875651825807414");
   strcat(x[4][5],"30907771209850367333717095874323787518626511813651");
   strcat(x[4][5],"04937090135545814069800634260819256676961369744466");
   strcat(x[4][5],"67408003412890364043867431117083173717842494563807");
   strcat(x[4][5],"50781292319634413091406366182267269591077299944779");
   strcat(x[4][5],"88383885920155855045873327389846579366233021888559");
   strcat(x[4][5],"35677377537386034385082467967344250531962240565653");
   strcat(x[4][5],"63069071582814225012922599916225485288305398882426");
   strcat(x[4][5],"13191087620560183099553620422524808857818046345281");
   strcat(x[4][5],"69007782427194290289238268341088148907298693745907");
   strcat(x[4][5],"80611722229592596282817149189185720849340998078599");
   strcat(x[4][5],"99207031599241636695290715975493231329247071628603");
   strcat(x[4][5],"64842232601686745358989424491222694585077872806688");
   strcat(x[4][5],"93139549242249017696972400120518200904851889420578");
   strcat(x[4][5],"54646605994572605758585175633567356486647728295491");
   strcat(x[4][5],"94467897341072028550226345056926010023354958059968");
   strcat(x[4][5],"82929937633084189749483437477736423235049093932903");
   strcat(x[4][5],"35712248236462208366887752345044010834938331089205");
   strcat(x[4][5],"22056335788635298601759064099339832342761409773809");
   strcat(x[4][5],"94419607536840693277006196028489206723370532878994");
   strcat(x[4][5],"12391881296712081990114300552393471266822608679385");
   strcat(x[4][5],"79955813808155194089541837224303817579764017188422");
   strcat(x[4][5],"86818129290142967769840464584256180919693607431855");
   strcat(x[4][5],"35612628573130415538752549946312529347444253565312");
   strcat(x[4][5],"37289741446271770437497168049004242307658111031646");
   strcat(x[4][5],"00707814164626138602404807405090303027650835356705");
   strcat(x[4][5],"06473538275569077826804446491991732104369612344040");
   strcat(x[4][5],"26120837789034443050927771681428953869579606881537");
   strcat(x[4][5],"03189121238250803872045323684952540492285999331137");
   strcat(x[4][5],"29655484721622015871216150515094773524141939885369");
   strcat(x[4][5],"27340264805458665881430414483247801954500710669673");
   strcat(x[4][5],"51700351428657546526174427276532214567310171665427");
   strcat(x[4][5],"72558028708249600000000000000000000000000000000000");
   strcat(x[4][5],"0000000000000000000000000000000");
   x[5][1]=(char *)malloc(4);
   strcat(x[5][1],"120");
   x[5][2]=(char *)malloc(30);
   strcat(x[5][2],"34111736086958726676480000000");
   x[5][3]=(char *)malloc(248);
   strcat(x[5][3],"58839377205941583103463182799954414201366511570384");
   strcat(x[5][3],"56422426741369195154553196178926207720498703908961");
   strcat(x[5][3],"85636867054656326437951964198803561336543381312801");
   strcat(x[5][3],"24615088422683225187435613410128564671858725029474");
   strcat(x[5][3],"67126374400000000000000000000000000000000000000");
   x[5][4]=(char *)malloc(1775);
   strcat(x[5][4],"25745789432438429906884778240545059461396921014943");
   strcat(x[5][4],"33340284031300973098266683062996213179748610326429");
   strcat(x[5][4],"34187864360989415653217268257852830142760812892903");
   strcat(x[5][4],"53318969112850899660706457960908009433762180285705");
   strcat(x[5][4],"58075844884454537552370318212998548749276488835748");
   strcat(x[5][4],"81010890919754894799814839485168732900641905469482");
   strcat(x[5][4],"57570660508491662207662262214338971159964562991874");
   strcat(x[5][4],"46049443095583839453116059305461245705945545910863");
   strcat(x[5][4],"17635774942204633941803626300180317018867620589284");
   strcat(x[5][4],"41857941900207006264171506070916761515179083589078");
   strcat(x[5][4],"64850625419135144200512892484689522013441516135409");
   strcat(x[5][4],"26245389949971968850519430713047057564344522268073");
   strcat(x[5][4],"36931408133973545701696491882968121661208794361621");
   strcat(x[5][4],"01803832209397408208509503576799619609183681572993");
   strcat(x[5][4],"02068534906402486026262672062053338940763733657824");
   strcat(x[5][4],"91487421742107185258312204043725752138014516231693");
   strcat(x[5][4],"65144788021763768817146895479160376897401288403856");
   strcat(x[5][4],"14451780724259395819927655094838959617331271576004");
   strcat(x[5][4],"73451716455726393530131249809702391882969607246160");
   strcat(x[5][4],"41607520918343157652358489409077596424345689112755");
   strcat(x[5][4],"67358420981303154154358494815718240443111020677376");
   strcat(x[5][4],"17961938516517689305612752287388461170548998933756");
   strcat(x[5][4],"40844294697926001821037273894706897109827314588486");
   strcat(x[5][4],"48066717896542298837505469316187352817821412410797");
   strcat(x[5][4],"43628319961659290477923338408552035794651732602830");
   strcat(x[5][4],"85762172120099585805612965352921974545818452966364");
   strcat(x[5][4],"47268199107086496115658190322615675661281048845811");
   strcat(x[5][4],"72645662523607027752013809883315685616536886149306");
   strcat(x[5][4],"74679128957275993072955820963093617242778834180640");
   strcat(x[5][4],"37815148918806105569042656626023312200159009818614");
   strcat(x[5][4],"50500960444377476538990957265369093534301316515238");
   strcat(x[5][4],"38222443153546129621565990502400000000000000000000");
   strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
   strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
   strcat(x[5][4],"00000000000000000000000000000000000000000000000000");
   strcat(x[5][4],"000000000000000000000000");
   x[6][1]=(char *)malloc(4);
   strcat(x[6][1],"720");
   x[6][2]=(char *)malloc(48);
   strcat(x[6][2],"11942354952042770431904585727413846016000000000");
   x[6][3]=(char *)malloc(473);
   strcat(x[6][3],"33931862351641030265591470340890318858338627001624");
   strcat(x[6][3],"01431094466910725815103355576409849458625111467673");
   strcat(x[6][3],"96317149016685722183509838509699391647268610699451");
   strcat(x[6][3],"35792871248131865909483478283615610890667818394712");
   strcat(x[6][3],"85337327697532413160274492651868920958018558519594");
   strcat(x[6][3],"86013117961671607922946860314049604433058145696020");
   strcat(x[6][3],"03551054096114513298064699429853494106675181505118");
   strcat(x[6][3],"59718736808929262155050122065629321268595555967855");
   strcat(x[6][3],"84334438400000000000000000000000000000000000000000");
   strcat(x[6][3],"0000000000000000000000");
   x[7][1]=(char *)malloc(5);
   strcat(x[7][1],"5040");
   x[7][2]=(char *)malloc(70);
   strcat(x[7][2],"33903054609530613510801584599672553526711367553766");
   strcat(x[7][2],"6539520000000000000");
   x[7][3]=(char *)malloc(811);
   strcat(x[7][3],"45900861217119383737917588570564661646981101072388");
   strcat(x[7][3],"61060298853858863187587242643460891828903877389142");
   strcat(x[7][3],"26187622773216840453787827596432869775253811869965");
   strcat(x[7][3],"55795424310461872647575848445980763505549081547848");
   strcat(x[7][3],"16513558745289225234038737331302443675608594813756");
   strcat(x[7][3],"20301079868769283552722539583238135272835521240747");
   strcat(x[7][3],"28235139807533616785514319765369533947270567404310");
   strcat(x[7][3],"65716265315159321859392496035501905197130812759096");
   strcat(x[7][3],"80281878034146978338709100091586806154099944838550");
   strcat(x[7][3],"00401464978298261480095876358667319712928622730099");
   strcat(x[7][3],"59584239907659544129936368821719989949149056862379");
   strcat(x[7][3],"92062170189486126721025725020359267567249198930141");
   strcat(x[7][3],"38642722187004874943783417656102762239793053691250");
   strcat(x[7][3],"89982551970234408160261213807850061296143794201139");
   strcat(x[7][3],"89979214970880000000000000000000000000000000000000");
   strcat(x[7][3],"00000000000000000000000000000000000000000000000000");
   strcat(x[7][3],"0000000000");
   x[8][1]=(char *)malloc(6);
   strcat(x[8][1],"40320");
   x[8][2]=(char *)malloc(98);
   strcat(x[8][2],"14225115631196644887661494678136964890026836604975");
   strcat(x[8][2],"63309963214502771962235804712960000000000000000");
   x[9][1]=(char *)malloc(7);
   strcat(x[9][1],"362880");
   x[9][2]=(char *)malloc(131);
   strcat(x[9][2],"14857159644817614973095227336208257378855699612846");
   strcat(x[9][2],"88766942216863704985393094065876545992131370884059");
   strcat(x[9][2],"645617234469978112000000000000");
   x[10][1]=(char *)malloc(8);
   strcat(x[10][1],"3628800");
   x[10][2]=(char *)malloc(169);
   strcat(x[10][2],"61233741050046626424711560849582796524943275475484");
   strcat(x[10][2],"68035961789943805133285502705500842088069697355270");
   strcat(x[10][2],"00221453969564832440571463528528225710899200000000");
   strcat(x[10][2],"000000000000000000");
   x[11][1]=(char *)malloc(9);
   strcat(x[11][1],"39916800");
   x[12][1]=(char *)malloc(10);
   strcat(x[12][1],"479001600");
   x[13][1]=(char *)malloc(11);
   strcat(x[13][1],"6227020800");
   x[14][1]=(char *)malloc(12);
   strcat(x[14][1],"87178291200");
   x[15][1]=(char *)malloc(14);
   strcat(x[15][1],"1307674368000");
   x[16][1]=(char *)malloc(15);
   strcat(x[16][1],"20922789888000");
   x[17][1]=(char *)malloc(16);
   strcat(x[17][1],"355687428096000");
   x[18][1]=(char *)malloc(17);
   strcat(x[18][1],"6402373705728000");
   x[19][1]=(char *)malloc(19);
   strcat(x[19][1],"121645100408832000");
   x[20][1]=(char *)malloc(20);
   strcat(x[20][1],"2432902008176640000");
   x[21][1]=(char *)malloc(21);
   strcat(x[21][1],"51090942171709440000");
   while (2 == scanf("%d%d",&k,&d)) {
      if (k < 1 || d < 1 || k*d > 21) *(char *)0 = 0;
      printf("%s\n",x[k][d]);
   } 
}
END JCN CODEBASE
100
BEGIN TDP CODEBASE
xyzzabczzyy
END TDP CODEBASE
BEGIN JCN CODEBASE
xyzzy
END JCN CODEBASE
100
BEGIN TDP CODEBASE
xyzzy
END TDP CODEBASE
BEGIN JCN CODEBASE
xyzzabczzyy
END JCN CODEBASE
7
BEGIN TDP CODEBASE
#include <stdio.h>
#include <string.h>

char buf[101000], cb[202000];
char *cb1, *cb1end, *cb2, *cb2end;
char *c[202000];
int len[202000];
int p[202000];

int i,j,k,C,K,KK,n1,n2,n;

int comp(char **a, char **b) {
   return strcmp(*a,*b);
}

int compi(int *a, int *b) {
   if (len[*a] != len[*b]) return len[*b] - len[*a];
   return strcmp(cb+*a,cb+*b);
}

main(){
   while (scanf("%d ",&K) && K) {
      if (C) printf("\n");
      printf("CASE %d\n",++C);
      memset(len,0,sizeof(len));
      gets(buf);  // start codebase
      cb1 = cb1end = cb;
      cb2 = cb2end = cb+101000;
      while (gets(buf) && strcmp(buf,"END TDP CODEBASE")) {
         strcpy(cb1end,buf);
         cb1end += strlen(buf);
         strcpy(cb1end++,"\n");
      }
      n1 = cb1end - cb1 + 1;
      gets(buf); // start codebase
      while (gets(buf) && strcmp(buf,"END JCN CODEBASE")) {
         strcpy(cb2end,buf);
         cb2end += strlen(buf);
         strcpy(cb2end++,"\n");
      }
      strcpy(cb2end+1,"2");
      n2 = cb2end - cb2 + 1;
      n = n1 + n2;
      for (i=0;i<n1;i++) c[i] = cb1+i;
      for (i=0;i<n2;i++) c[n1+i] = cb2+i;
      qsort(c,n,sizeof(char *),comp);

      for (i=0;i<n;i++) len[i] = 0;
      for (i=0;i+1<n;i++) {
         if ((c[i]<=cb1end) == (c[i+1]<=cb1end)) continue;
         for (j=0;c[i][j] == c[i+1][j] && c[i][j];j++);
         if (j > len[c[i]-cb]) len[c[i]-cb] = j;
         if (j > len[c[i+1]-cb]) len[c[i+1]-cb] = j;
      }
      for (i=n2-2;i>=0;i--) 
         if (len[101000+i] == len[101000+i+1]+1) len[101000+i+1] = 0;
      j = 0;
      for (i=0;i<n2;i++) {
         if (len[101000+i]) p[j++] = 101000+i;
      }
      qsort(p,j,sizeof(int),compi);
      KK = 1;
      for (i=0;i<j && KK <= K;i++) {
         printf("INFRINGING SEGMENT %d LENGTH %d POSITION %d\n",
             KK++,len[p[i]],p[i]-101000);
         for (k=0;k<len[p[i]];k++) printf("%c",(cb+p[i])[k]);
         printf("\n");
      }
   }
}
END TDP CODEBASE
BEGIN JCN CODEBASE
#include <math.h>
#include <stdio.h>

double Pl, Pr, C[1100], c;  // C[m] is cost to build m in a row

int i,l,k,m,n,r;

main(){
   while (3 == scanf("%d%lf%lf",&n,&Pl,&Pr)) {
      if (Pl+Pr == 0) {
         printf("%d.00\n",n);
         continue;
      }
      C[0] = 0;
      for (i=1;i<=n;i++) C[i] = 1e19;
      for (m=1;m<=n;m++) { 
         for (l=0;l<m;l++) {   // l dominoes on the left
            r = m-l-1;
            c = 1 + C[l] + C[r] + 
                (1/(1-Pr-Pl)-1) * (1+ Pl/(Pr+Pl)*C[l] + Pr/(Pr+Pl)*C[r]);
            if (c < C[m]) C[m] = c;
         }
      }
      printf("%0.2lf\n",C[n]);
   }
}
END JCN CODEBASE
5
BEGIN TDP CODEBASE
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
END TDP CODEBASE
BEGIN JCN CODEBASE
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
END JCN CODEBASE
0
]]></test_input>
<test_output><![CDATA[CASE 1
INFRINGING SEGMENT 1 LENGTH 115 POSITION 60
 JCN CODEBASE
END TDP CODEBASE not
not END TDP CODEBASE
END JCN CODEBASE not
not END JCN CODEBASE
end bogus stuff


INFRINGING SEGMENT 2 LENGTH 38 POSITION 0

begin bogus stuff
BEGIN TDP CODEBASE

INFRINGING SEGMENT 3 LENGTH 37 POSITION 41
 TDP CODEBASE
BEGIN JCN CODEBASE
END 
INFRINGING SEGMENT 4 LENGTH 26 POSITION 28
 CODEBASE
END TDP CODEBASE
INFRINGING SEGMENT 5 LENGTH 18 POSITION 24
 TDP CODEBASE
END 
INFRINGING SEGMENT 6 LENGTH 17 POSITION 38
END TDP CODEBASE


CASE 2
INFRINGING SEGMENT 1 LENGTH 6 POSITION 0
abcdef
INFRINGING SEGMENT 2 LENGTH 6 POSITION 2
cdefg


CASE 3
INFRINGING SEGMENT 1 LENGTH 12 POSITION 64
.
so there!

INFRINGING SEGMENT 2 LENGTH 5 POSITION 6
 the 
INFRINGING SEGMENT 3 LENGTH 5 POSITION 42
o the
INFRINGING SEGMENT 4 LENGTH 5 POSITION 43
 the 
INFRINGING SEGMENT 5 LENGTH 5 POSITION 54
 the 

CASE 4
INFRINGING SEGMENT 1 LENGTH 71 POSITION 7331
strcat(x[2][10],"43395481677793492582976150229527319481832931952928");

INFRINGING SEGMENT 2 LENGTH 71 POSITION 7405
strcat(x[2][10],"72246578846629686439813370511761987529308089114913");

INFRINGING SEGMENT 3 LENGTH 71 POSITION 7479
strcat(x[2][10],"98651413502336525549687910729419315235399982721322");

INFRINGING SEGMENT 4 LENGTH 71 POSITION 7553
strcat(x[2][10],"10599726592738666739902358903206398902335237423709");

INFRINGING SEGMENT 5 LENGTH 71 POSITION 7627
strcat(x[2][10],"43970869199907453881436847191974692119559255106859");

INFRINGING SEGMENT 6 LENGTH 71 POSITION 7701
strcat(x[2][10],"45084926368871498088965120619200900235748928011954");

INFRINGING SEGMENT 7 LENGTH 71 POSITION 7775
strcat(x[2][10],"56766952541251449677528149969040542534059142975555");

INFRINGING SEGMENT 8 LENGTH 71 POSITION 7849
strcat(x[2][10],"84083354352053089761755889057593977800321857617423");

INFRINGING SEGMENT 9 LENGTH 71 POSITION 7923
strcat(x[2][10],"05901189406677707017663819454129695904200945953631");

INFRINGING SEGMENT 10 LENGTH 71 POSITION 7997
strcat(x[2][10],"45267215277680540060098912471967655263720054015867");

INFRINGING SEGMENT 11 LENGTH 71 POSITION 8071
strcat(x[2][10],"24871122542563702181185089918634657057213017524368");

INFRINGING SEGMENT 12 LENGTH 71 POSITION 8145
strcat(x[2][10],"79404660788807280409477424154829999415511547858494");

INFRINGING SEGMENT 13 LENGTH 71 POSITION 8219
strcat(x[2][10],"97845372994352885496747249725359463130436168765654");

INFRINGING SEGMENT 14 LENGTH 71 POSITION 8293
strcat(x[2][10],"36802679226184045437833398236963161613176885097650");

INFRINGING SEGMENT 15 LENGTH 71 POSITION 8367
strcat(x[2][10],"50007078975559638104773062938810982671445762108655");

INFRINGING SEGMENT 16 LENGTH 71 POSITION 8441
strcat(x[2][10],"73147775618459421133208399357517632935860979586441");

INFRINGING SEGMENT 17 LENGTH 71 POSITION 8515
strcat(x[2][10],"44029919456933848938419576540200901529120070158762");

INFRINGING SEGMENT 18 LENGTH 71 POSITION 8589
strcat(x[2][10],"36804867749000834473815632726893846945078630233140");

INFRINGING SEGMENT 19 LENGTH 71 POSITION 8663
strcat(x[2][10],"78602857426771749237140009948136106406822585691220");

INFRINGING SEGMENT 20 LENGTH 71 POSITION 8737
strcat(x[2][10],"59404275627465008963940117969554012879498503245723");

INFRINGING SEGMENT 21 LENGTH 71 POSITION 8811
strcat(x[2][10],"23181780904298821660584951671688788263228011142555");

INFRINGING SEGMENT 22 LENGTH 71 POSITION 8885
strcat(x[2][10],"19442941831620135121439649859927067349329009807437");

INFRINGING SEGMENT 23 LENGTH 71 POSITION 8959
strcat(x[2][10],"42237851436644302475299020730680316510595661646549");

INFRINGING SEGMENT 24 LENGTH 71 POSITION 9033
strcat(x[2][10],"73736764260369842937718218103477964074028442516526");

INFRINGING SEGMENT 25 LENGTH 71 POSITION 9107
strcat(x[2][10],"79407470248973183975103327250643727071040613051019");

INFRINGING SEGMENT 26 LENGTH 71 POSITION 9181
strcat(x[2][10],"85311706569916046937297966951231145445998002737083");

INFRINGING SEGMENT 27 LENGTH 71 POSITION 9255
strcat(x[2][10],"07019435395542538090983350523750933844488681503445");

INFRINGING SEGMENT 28 LENGTH 71 POSITION 9329
strcat(x[2][10],"32656834219294496474752306942492740941995107586755");

INFRINGING SEGMENT 29 LENGTH 71 POSITION 9403
strcat(x[2][10],"37533936782935894941923646803024329100050921315909");

INFRINGING SEGMENT 30 LENGTH 71 POSITION 9477
strcat(x[2][10],"78769675435589015155518345241676177652558761553905");

INFRINGING SEGMENT 31 LENGTH 71 POSITION 9551
strcat(x[2][10],"82280954703402326313856564108866582741560748728643");

INFRINGING SEGMENT 32 LENGTH 71 POSITION 9625
strcat(x[2][10],"90513642281875460231493210062902079993707975130435");

INFRINGING SEGMENT 33 LENGTH 71 POSITION 9699
strcat(x[2][10],"36996741800878194299311215563317541601985619440938");

INFRINGING SEGMENT 34 LENGTH 71 POSITION 9773
strcat(x[2][10],"98676095235074221399605516684660692475054670100364");

INFRINGING SEGMENT 35 LENGTH 71 POSITION 9847
strcat(x[2][10],"32521333323396228317916108143118534395174534691912");

INFRINGING SEGMENT 36 LENGTH 71 POSITION 9921
strcat(x[2][10],"64072856649785396040845854010580392344958748019083");

INFRINGING SEGMENT 37 LENGTH 71 POSITION 9995
strcat(x[2][10],"19080765762582587186999277673944148980676851473602");

INFRINGING SEGMENT 38 LENGTH 71 POSITION 10069
strcat(x[2][10],"33810438454532391030724586251935445580769758133011");

INFRINGING SEGMENT 39 LENGTH 71 POSITION 10143
strcat(x[2][10],"08241097955049112912596530739657026723578873536392");

INFRINGING SEGMENT 40 LENGTH 71 POSITION 10217
strcat(x[2][10],"15893646295031806485283796124033701940495796213688");

INFRINGING SEGMENT 41 LENGTH 71 POSITION 10291
strcat(x[2][10],"05062687217365069967192714069701104294037590987988");

INFRINGING SEGMENT 42 LENGTH 71 POSITION 10365
strcat(x[2][10],"42923936155448192138042526384346067762978881427944");

INFRINGING SEGMENT 43 LENGTH 71 POSITION 10439
strcat(x[2][10],"51018817030008563992824661451541951878179616852123");

INFRINGING SEGMENT 44 LENGTH 71 POSITION 10513
strcat(x[2][10],"65442289690745026060690608698079277981901650583555");

INFRINGING SEGMENT 45 LENGTH 71 POSITION 10587
strcat(x[2][10],"34634529948224509924085130577497662937820227078841");

INFRINGING SEGMENT 46 LENGTH 71 POSITION 10661
strcat(x[2][10],"89120535441785925182678638906095332841512912594396");

INFRINGING SEGMENT 47 LENGTH 71 POSITION 10735
strcat(x[2][10],"22674664501019959958435009112526927614601680781778");

INFRINGING SEGMENT 48 LENGTH 71 POSITION 10809
strcat(x[2][10],"19902187264813942429947930069627563380622187909866");

INFRINGING SEGMENT 49 LENGTH 71 POSITION 10883
strcat(x[2][10],"69160954537444098551800583966836365385338042397024");

INFRINGING SEGMENT 50 LENGTH 71 POSITION 10957
strcat(x[2][10],"12142234899760256134313510057923807863499487847863");

INFRINGING SEGMENT 51 LENGTH 71 POSITION 11031
strcat(x[2][10],"23864799417878080124777311820652465607616428351585");

INFRINGING SEGMENT 52 LENGTH 71 POSITION 11105
strcat(x[2][10],"10437958800461270609454630427795041186387062799944");

INFRINGING SEGMENT 53 LENGTH 71 POSITION 11179
strcat(x[2][10],"86288155125527235987665003584628526504391651814308");

INFRINGING SEGMENT 54 LENGTH 71 POSITION 11253
strcat(x[2][10],"03788754363189170406273616526022870590693868570870");

INFRINGING SEGMENT 55 LENGTH 71 POSITION 11327
strcat(x[2][10],"00635709898770405145778674967210667106195984482974");

INFRINGING SEGMENT 56 LENGTH 71 POSITION 11401
strcat(x[2][10],"05347550750706205973906168833790363175985190440004");

INFRINGING SEGMENT 57 LENGTH 71 POSITION 11475
strcat(x[2][10],"07921806520365689534500077549550057980687587610639");

INFRINGING SEGMENT 58 LENGTH 71 POSITION 11549
strcat(x[2][10],"45291826476007950012642072390719467853203574575191");

INFRINGING SEGMENT 59 LENGTH 71 POSITION 11623
strcat(x[2][10],"42658995179867804017175049872492956843823669933395");

INFRINGING SEGMENT 60 LENGTH 71 POSITION 11697
strcat(x[2][10],"36021987124581460710261031300825809044695803465324");

INFRINGING SEGMENT 61 LENGTH 71 POSITION 11771
strcat(x[2][10],"59240257330476731928142317037571678006588842269130");

INFRINGING SEGMENT 62 LENGTH 71 POSITION 11845
strcat(x[2][10],"86523139259130072741725988069970929274893193846831");

INFRINGING SEGMENT 63 LENGTH 71 POSITION 11919
strcat(x[2][10],"45965629295411258498624696522023099016822858645678");

INFRINGING SEGMENT 64 LENGTH 71 POSITION 11993
strcat(x[2][10],"15766081625261511031208304943218521550329043966692");

INFRINGING SEGMENT 65 LENGTH 71 POSITION 12067
strcat(x[2][10],"42962375173472154633552934317579735394419175458149");

INFRINGING SEGMENT 66 LENGTH 71 POSITION 12141
strcat(x[2][10],"36665950840759331681441767743028019202652557990846");

INFRINGING SEGMENT 67 LENGTH 71 POSITION 12215
strcat(x[2][10],"62244559399420898330051327302051882869871141759928");

INFRINGING SEGMENT 68 LENGTH 71 POSITION 12289
strcat(x[2][10],"16268476892028417219731756203648854241226081628198");

INFRINGING SEGMENT 69 LENGTH 71 POSITION 12363
strcat(x[2][10],"43271107862968456058057157708577915003351121052351");

INFRINGING SEGMENT 70 LENGTH 71 POSITION 12437
strcat(x[2][10],"41431239552868824615839718953287557534005828616833");

INFRINGING SEGMENT 71 LENGTH 71 POSITION 12511
strcat(x[2][10],"08513850085055293061630830914293606124655464158921");

INFRINGING SEGMENT 72 LENGTH 71 POSITION 12585
strcat(x[2][10],"46698213386284720877315715604105304880563432974930");

INFRINGING SEGMENT 73 LENGTH 71 POSITION 12659
strcat(x[2][10],"05435477214071932831391615228717056400926140440145");

INFRINGING SEGMENT 74 LENGTH 71 POSITION 12733
strcat(x[2][10],"44854745730142284757181159506520358158554714200328");

INFRINGING SEGMENT 75 LENGTH 71 POSITION 12807
strcat(x[2][10],"67366750183006958184351825202792869816923281209152");

INFRINGING SEGMENT 76 LENGTH 71 POSITION 12881
strcat(x[2][10],"76479363125838298818791548888458125808667808828051");

INFRINGING SEGMENT 77 LENGTH 71 POSITION 12955
strcat(x[2][10],"75542957090789146997369927321558024636308418822929");

INFRINGING SEGMENT 78 LENGTH 71 POSITION 13029
strcat(x[2][10],"95492455960815307672092056264011794399976842471606");

INFRINGING SEGMENT 79 LENGTH 71 POSITION 13103
strcat(x[2][10],"23504184893226651975997324686189010475216915129079");

INFRINGING SEGMENT 80 LENGTH 71 POSITION 13177
strcat(x[2][10],"80411742586237613602933821618544452972569303634819");

INFRINGING SEGMENT 81 LENGTH 71 POSITION 13251
strcat(x[2][10],"34026031492321214860066592225920336194360524514290");

INFRINGING SEGMENT 82 LENGTH 71 POSITION 13325
strcat(x[2][10],"81209768734690402718770678018987679630327849110731");

INFRINGING SEGMENT 83 LENGTH 71 POSITION 13399
strcat(x[2][10],"49931510250052158759386224082154374695306658996261");

INFRINGING SEGMENT 84 LENGTH 71 POSITION 13473
strcat(x[2][10],"87898293151151509429257410678730571863668911533177");

INFRINGING SEGMENT 85 LENGTH 71 POSITION 13547
strcat(x[2][10],"60870258201709329118485542376826780296468386345130");

INFRINGING SEGMENT 86 LENGTH 71 POSITION 13621
strcat(x[2][10],"80894898210961708330412666869204733463603861223963");

INFRINGING SEGMENT 87 LENGTH 71 POSITION 13695
strcat(x[2][10],"37472769832384792572597689932146314340328103679737");

INFRINGING SEGMENT 88 LENGTH 71 POSITION 13769
strcat(x[2][10],"59499603119867320572199598009185738441240683325602");

INFRINGING SEGMENT 89 LENGTH 71 POSITION 13843
strcat(x[2][10],"53201560879727526239152789300838626688267672354349");

INFRINGING SEGMENT 90 LENGTH 71 POSITION 13917
strcat(x[2][10],"79543754454879996203596583204795576251386668634612");

INFRINGING SEGMENT 91 LENGTH 71 POSITION 13991
strcat(x[2][10],"73073040093338095781255661417565017087240907890528");

INFRINGING SEGMENT 92 LENGTH 71 POSITION 14065
strcat(x[2][10],"38731935291592823167392538308174801298426002695642");

INFRINGING SEGMENT 93 LENGTH 71 POSITION 14139
strcat(x[2][10],"36970505117337567387071265674932948313799563321476");

INFRINGING SEGMENT 94 LENGTH 71 POSITION 14213
strcat(x[2][10],"97474487450458861348252779806720000000000000000000");

INFRINGING SEGMENT 95 LENGTH 71 POSITION 14287
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");

INFRINGING SEGMENT 96 LENGTH 71 POSITION 14361
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");

INFRINGING SEGMENT 97 LENGTH 71 POSITION 14435
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");

INFRINGING SEGMENT 98 LENGTH 71 POSITION 14509
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");

INFRINGING SEGMENT 99 LENGTH 71 POSITION 14583
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");

INFRINGING SEGMENT 100 LENGTH 71 POSITION 14657
strcat(x[2][10],"00000000000000000000000000000000000000000000000000");


CASE 5
INFRINGING SEGMENT 1 LENGTH 4 POSITION 0
xyzz
INFRINGING SEGMENT 2 LENGTH 3 POSITION 2
zzy
INFRINGING SEGMENT 3 LENGTH 2 POSITION 4
y


CASE 6
INFRINGING SEGMENT 1 LENGTH 4 POSITION 0
xyzz
INFRINGING SEGMENT 2 LENGTH 3 POSITION 7
zzy
INFRINGING SEGMENT 3 LENGTH 2 POSITION 10
y


CASE 7
INFRINGING SEGMENT 1 LENGTH 21 POSITION 196
) {
         printf("
INFRINGING SEGMENT 2 LENGTH 20 POSITION 119


main(){
   while (
INFRINGING SEGMENT 3 LENGTH 20 POSITION 266
] = 0;
      for (i=
INFRINGING SEGMENT 4 LENGTH 19 POSITION 18
#include <stdio.h>

INFRINGING SEGMENT 5 LENGTH 17 POSITION 238
 continue;
      
INFRINGING SEGMENT 6 LENGTH 16 POSITION 14
.h>
#include <st
INFRINGING SEGMENT 7 LENGTH 16 POSITION 247
;
      }
      

CASE 8
INFRINGING SEGMENT 1 LENGTH 7854 POSITION 0
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
<solution language="C"><![CDATA[#include <stdio.h>
#include <string.h>

char buf[101000], cb1[101000], cb2[101000], *c[101000];

int comp(char **a, char **b) {
   return strcmp(*a,*b);
}

struct ss {
   char *p;
   int len;
} s[101000];

int comps(struct ss *a, struct ss *b) {
   if (a->len != b->len) return b->len - a->len;
   return a->p - b->p;
}

int n1, n2, ns, i, j, k, m, prev, hi, lo, mid, other, C;

main(){
   while (1 == scanf("%d ",&k) && k) {
      if (C++) printf("\n");
      printf("CASE %d\n",C);
      gets(buf);
      n1 = n2 = ns = 0;
      while (gets(buf) && strcmp(buf,"END TDP CODEBASE")) {
         strcpy(cb1+n1,buf);
         n1 += strlen(buf);
         strcpy(cb1+n1++,"\n");
      }
      gets(buf);
      while (gets(buf) && strcmp(buf,"END JCN CODEBASE")) {
         strcpy(cb2+n2,buf);
         n2 += strlen(buf);
         strcpy(cb2+n2++,"\n");
      }
      for (i=0;i<n1;i++) c[i] = cb1+i;
      qsort(c,n1,sizeof(char *),comp);
      prev = 0;
      for (i=0;i<n2;i++) {
         lo = 1;
         hi = n1-2;
         while (hi >= lo) {
            mid = (hi + lo)/2;
            int t = strcmp(cb2+i, c[mid]);
            if (t < 0) hi = mid-1;
            else lo = mid+1;
         }
         if (lo > mid) other = lo;
         else other = hi;
         for (j=0;c[mid][j] && c[mid][j] == cb2[i+j];j++);
         for (m=0;c[other][m] && c[other][m] == cb2[i+m];m++);
         if (m > j) j = m;
         if (j && j >= prev) {
            s[ns].p = cb2+i;
            s[ns++].len = j;
         }
         prev = j;
      }
      qsort(s,ns,sizeof(struct ss),comps);
      for (j=i=0;i<k && i<ns;i++) {
         printf("INFRINGING SEGMENT %d LENGTH %d POSITION %d\n",
               ++j,s[i].len,s[i].p-cb2);
         for (m=0;m<s[i].len;m++) printf("%c",s[i].p[m]);
         printf("\n");
      }
   }
   if (k) printf("missing end delimiter\n");
}]]></solution>
<spj><![CDATA[]]></spj>
</item>
<item>
<title><![CDATA[Persistent Numbers]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>
<description><![CDATA[<table align="right" frame="void" width="300" vspace="20" hspace="20" rules="none" ncellpadding="3">
    <tbody>
        <tr bgcolor="#ffff00">
            <td></td>
            <td><small><b>1</b></small></td>
            <td><small><b>2</b></small></td>
            <td><small><b>3</b></small></td>
            <td><small><b>4</b></small></td>
            <td><small><b>5</b></small></td>
            <td><small><b>6</b></small></td>
            <td><small><b>7</b></small></td>
            <td><small><b>8</b></small></td>
            <td><small><b>9</b></small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>1</b></small></td>
            <td><small>&nbsp;1  </small></td>
            <td><small>&nbsp;2 </small></td>
            <td><small>&nbsp;3 </small></td>
            <td><small>&nbsp;4 </small></td>
            <td><small>&nbsp;5 </small></td>
            <td><small>&nbsp;6 </small></td>
            <td><small>&nbsp;7 </small></td>
            <td><small>&nbsp;8 </small></td>
            <td><small>&nbsp;9  </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>2 </b></small></td>
            <td><small>&nbsp;2  </small></td>
            <td><small>&nbsp;4 </small></td>
            <td><small>&nbsp;6 </small></td>
            <td><small>&nbsp;8 </small></td>
            <td><small>10</small></td>
            <td><small>12</small></td>
            <td><small>14</small></td>
            <td><small>16</small></td>
            <td><small>18 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>3 </b></small></td>
            <td><small>&nbsp;3  </small></td>
            <td><small>&nbsp;6 </small></td>
            <td><small>&nbsp;9 </small></td>
            <td><small>12</small></td>
            <td><small>15</small></td>
            <td><small>18</small></td>
            <td><small>21</small></td>
            <td><small>24</small></td>
            <td><small>27 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>4 </b></small></td>
            <td><small>&nbsp;4  </small></td>
            <td><small>&nbsp;8 </small></td>
            <td><small>12</small></td>
            <td><small>16</small></td>
            <td><small>20</small></td>
            <td><small>24</small></td>
            <td><small>28</small></td>
            <td><small>32</small></td>
            <td><small>36 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>5 </b></small></td>
            <td><small>&nbsp;5  </small></td>
            <td><small>10</small></td>
            <td><small>15</small></td>
            <td><small>20</small></td>
            <td><small>25</small></td>
            <td><small>30</small></td>
            <td><small>35</small></td>
            <td><small>40</small></td>
            <td><small>45 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>6 </b></small></td>
            <td><small>&nbsp;6  </small></td>
            <td><small>12</small></td>
            <td><small>18</small></td>
            <td><small>24</small></td>
            <td><small>30</small></td>
            <td><small>36</small></td>
            <td><small>42</small></td>
            <td><small>48</small></td>
            <td><small>54 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>7 </b></small></td>
            <td><small>&nbsp;7  </small></td>
            <td><small>14</small></td>
            <td><small>21</small></td>
            <td><small>28</small></td>
            <td><small>35</small></td>
            <td><small>42</small></td>
            <td><small>49</small></td>
            <td><small>56</small></td>
            <td><small>63 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>8 </b></small></td>
            <td><small>&nbsp;8  </small></td>
            <td><small>16</small></td>
            <td><small>24</small></td>
            <td><small>32</small></td>
            <td><small>40</small></td>
            <td><small>48</small></td>
            <td><small>56</small></td>
            <td><small>64</small></td>
            <td><small>72 </small></td>
        </tr>
        <tr>
            <td bgcolor="#ffff00"><small><b>9 </b></small></td>
            <td><small>&nbsp;9  </small></td>
            <td><small>18</small></td>
            <td><small>27</small></td>
            <td><small>36</small></td>
            <td><small>45</small></td>
            <td><small>54</small></td>
            <td><small>63</small></td>
            <td><small>72</small></td>
            <td><small>81 </small></td>
        </tr>
    </tbody>
</table>
<p>The multiplicative persistence of a number is defined by Neil Sloane (Neil J.A. Sloane in</p>
<em> The Persistence of a Number </em>
<p>published in Journal of Recreational Mathematics 6, 1973, pp. 97-98., 1973) as the number of steps to reach a one-digit number when repeatedly multiplying the digits. Example:</p>
<center>
<pre><b>679</b> -&gt; <b>378</b> -&gt; <b>168</b> -&gt; <b>48</b> -&gt; <b>32</b> -&gt; <b>6</b>.
</pre>
</center>
<p>That is, the persistence of 679 is 5.  The persistence of a single digit number is 0.    At the time of this writing it is known that there are numbers with  the persistence of 11.  It is not known whether there are numbers with the persistence of 12 but it is known that if they exists then the smallest of them would have more than 3000 digits.</p>
<p>The problem that you are to solve here is: what is the smallest number such that the first step of computing its persistence results in the given number?</p>
<p>For each test case there is a single line of input containing a decimal  number with up to 1000 digits.  A line containing -1 follows the last test case. For each test case you are to output one line containing one integer number satisfying the condition stated above or a statement saying that there is no such number in the format shown below.</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[0
1
4
7
18
49
51
768
-1
]]></sample_input>
<sample_output><![CDATA[10
11
14
17
29
77
There is no such number.
2688
]]></sample_output>
<test_input><![CDATA[0
1
4
7
18
49
51
768

387299371535100332824401287347799596476023190303871715786884634165217065626114695066424865077192854898354794363171636790435767497129744380073476649085719836502028957044794463504794748014914556362384998400000000000000000000000000000000000000000000
153191479926947485527192406107445895870434973251374872769113032729901169144616876210528984942381140384153600000000000000
1595205988002091616991428156018046280400193027798682825681889528194182884038504307179554063177384431296002200362592514711527430568053534425020855790332227692687080365161226154312673072732871260041288874629558960128000000000000000000000000000000000000000000000000000
1402080447122032761505551217954958486478999672462446852665340992834133772828424920076643945161127760644787869849038835057625655866455275116041112753434780941276516942520149322404871158487220494978944991834376793534021813406589161851302351900379517540580592300022838549444992027707706820005757404040333574178206802040036148351881707520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
483961890855868235416635946534165914745203906640133051706632550113780914070646436318533721618456349583655347126600267518311460383052756250684890895231919327663261392190572928696320000000000000000000000000000000000000000000
160542346348845318530145013530185752583780605861909965971986086296074151638126328221090499788800000000000000000000000
149154970246816019615623296936765280449965139110545776496385079906923724305925503920554372929789366814481353398299851855473097545191562449994723210068415071235664119698619730111493018866491623164084006391629114900726858053148280949225696873618058872160771404772988624234469634377980322974437212160000000000000000000000000000000000000000000000000000000000000000
2924468607484833943696064289938724459760693694223091893575900325567237540447028267237787731831527791488993586327370485679051862179840000000000000000000000000000000000
286476253929103796075409070373880906105276566482509265607216627205703477254783974647175698932300336789459832377816272007489117771297455062704671564160295907844242736333562805443174525304832000000000000000000000000000000000000000
4638295948322867708232115491351571605913511560524395490933635357077744625729090180821626821474226717923726015933305804325136894097581331954804768338385298822968110531703529959184831949423682676477746615922196480000000000000000000000000000000000
45532488265758418006818815259049685401089132057056997563009702929403622515429682018549358487395830330651115923439835970068126970583411314442605665917873458535689538872142767513379172379501349187317210550460492466568983304476627564048257757784263483308312005193655083592808195323684957135609801473205001094327753356048331632000165966218460867244948916346847285963725199404782273925017548150956831539200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
295855189786001582790306478685293959317906514079361604839876382878063646393391905591001450172971801263459498035102218717438070719736785204218020935796249575593579585975551442348431729973622117646895362182527930256058418976738593901692976427323798997453091373056000000000000000000000000000000000000000000000000
430857540520300170635248014704050835344427738726400000000
9436238833253009527979478090462201453077802505314936601674121802111398107557533937337566800297818079554293238529544182971650734666959016916721399668863935131645714592213860424165984955266029476798346879808374845845174663997123549574067537938229628591070736681067192675324194928384685253532783632284879570337792000000000000000000000000000000000000000000000000000000000000000000000000000
1416884201841009387451981781147572279155370690356138355263122917797072680184683543765040975140075578653480744659297453093128837127246141732782097503789785864952341463289924196431581209791217472411888177121988592800568556126208000000000000000000000000000000000000000000000000
3740990317783786458440419649258534504768115404094075549173411516317125048348558724265828516755853183740991808040960620529625248375326726147226032402439575367161815083344023606145785879179489557614624631461545313613326095536524514818614622569064333841922885830658183764820995820353990406993447503354087156213632904829365910390373391796544230106427555840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
24410410577674473286341620480794741698006162649672002432179396414968074711737129733343682067753497983979014324224000000000000000
8893734822239731394946502165751823678479361888378240160528937670728642508128145749702912868571887194734764848639682433998360024495566330388296148268998759593373423614413454354702331664082917003299970140895488222407998638999112821262587874427308177855520727997111820703416355901131511727151537834688512000000000000000000000000000000000000000000000000000000000
207395391433087582282359230447444301081942566355378440059615737935797797979117763764968393270347813059153516348458661933356453113236609711469107505311565331618864795228366167165059364082479384022220800000000000000000000000000000000000000000000
546207198043934210997723355597156716812370231543194017077743016078098320227695625450607358640963540160672073633763023956588320129691180665287559781137854706885412293314615224519982237498620422209780774234376031078927752931297710610463353296570491899348603502678602389726630060074303550369878689661859795786312401477959680000000000000000000000000000000000000000000000000000000000000
295319379269470934948711722954860729784531513343183868326564003096774235232283414126292759257690858409445938662353455653612489915663051875069156358223272201339160899754682755317760000000000000000000000000000000000000000000000000
352232420121713455633147372267698972795271469756345539480636015758074086838064003853790890635675772279563544200037952752891675138648050918876221287860701713218351259492848351696499029348252206015447040000000000000000000000000000000000000000000000000000000000000

162880811884390150109273727020170347185413488801392256636585548647200756433328326406280342109411221719642084457610650039154845126639291227519313321470590707059845540239029669977874181154487549744360451300124421523742516430315447440706324661763306860226500242806298999444747660659216466364099332700648775307613835190301454598175265602052030464000000000000000000000000000000000000000000000000000000000000000
31833170285865267583816716800362590412251261445790496169453401057783495703041625023398822582021347335877275780498464360731202230092352276830392358290124824527937283590163449924888856528376145786801766781119557921582664344864587335270050788686479978658295817553587014587179481917374576454885873252230060800451441162589731546637288422506654589074995201730951848657477431197696000000000000000000000000000000000000000000000000000000000000000000000
2632426584369091094449284096594590013889291209738851046347590867195768542034869149054587439237748738614156739703003083184541067633701577793923863497257331982347791372576264291145142501376000000000000000000000000000000000000000000000000000000
7739041856617429951987140526080000000
2872500268343566417178880634623319080960000000000
23653339973928232984600940746717897489338016193296471946603125324823382023454234214354294717361218967610014593624431699814117107602715059080080518691361899495619181398730902096822991687043638495494115269017600000000000000000000000000000000000000000000
4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
-1
]]></test_input>
<test_output><![CDATA[10
11
14
17
29
77
There is no such number.
2688

5555555555555555555555555555555555555555555577777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
25555555555555567777777777777777777788888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999
25555555555555555555555555555555555555555555555555557777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555677777777777777777777777777777777777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
35555555555555555555555555555555555555555555777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999
555555555555555555555556777777777778888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999
5555555555555555555555555555555555555555555555555555555555555555777777777777777777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
5555555555555555555555555555555555677777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999
555555555555555555555555555555555555555777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
55555555555555555555555555555555557777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999

45555555555555555555555555555555555555555555555557777777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
4555555557777777888888888888888888888888899999999999999999999999
25555555555555555555555555555555555555555555555555555555555555555555555555556777777777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
255555555555555555555555555555555555555555555555567777777777777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999

455555555555555577777777777777777777777788888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999
5555555555555555555555555555555555555555555555555555555556777777777777777777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
555555555555555555555555555555555555555555557777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
55555555555555555555555555555555555555555555555555555555555556777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
555555555555555555555555555555555555555555555555577777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999
2555555555555555555555555555555555555555555555555555555555555567777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
355555555555555555555555555555555555555555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999

25555555555555555555555555555555555555555555555555555556777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999999999999
455555557777888888888888999999999999999999
25555555555777778888888888888888888888889999999999999999
2555555555555555555555555555555555555555555557777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999999999999999999999999
There is no such number.
There is no such number.
There is no such number.
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
<solution language="C"><![CDATA[#include <stdlib.h>
#include <stdio.h>

char n[5000], m[5000];

int i,j,k,nn,mn;

int rem(int d){
   int i,carry=0;
   for (i=0;i<nn;i++) {
      carry = 10 * carry + n[i];
      carry %= d;
   }
   return carry;
}

void Div(int d){
   int i,carry=0;
   for (i=0;i<nn;i++) {
     carry = 10 * carry + n[i];
     n[i] = carry/d;
     carry %= d;
   }
}

int one(){
   int i;
   for (i=0;i+1<nn;i++) if (n[i]) return 0;
   return n[i] == 1;
}
     
main(){
   while (strcmp(gets(n),"-1")) {
      nn = strlen(n);
      if (nn == 1) {
         printf("1%c\n",n[0]);
         continue;
      }
      mn = 0;
      for (i=0;i<nn;i++) n[i] -= '0';
      for (i=9;i>1;i--) {
         while (rem(i) == 0) {
            m[mn++] = '0'+i;
            Div(i);
         }
      }
      if (!one()) {
         printf("There is no such number.\n");
         continue;
      }
      for (i=mn-1;i>=0;i--) printf("%c",m[i]);
      printf("\n");
   }
}]]></solution>
<spj><![CDATA[]]></spj>
</item>
<item>
<title><![CDATA[ Major Scales]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>
<description><![CDATA[<p>In music, the range of audible frequencies is divided into octaves, where each octave spans frequencies within factor of 2 of one another. For example, the note called <i>middle C</i> corresponds to an  audio frequency of 263 Hz.  The octave below middle C spans the frequency range from 131.5 Hz to 263 Hz while the octave above middle C spans the range from 263 Hz to 526 Hz.</p>
<p>An octave contains 13 <i>chromatic notes</i> whose frequencies differ by a common  ratio.  The separation between two adjacent  chromatic notes is called a <i>half-step</i> or <i>semi-tone</i>. Note that there are 12 semi-tones in an octave and therefore the frequency ratio represented by a semi-tone is 1.0593 (since 1.0593<sup>12</sup> = 2).  A <i>tone</i> is two semi-tones.</p>
<p>While it might be convenient to use frequencies to describe musical notes, historical tradition demands that we name the notes of the chromatic scale, in order:  C, C#, D, D#, E, F, F#, G, G#, A, A#, B, C, and so on, repeating the same names for each new octave.</p>
<p>Western music rarely uses all the notes in the chromatic scale. Instead, 8 of the 13 chromatic notes are commonly used a composition. The most common such set of 8 notes is the <i>major scale</i>.   The 8 notes of a major scale, in order, are separated by:   <i>tone, tone, semi-tone, tone, tone, tone, semi-tone</i>.  A major scale can begin with any of the chromatic notes; this note defines the <i>key</i> of the scale. Coincidentally, in the key of C, the major scale consists of the notes: C, D, E, F, G, A, B, C.  On the other hand, in the key of F, the major scale is:  F, G, A, A#, C, D, E, F.</p>
<p>There are other scales, notably the <i>minor scale</i>, and music composed in a particular scale sometimes uses notes that are not within the scale, caled <i>accidentals</i>.  We shall concern ourselves only with music composed in a major scale with no accidentals.</p>
<p>Your job is to read a sequence of notes and to identify all the keys that the music might have been composed in.  Your program need not have any musical ear:  report a particular key if and only if all the notes come from the major scale in that key.</p>
<p>Input contains several test cases.  Each test case consists of a single line of input, containing a sequence of chromatic notes separated by white space.  No input line exceeds 1000 characters.  The last line of  input contains the word &quot;END&quot;.</p>
<p>For each test case, output a line giving the possible keys, in the order given above.</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[C C D F E G A A F G B
A B C D E F G C#
C C D F E G A A F G
C C C C C
END
]]></sample_input>
<sample_output><![CDATA[C

C F
C C# D# F G G# A#
]]></sample_output>
<test_input
A# A
F G A# C A C# D G
G B A# C F# E
B G#
A D D D G G G
F# F# F# F D# C#
G A# A A A B G# C#
G# B F# F A# G
G# A D D E C# A A G#
G# F A# A C# F C
F#
D
D G# D# D G C C
G# C D# B D G C C G#
G
A# F#
B D# A# D
B A
D A C E G# C#
D C# A
E B E A D# C#
B A B A G D# E
A F# F A# B B
E D# G#
D# B F# C E B E A C
D C# D
C# B B E G# G# C#
C# E D E C A#
G# D# D# B C# D#
E B F E B B F# C#
G F C# D# C# D G# D# D#
A G# E G G F D
E E A# C C A
F
G#
F# B D B
F E
F B D A# A D F#
C# D# D# E G# B D C B
A# G# E A#
A# A C# C# F# A# F C G#
F# F# F G# E F# D G#
F# G# C C G# B D#
G# B
B A A# C# D E D#
F B E D# A C# C D
D D G# C A# G# C F#
G A C G F# B G#
E D# A G# D
B F# A C#
C# G B G
G#
G G#
F C B D C A# C E A#
G# C# F# G# E C
D C# A D G E D D F
D C D
A D# E C G D E B F
G# F# G E A# B E
C# F G G# C#
D F# D# E A#
D G# C# F# C C C# E
F# F# C C C# G# D#
C# G#
F# G F# G#
G# F# C F F A# G
D# F F E F#
G#
G G# A A E
D A C G#
G D G# E D D A G G
D C D# G# F B F# G B
D G G# D# D# C
C# C F
B G
E A# B F A B E
B B C A
F# G#
A D G# F F# C A
F
A F# A G#
F F# F# A#
F D
A D G#
E F# F# F# E
F# C# F#
B A#
C B C# C# G G# A#
G G# D C D# D C#
D
F G# A
E
A# A# E G# A F# E C#
A G F F# F D# C# D F
A G G F# A A#
A
G
A# F C F# F C#
A F#
G C# G F G A# A# C#
C D E F G A B
D G F F F B G G F D D F E E E D E A E A C C B G A E
C C# D# F F# G# A#
D# A# G# F# F D# G# D# F D# F# C# A# A# F A# C# F# F# F F# G# D# G# F# F C#
C F
C C C F C C C
C# D E F# G A B
B F# F# F# E G A D E B F# E B B F# F# C# D G F# F# E D F#
D E G A B
G D E G E A A G A G B D B B
C# F#
F# C# F# F# C# F# F# C#
C D D# F G G# A#
D# A# D# A# G G# D# G D# A# F D# C D G
C D F G
F C C G F C D F G F F
C D# F G# A#
D# A# D# F
C F
C
D G
D G G G D D G
D G
G G D D D D D G G
C# D# E F# G# A B
B E D# G# D# G# F# C# C# B G# G# F# D# A E G# D# D# C# G# E G# E
E A B
B
C# D# F# G#
C# F# C# G# D# D# C# G#
C# E F# A B
E A A E E A
E A B
B A B E B B E B B E
C# F#
F#
D# G#
G#
D# G#
D# G# D# D# D# D# G#
C D E F G A A#
D A D F A# A# C G G A# F C F E A D G G A D
C D E F G A
F G F G E C F D A C D C F D G D D G
C F A#
C F F F F F A# C
C F
F F F C F C C F
D E G A
E E E G A G G D A A D E D E
D E G A
G D G E D D G G G
C D F G A#
G A# A# D D G A# A# C A# G C D C F G
C D F G
G
C F A#
A# F A# C F F F F F F F F A# C C C F A# C
C F
F C
D G
G
D G
D D G G
E A
E A E A E
E A
A E A A A
E A
A A A E E E E A
E A
E E A E E E A
C# D# F F# G# A# B
A# F D# G# F# C# B A# F# B F A# F C# F# D# F# A# G# B A# G# B B B G# G#
F B
B
C# D# F F# G# A#
F# F F# F A# F#
F
F F
C# F# B
F#
B
B B B
C# F#
F# C# F# F# F#
D# F G# A#
G#
F
F F F
D# F G# A#
A# G#
F
F
C# D# F# G# B
D# C# B C# C#
B
B B B B
C# D# F# G#
D# C# F#
C# F# B
C# F# F# F# B C#
B
B B
C# F#
C# F# F# C#
D# G#
G# D# G# D# G# G# D#
D# G#
G# G#
F A#
A# A# A# F F A#
F
F
F A#
A#
F
F
F A#
F F F
F
F
F A#
A# A# A#
F
F F F
C D E F# G A B
F# D A F# A D A
C D E G A B
D G A G G A B E E B D C A E D C A D D
C F#
C F#
C
C
D E F# G A B
F#
D E G A B
D D G B A G A D D E E B B B E A A E E B B A
F#
F# F# F# F# F# F# F#
C D G
G C D C G G
C D G
G C C C C
C
C C C C C C
C
C C
D G
D D D D D D G G
D G
D
E F# A B
A A A B B A A F# B A E F# F# B B E E E
E A B
B E B E B A E E B E B
F#
F# F# F# F# F# F# F#
E F# A B
B A E E F# A B A E F# B
E A B
E A B A B
F#
F# F# F# F#
C D E G A
G D A G D C A D C E D E G D
C D E G A
D C D D E E D D G E C G A D D A
C
C C
C
C C C C C
D E G A
G E D A D G E G G D D D D E A
D E G A
A A G G G D G G A E G
C D G
G C C
C D G
D C G G C G C G G D D C
C
C C
C
C
D G
G
D G
G
E A
E A A A A A E A A
E A
E E A A E E A
E A
A E
E A
A E E E A E A E E A E E
F# B
B B F# B
B
B
F#
F#
F# B
F# F# F# F# B B F# F# B
B
B
F#
F#
F# B
F# B
B
B B B B
F#
F# F# F# F# F#
F# B
F# F#
B
B B B
F#
F# F# F#
C C# D# F G G# A#
F D# G# G# D# C G G#
C F G
F F C C G G
C C# D# F G# A#
A# C# G# C# F A# D# F D# A# F F D# D# C# D# D#
C F
F C C C
C# G
C# G C# C# G G
G
G G G
C#
C# C# C# C#
C D# F G G# A#
G# D# D# D# G# G# D# F F F C C D# D# G# D# A#
C F G
G G C G F C G F F G F F F
C D# F G# A#
G# F A#
C F
C C C F
G
G G
G
G G G
C# D# G#
G# D# C# D# D# G# G# C# C# D# C# C# C# C#
C# D# G#
C# C# C# D# C# D# C# D# D# G# D# G#
C#
C#
C#
C#
D# G#
G# D# G# D# G#
D# G#
G# D# G# G# G# G# D#
C F G A#
C G C F A# G A# F A#
C F G
G F F C G F C F G C G C G C
C F A#
F A# A# C C A#
C F
F F C F F F F F
G
G G G G G G G G
G
G
C F G A#
G A# A# F C F C F
C F G
G F
C F A#
A# C F C F F C F F F F
C F
C F
G
G
G
G
C# D# F G# A#
D# G# D# G# D# G# A# D#
F
F
C# D# F G# A#
A# F C# D# C# D#
F
F
C#
C#
C#
C# C# C#
D# F G# A#
A# D# D# F G# G# D# A# G# D# D# F D# D# G# A# F G# F A# G# D# G#
F
F F F F F F F
D# F G# A#
A# D# D# F G# G# D#
F
F F F F
C# D# G#
D# G# D# D# G# G#
C# D# G#
G# D#
C#
C#
C#
C# C#
D# G#
D# G#
D# G#
D# D# D# D#
F A#
F A# A#
F
F F F F
F A#
A# A# A# A#
F
F
F A#
A# F F A#
F
F
F A#
A#
F
F
C G
C C C
C G
C C G G C G C C
C
C
C
C C C
G
G G G
G
G G G G
C G
C C C G C
C G
G G G
C
C C
C
C C C
G
G G G G
G
G G G G G G
C G
G G C G G
C G
C
C
C
C
C
G
G
G
G
C G
C
C G
G
C
C C C C
C
C C C
G
G
G
G G
C# D E F# G# A B
A G# E A G# A D F# G# A A A
D E A B
D
C# F# G#
F#
C# D E F# A B
A D
D E A B
A E E D D D D E A D B
C# F#
C# F# C# F# F# C# F# F#
D G#
D G#
D
D D D
G#
G#
D
D D
D
D
C# E F# G# A B
B
E A B
B B A B A E B E A
C# F# G#
G#
C# E F# A B
F# A F#
E A B
A
C# F#
C# F# C# C# C# F# C# C# C# C#
G#
G#
G#
G# G# G# G# G#
D E A
D D A E A
D E A
A E A
D E A
D A E E E
D E A
E D A E E A A E D E A D
D
D D D D D D
D
D D
D
D D D
D
D D D D
E A
A E E A A E A E
E A
A A A
E A
E A
E A
A E A E E E A A
C# F# G# B
F# G# F#
B
B B B B
C# F# G#
F# G# G# G#
C# F# B
F# B B F# C# B C# F# C# C# C# C# B
B
B B B B B B
C# F#
F# F# F# F# F#
G#
G# G# G# G# G#
G#
G# G# G# G#
C# F# G# B
G#
B
B
C# F# G#
G# F# F# F# F# G# C# F# G# G# G# F#
C# F# B
C# B B C# B F# F#
B
B
C# F#
F# F# C# F# F# C# F# F# C# C#
G#
G#
G#
G# G# G#
D E F# A B
A D F# D
D E A B
D A D E B E B
F#
F#
D E F# A B
F# B E
D E A B
E D D D E E D E E
F#
F# F#
D
D D D
D
D D D D D
D
D
D
D D D D
E F# A B
A E A E B E E F# F# A F#
E A B
B A A E A E E E A
F#
F#
E F# A B
A B A E F# B F# F# F# B F# F# F# F# E B
E A B
A E E B
F#
F# F# F#
D E A
A D D A E D E A
D E A
E D
D E A
E
D E A
A D E D A A
D
D D
D
D D
D
D D
D
D D D D D
E A
E
E A
A
E A
E
E A
A A E E
F# B
F# F# B
B
B
F#
F# F#
F# B
F#
B
B B B
F#
F# F# F#
F# B
B F# F# B B F# F# F# B F# F#
B
B B
F#
F#
F# B
F# F# B B B F# B
B
B B B B B B
F#
F# F#
C# G#
C# C# G#
C# G#
G# G# G#
C#
C#
C#
C# C# C# C#
G#
G#
G#
G#
C# G#
G# G# G# C#
C# G#
G# C# G# G# C# C# G# G# C# G# C# G# G# G#
C#
C# C# C# C#
C#
C# C#
G#
G#
G#
G# G# G#
C# G#
C#
C# G#
G# G# C# C#
C#
C# C# C#
C#
C# C# C# C# C#
G#
G# G# G#
G#
G# G# G# G# G#
C# G#
C# G#
C# G#
C# C# G#
C#
C# C# C#
C#
C#
G#
G# G# G# G# G# G# G#
G#
G#
C D D# F G A A#
D D G A F D# C G
C D F G A
F A F C G D F G C D C A C G D G A F A
C D# F A#
A# C D# D# D# D# A# C
C F
C C
D G A
G A A A D A D
D G A
D G D A
C D D# F G A#
A# C
C D F G
F D
C D# F A#
A# F C C A# C A#
C F
C F
D G
D
D G
G G
D# A
A A A A
A
A A
D#
D# D# D# D# D#
A
A A A
A
A A A
D#
D# D# D#
D#
D#
C D F G A A#
F A A C F A G C A D G C C F A D A# D G G G A#
C D F G A
G A D D C A G D G A G D G F F D
C F A#
C A# F A# A# A# F A# C
C F
F
D G A
G G G D G
D G A
A A A G
C D F G A#
G
C D F G
C C F D D D C F F
C F A#
C A# A# C C
C F
C C C C F C
D G
D G D D G
D G
G
A
A A A A A
A
A A
A
A A
A
A
D# F A#
F F A# F D# A# A#
F
F F F
D# F A#
F A# D# A# D# D# A#
F
F F F
D# F A#
D# A# D# A# F D# D# A# A# A# D# D#
F
F
D# F A#
F D# D# D# D# A# F F F A# D#
F
F
D#
D# D#
D#
D#
D#
D#
D#
D#
F A#
A#
F
F
F A#
F F A# A# A# F F
F
F F F F F
F A#
F A# A#
F
F F F F
F A#
A# F A# A# F F F
F
F
C D G A
C C C C A G C D D C G G C G G C G
C D G A
G
C
C
C
C C
D G A
D A G D A A A G D D A A
D G A
D
C D G
C
C D G
G C G D D
C
C C C C
C
C C
D G
D G G D D
D G
D G D
A
A A A
A
A
A
A A
A
A A A A A A A
C D G A
A A D A D A A D G G A G G
C D G A
C G G C A C A A D C D D G A A D
C
C C C
C
C
D G A
G D G D A A A G A D D G G D
D G A
A G A D G G D D A D D G A A A A G
C D G
D
C D G
D G D C G C G D G
C
C
C
C C
D G
G D G D G D G D
D G
D D D
A
A
A
A A
A
A A A
A
A A A A A A A A
C D# F G A#
C D# C F G A# A# D# F A# A# G F C A#
C F G
C F F F
C D# F A#
A# A# F A# C A# A# C C
C F
F F C C C F F C F C F
G
G G G
G
G G
C D# F G A#
C
C F G
F C F C C C C C G C
C D# F A#
D# F C D# D# A# A# A# C C A# F D# F C D#
C F
F F C C C F
G
G
G
G G G
D#
D# D# D# D#
D#
D#
D#
D# D# D#
D#
D# D# D#
C F G A#
G F A# C C G C A# G C C A# G F
C F G
G F G C C F C C G
C F A#
C F F
C F
C C C F F C C C
G
G
G
G G
C F G A#
A# F C A# G C C
C F G
F C
C F A#
C C C A# A# F A# A# F F
C F
C
G
G
G
G G G G G
D# F A#
D# F D# A# D# F D# D#
F
F
D# F A#
A# F A# A# A#
F
F
D# F A#
A# F F D# F F D# A# F F A# D# F
F
F
D# F A#
F D# D# A#
F
F F
D#
D#
D#
D# D# D# D#
D#
D#
D#
D# D# D# D#
F A#
A# F A#
F
F F F F
F A#
A# A# A#
F
F F F F
F A#
F F A# F
F
F
F A#
A# F F F A# F A#
F
F F F F F F
C G
G G
C G
C G G C
C
C C C
C
C C C C C C C
G
G
G
G G
C G
C C G G G G
C G
G
C
C
C
C C C C
G
G
G
G G G
C G
G G G G
C G
C G
C
C
C
C C
G
G G
G
G
C G
C G C C
C G
G G C C G C G C C C
C
C
C
C C C
G
G G G
G
G G
D A
A A D A
D A
A
D A
A A A A A
D A
D
D
D D D D D D
D
D D
D
D
D
D
A
A A A
A
A A A
A
A
A
A
D A
A A A A A D A
D A
D A D A A
D A
D A
D A
D
D
D
D
D D
D
D
D
D D
A
A A A A A A
A
A A
A
A A A A A A
A
A A
D A
A A A A D A D
D A
A
D A
D
D A
A A A
D
D
D
D D
D
D
D
D D D D
A
A
A
A A
A
A
A
A
D A
D A D
D A
D D D
D A
D D D
D A
A
D
D
D
D
D
D D
D
D D D D
A
A
A
A A A A
A
A A A A
A
A A
C# D# E F# G# A# B
B B A# A# B A# C# F# F# D#
E B
B B
C# D# F# G# A#
D# F# D# D# G# F# D# C#
C# E F# B
B C# F# B
E B
B B B B E
C# F#
F# C# F# F# C#
D# G# A#
D# G# G# D# D# D#
D# G# A#
A# G# D# G# D# A# G# G# G# D#
C# D# E F# G# B
C# D# B E E C# B E G# D# D# G# G# E C# B B C# E E E
E B
B
C# D# F# G#
C# F# G# F# G# F# G# G# D# G#
C# E F# B
F# E B C# C# F# C# B E
E B
E
C# F#
C# C# F# C# F# F# C# C# C# C#
D# G#
G# G# D# G#
D# G#
D# D# G# G# G# D# G# G#
E A#
E E E E A#
E
E
A#
A#
E
E
E
E E E E
A#
A# A# A# A#
A#
A# A# A# A# A#
E
E E E E E E
E
E E
E
E
E
E
C# D# F# G# A# B
C# D# C# D# F# B B C# B D# A# C# D# D# F# F# G# D# C# B A# G# B D# B A# A# B
B
B B B
C# D# F# G# A#
A# G# C# A# D#
C# F# B
C# F# B C# B
B
B B B B
C# F#
F# F# F# F# F#
D# G# A#
A#
D# G# A#
A# G# A# G# A# G# G# G# D# A# A# G# G# G#
C# D# F# G# B
B B F#
B
B
C# D# F# G#
D# G# F#
C# F# B
B B F# C# B C# F#
B
B
C# F#
F# F# C# C# C#
D# G#
G# G# D# D# D#
D# G#
G# D# G# D# D# G#
A#
A# A#
A#
A# A# A# A# A#
A#
A#
A#
A# A#
E F# B
F# B
E B
B E B B E E E
F#
F# F# F#
E F# B
F# F# E B E F# F#
E B
B B E E B E B E B
F#
F#
E F# B
E E F# E B B F# B B F#
E B
E E E B
F#
F#
E F# B
B B
E B
B
F#
F# F#
E
E
E
E E E E E E
E
E E E
E
E E E
E
E E E
E
E E
E
E
E
E
F# B
F# B B B
B
B B B
F#
F# F# F# F#
F# B
F# F# B B
B
B B
F#
F# F# F#
F# B
B F# B
B
B
F#
F# F#
F# B
B
B
B
F#
F#
C# D# G# A#
A#
C# D# G# A#
D# C# D# C# D#
C#
C#
C#
C#
D# G# A#
D#
D# G# A#
G#
C# D# G#
D# D# D# G# G# G# G# G# G# G# D# G#
C# D# G#
G# D#
C#
C# C#
C#
C# C# C# C# C# C# C# C#
D# G#
G# D# D# G#
D# G#
G# G# G#
A#
A# A# A# A# A# A#
A#
A# A#
A#
A#
A#
A# A# A#
C# D# G# A#
A# G# G# G# G# A# A# C# C# G# C# A# G# G# A#
C# D# G# A#
A# G# A# C# A# D# G# C# A# A# D# G# G# G#
C#
C#
C#
C#
D# G# A#
D# G# G# G# A# D# D# G# D# G#
D# G# A#
G# A# D# A# A# G#
C# D# G#
C# G#
C# D# G#
G# C# C# G# G# D# D# D# G# G#
C#
C# C# C# C#
C#
C#
D# G#
D# G#
D# G#
G# G# D# G# G# D# D# G# G# G# D#
A#
A# A# A#
A#
A# A# A# A#
A#
A# A#
A#
A#
C# E F# G# B
E E G# B B E E B E B B C# F# E C#
E B
B E E E B E
C# F# G#
F# G# F# F# F# G#
C# E F# B
C# C# B F# B B B E E B
E B
B E E
C# F#
F# F# C# F# C# F#
G#
G# G#
G#
G#
C# E F# G# B
C# E G# B F# F# B E C# G#
E B
B E E
C# F# G#
G#
C# E F# B
B F# B F# F# C# F# F#
E B
B
C# F#
F# F# C# F# F# F# C# C# F# C# C#
G#
G#
G#
G#
E
E E
E
E
E
E
E
E E E
E
E E E E E E E
E
E E E
E
E E E
E
E E E E
C# F# G# B
F# C# C# C# C# F# B B
B
B
C# F# G#
G# F# G# G# C# F# C# C# F# F# F# F#
C# F# B
C# C# B C# C# B C# B F# B
B
B B
C# F#
C# F# C# F# F# C# F# F#
G#
G# G# G# G#
G#
G#
C# F# G# B
C# F# C# B
B
B
C# F# G#
F# C# G# C# G# C# F# G# F# G# F#
C# F# B
F# C# F# F# F# F# C# C#
B
B
C# F#
F# F# C# F# C# C#
G#
G# G# G#
G#
G#
E F# B
F# E B B E
E B
E E
F#
F#
E F# B
F# B E B B B F#
E B
B B E B B B
F#
F#
E F# B
F# E E B E B E
E B
E B
F#
F#
E F# B
B F#
E B
B
F#
F# F# F# F#
E
E E E
E
E
E
E E
E
E E E E E E
E
E
E
E
E
E
E
E
F# B
B
B
B B B
F#
F# F# F# F#
F# B
F# F# F# F# F# F# F# F#
B
B
F#
F#
F# B
F# B F# F# F# F# B F#
B
B B B B B B B
F#
F# F#
F# B
F# B F# B F# B F# B F# B F#
B
B B B
F#
F#
C# G#
G# G# G#
C# G#
C# C# G# G# G# G# C# C# C# C# C#
C#
C# C# C# C# C# C#
C#
C# C# C# C#
G#
G#
G#
G#
C# G#
C# C# C# C# C# C#
C# G#
C# G# G# G#
C#
C#
C#
C# C# C# C# C#
G#
G# G#
G#
G#
C# G#
G# C# G# G# G# G# G#
C# G#
G# C# C# C# G# G# C#
C#
C# C#
C#
C#
G#
G# G# G#
G#
G# G#
C# G#
G# C# C#
C# G#
G# G# C# G# C# C# G#
C#
C#
C#
C#
G#
G# G# G# G# G#
G#
G# G# G# G# G#
D# A#
D# D# A# A#
D# A#
D# A# A# D# D# D# D#
D# A#
A# A#
D# A#
A# A#
D#
D#
D#
D#
D#
D# D#
D#
D# D# D# D#
A#
A#
A#
A#
A#
A#
A#
A#
D# A#
A#
D# A#
D# D# A#
D# A#
D# D# A# D# D# A# A# D# D# A#
D# A#
D# D# A# A# D# A# A# A# D#
D#
D# D#
D#
D#
D#
D# D#
D#
D# D# D#
A#
A# A# A# A# A#
A#
A# A#
A#
A# A# A# A# A#
A#
A#
D# A#
A#
D# A#
D# A# A# A# D# D# A# D#
D# A#
D# A# A#
D# A#
A# D# A# A# A# A# A# D#
D#
D#
D#
D# D# D# D# D# D#
D#
D# D#
D#
D# D# D# D#
A#
A#
A#
A#
A#
A#
A#
A# A#
D# A#
D# A# A# A#
D# A#
D# D# D# D#
D# A#
D# D# D# A# D# A# D# D#
D# A#
A# A# A# A# A# A# D#
D#
D#
D#
D# D# D# D# D#
D#
D#
D#
D# D#
A#
A# A# A#
A#
A# A# A#
A#
A# A#
A#
A# A#
END
]]></test_input>
<test_output><![CDATA[C# G#
F A#


E F# A B
C D F G A#
C# F#


A

C# D E F# G A B
C D D# F G A A#
D#

C D D# F G G# A#
C# F# B

C D E G A

D A
E


E B

D A
E A B

E F# B



F
C C# D# F F# G# A#
C# D# E F# G# A B
D G A
C F


B



E F# A B





D E A
D
C# D# E F# G# A B
D# G#



C D# F G A#


G#


C#
C# E F# G# A B



C# D# E F# G# A B




D#
C# G#
C D G

C G
C# E F# A B

C C# D# F F# G# A#
E A
C# F#
C D# F A#
A
D E G A B
C# D E F# A B
F# B


C D D# F G A A#

C D E F G A B



C D E F G A A#
C D D# F G G# A#
C#
D E G A
G#
C
C
C#
C# F#
C C# D# F G# A#
C C# D# F G# A#
D
D
C D G
C D G
C# D E F# A B
C# D E F# A B
D#
D#
C D# F A#
C D# F A#
C# D# G#
C# D# F# G# A#
C C# D# F G# A#
C C# D# F G G# A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
E
E
C D E G A
C D E F# G A B
C# E F# B
C# E F# B
D E A
C D E F G A
C D E G A
C D E G A
C# D E F# A B
C# D E F# G A B
C# D# E F# G# B
C# D# E F# G# A B
C# D# E F# G# B
C# D# E F# G# B
F
F
C F
C F
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D F G
C D F G
C D F G
C D F G
D# F A#
D# F A#
C D# F A#
C D D# F G G# A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G A#
C D D# F G G# A#
C D D# F G A#
C D D# F G A#
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
F#
F#
C F#
C D E F# G A B
C# F#
C# F#
C C# D# F F# G# A#
C C# D# F F# G# A#
D E F# A B
C# D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# F# G#
C# D# E F# G# A B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G#
C# D# F# G# B
C C# D# F F# G# A#
C C# D# F F# G# A#
E F# B
E F# B
C D E F# G A B
C D E F# G A B
C# E F# B
C# E F# B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# A B
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
G
D G A
C G
C G
C# G
C# G
C C# D# F G G# A#
C C# D# F G G# A#
D G
C# D E F# G A B
C D G
C D G
C# D E F# G A B
C# D E F# G A B
C D# F G A#
C D# F G A#
C D# F G A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D D# F G A A#
D E G A
D E G A
C D E G A
C D E G A
C# D E F# G A B
C# D E F# G A B
D E G A
D E G A
C D E G A
C D E G A
C# D E F# G A B
C# D E F# G A B
C F G
C F G
C F G
C F G
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D F G
C D F G
C D F G
C D F G
C D# F G A#
C D# F G G# A#
C D# F G A#
C D# F G A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G A#
C D D# F G G# A#
C D D# F G A#
C D D# F G G# A#
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
C D E F G A
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
C# D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
G#
D# G#
C D# F G# A#
C D# F G# A#
C# G#
C# F# G#
C C# D# F G# A#
C C# D# F G# A#
D G#
D G#
C D D# F G G# A#
C D D# F G G# A#
C# D E F# G# A B
C# D E F# G# A B
D# G#
C# D# G#
C D# F G# A#
C D# F G# A#
C# D# G#
C# D# F# G#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C# E F# G# B
C# E F# G# B
C# E F# G# B
C# E F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
D# F G# A#
D# F G# A#
C D# F G# A#
C D# F G# A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
D# F G# A#
D# F G# A#
C D# F G# A#
C D# F G# A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C# F# G#
C# D# F# G# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# F# G#
C# F# G#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# F# G#
C# D# F# G#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G#
C# D# F# G#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# E F# G# B
C# D# E F# G# B
C# E F# G# B
C# D# E F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# A# B
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C D# F G G# A#
C C# D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C D# F G G# A#
C D D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
A
A
C D G A
C D D# F G A A#
C# E F# A B
C# D E F# G A B
D A
C D F G A A#
C D G A
C D G A
C# D E F# A B
C# D E F# A B
D# A
D# A
C D D# F G A A#
C D D# F G A A#
C# D# E F# G# A B
C# D# E F# G# A B
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
E A
C D E F# G A B
C D E G A
C D E G A
C# E F# A B
C# D# E F# G# A B
D E A
D E G A
C D E G A
C D E F G A A#
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C D F G A
C D F G A
C D F G A
C D E F G A
C D F G A
C D F G A
C D F G A
C D F G A
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A
C D E F G A
C D E F G A
C D E F G A A#
C D E F G A
C D E F G A
C D E F G A
C D E F G A
E F# A B
C# E F# A B
C D E F# G A B
C D E F# G A B
C# E F# A B
C# E F# A B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# G A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
E F# A B
C# D# E F# G# A B
C D E F# G A B
C D E F# G A B
C# E F# A B
C# E F# A B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
D G A
D G A
C D G A
C D G A
C# D E F# G A B
C# D E F# G A B
D G A
D E G A B
C D G A
C D F G A
C# D E F# G A B
C# D E F# G A B
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
D E G A
D E G A
C D E G A
C D E G A
C# D E F# G A B
C# D E F# G A B
D E G A
D E G A
C D E G A
C D E G A
C# D E F# G A B
C# D E F# G A B
C D F G A
C D F G A
C D F G A
C D F G A
C D F G A
C D E F G A B
C D F G A
C D F G A
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A
C D E F G A B
C D E F G A
C D E F G A A#
C D E F G A
C D E F G A B
C D E F G A
C D E F G A
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
C# D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
A#
A#
C F A#
C F A#
C# D# G# A#
C# D# G# A#
C C# D# F G# A#
C C# D# F G G# A#
C D F G A#
C D F G A#
C D F G A#
C D F G A#
D# A#
C# D# F G# A#
C D# F A#
C D# F A#
C# D# G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G A#
C D D# F G A A#
C D D# F G A#
C D D# F G G# A#
E A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C# D# E F# G# A# B
C# D# E F# G# A# B
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
F A#
F A#
C F A#
C F A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F F# G# A#
C D F G A#
C D D# F G A#
C D F G A#
C D F G A#
D# F A#
C D D# F G G# A#
C D# F A#
C D# F A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D D# F G G# A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C F G A#
C F G A#
C F G A#
C D D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D F G A#
C D F G A#
C D F G A#
C D D# F G A A#
C D# F G A#
C C# D# F G G# A#
C D# F G A#
C D# F G A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C F G A#
C D F G A#
C F G A#
C F G A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D F G A#
C D F G A#
C D F G A#
C D F G A#
C D# F G A#
C D D# F G A A#
C D# F G A#
C D# F G A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G A#
C D D# F G A#
C D D# F G A#
C D D# F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
D# G# A#
D# G# A#
C D# F G# A#
C C# D# F G# A#
C# D# G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
D# G# A#
C C# D# F G G# A#
C D# F G# A#
C D# F G# A#
C# D# G# A#
C# D# G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
D# F G# A#
D# F G# A#
C D# F G# A#
C D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C C# D# F G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
D# F G# A#
D# F G# A#
C D# F G# A#
C C# D# F G# A#
C# D# F G# A#
C# D# F G# A#
C C# D# F G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F# G# A#
C# D# F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A# B
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C# D# F F# G# A#
C# D# F F# G# A#
C C# D# F F# G# A#
C C# D# F F# G# A#
C D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C C# D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D D# F G G# A#
C D F G A A#
C D F G A A#
C D F G A A#
C D E F G A A#
C D F G A A#
C D E F G A A#
C D F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D E F G A A#
C D F G A A#
C D D# F G A A#
C D F G A A#
C D E F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D F G A A#
C D F G A A#
C D F G A A#
C D D# F G A A#
C D F G A A#
C D D# F G A A#
C D F G A A#
C D E F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D D# F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
C D E F G A A#
B
F# B
C D E G A B
C D E F# G A B
C# F# B
C# E F# B
D E A B
D E F# A B
C D E G A B
C D E G A B
C# D E F# A B
C# D E F# A B
C# D# F# G# B
C# D# E F# G# B
C# D# F# G# B
C# D# F# G# B
E B
E B
C D E G A B
C D E F# G A B
C# E F# B
C# E F# B
D E A B
D E A B
C D E G A B
C D E F G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
F B
F B
C D E F G A B
C D E F G A B
C# D# F F# G# A# B
C# D# F F# G# A# B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
F# B
F# B
C D E F# G A B
C D E F# G A B
C# F# B
C# F# G# B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# G A B
C# D# F# G# B
C# D# F F# G# A# B
C# D# F# G# B
C# D# F# G# B
E F# B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# E F# B
C# E F# B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
D E G A B
D E F# G A B
C D E G A B
C D E G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
D E G A B
C D E G A B
C D E G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
D E G A B
C D E G A B
C D E G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
C D E F# G A B
C D E G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
C# F# G# B
C# D# F F# G# A# B
C# F# G# B
C# E F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# F# G# B
C# D# E F# G# A# B
C# D# F# G# B
C# D# E F# G# A B
C# E F# G# B
C# D# E F# G# B
C# E F# G# B
C# D# E F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# A B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# F# G# B
C# F# G# B
C# F# G# B
C# F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# F# G# B
C# D# F# G# B
C# D# F# G# B
C# D# F# G# B
C# E F# G# B
C# E F# G# A B
C# E F# G# B
C# E F# G# B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# E F# G# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
E A B
E A B
C D E G A B
C D E G A B
C# E F# A B
C# E F# A B
D E A B
D E A B
C D E G A B
C D E G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
E A B
E A B
C D E G A B
C D E G A B
C# E F# A B
C# D# E F# G# A B
D E A B
D E F# A B
C D E G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# E F# A B
C# E F# A B
D E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
E F# A B
D E F# A B
C D E F# G A B
C D E F# G A B
C# E F# A B
C# E F# A B
D E F# A B
C# D E F# A B
C D E F# G A B
C D E F# G A B
C# D E F# A B
C# D E F# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
D E G A B
D E G A B
C D E G A B
C D E F G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
D E G A B
C D E G A B
C D E G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
D E G A B
C D E G A B
C D E G A B
C# D E F# G A B
C# D E F# G A B
D E G A B
D E F# G A B
C D E G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
C D E F G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
C# D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
D E F# G A B
D E F# G A B
C D E F# G A B
C D E F# G A B
C# D E F# G A B
C# D E F# G A B
C# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# E F# G# A B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# E F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# E F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
C# D# F F# G# A# B
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
<solution language="C"><![CDATA[#include <stdio.h>
#include <string.h>

int i,j,k,m, mm[12];
char buf[2000];

char *p;

char *t[] = {"C","C#","D","D#","E","F","F#","G","G#","A","A#","B"};

main(){
   for (i=0;i<12;i++) {
      mm[i] |= (1<<((i+0)%12));
      mm[i] |= (1<<((i+2)%12));
      mm[i] |= (1<<((i+4)%12));
      mm[i] |= (1<<((i+5)%12));
      mm[i] |= (1<<((i+7)%12));
      mm[i] |= (1<<((i+9)%12));
      mm[i] |= (1<<((i+11)%12));
   }
      
   while (gets(buf)) {
      if (!strcmp(buf,"END")) break;
      m = 0;
      for (p=strtok(buf," ");p;p=strtok(NULL," ")) {
         for (i=0;i<12 && strcmp(p,t[i]);i++);
         m |= (1<<i);
      }
      for (k=i=0;i<12;i++) {
         if (!(m & (~mm[i]))) {
            if (k++) printf(" ");
            printf("%s",t[i]);
         }
      }
      printf("\n");
   }
}]]></solution>
<spj><![CDATA[]]></spj>
</item>
<item>
<title><![CDATA[Dumb Bones]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>
<description><![CDATA[<p>You are trying to set up a straight line of dominos, standing on end, to be pushed over later for your entertainment.  (Sure, it seems pointless to set something up only to knock it down again, but you have some strange hobbies) The tricky thing about setting dominos, however, is that if you make a mistake and knock one over as you place it, it will knock down any adjacent line of consecutive dominos on one side of it, partially ruining your work.</p>
<p>For instance, if you've already placed dominos in the pattern DD__DxDDD_D, and you try placing a domino at position x, there is a chance it will fall and knock over the domino to the left or the three dominos to its right, forcing you to place them again.</p>
<p>This human error is somewhat unavoidable, but you <i>can</i> make the odds somewhat more favourable by using a domino-placing technique that leads to dominos falling in one direction more often than in the other.</p>
<p>Given the number of dominos you are trying to set up, and the probability that you'll knock over any individual domino either to the left or to the right while placing it, determine the average number of dominos you'll need to place before you finish.  Assume that you're using an optimal placement strategy.</p>
<p>Input will consist of up to 100 cases.  Each case consists of one line of input.  It will contain the number of dominos to place, n, 1 &lt;= n &lt;= 1000, followed by nonnegative values Pl and Pr, indicating the probability of any domino falling to the left or to the right when placed.  You may assume 0 &lt; Pl + Pr &lt;= 0.5.</p>
<p>The last test case is followed by a line containing a single 0.</p>
<p>For each case, output the expected number of dominos that will need to be placed before you finish, accurate to two digits after the decimal.</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[10 0.25 0.25
10 0.1 0.4
10 0.0 0.5
0
]]></sample_input>
<sample_output><![CDATA[46.25
37.28
20.00
]]></sample_output>
<test_input><![CDATA[10 0.25 0.25
10 0.1 0.4
10 0.0 0.5
10 0.4 0.1
10 0.5 0.0
10 0.01 0.00
999 0.25 0.25
1000 0.24 0.26
1000 0.23 0.27
1000 0.22 0.28
1000 0.21 0.29
1000 0.20 0.30
1000 0.19 0.31
1000 0.18 0.32
1000 0.17 0.33
1000 0.16 0.34
1000 0.15 0.35
999 0.14 0.36
1000 0.13 0.37
1000 0.12 0.38
1000 0.11 0.39
1000 0.10 0.40
1000 0.09 0.41
1000 0.08 0.42
1000 0.07 0.43
1000 0.06 0.44
1000 0.05 0.45
999 0.04 0.46
1000 0.03 0.47
1000 0.02 0.48
1000 0.01 0.49
1000 0.00 0.50
996 0.10 0.07
997 0.09 0.08
997 0.08 0.09
996 0.07 0.10
996 0.06 0.11
997 0.05 0.12
996 0.04 0.13
996 0.03 0.14
996 0.02 0.15
996 0.01 0.16
996 0.00 0.17
1 0.0 0.5
1 0.2 0.2
1 0.3 0.05
1 0.0 0.3
1 0.0 0.2
1 0.0 0.1
1 0.05 0.05
267 0.20 0.25
464 0.09 0.13
252 0.28 0.12
841 0.27 0.22
524 0.20 0.13
482 0.04 0.12
610 0.13 0.08
212 0.10 0.24
440 0.39 0.07
808 0.35 0.05
367 0.32 0.09
518 0.28 0.07
910 0.25 0.23
413 0.06 0.18
237 0.01 0.01
585 0.38 0.08
472 0.04 0.34
727 0.10 0.10
414 0.14 0.19
253 0.11 0.10
598 0.01 0.42
598 0.25 0.21
471 0.35 0.04
818 0.34 0.08
218 0.11 0.18
585 0.15 0.10
607 0.36 0.02
769 0.40 0.03
569 0.09 0.19
975 0.08 0.23
791 0.39 0.07
497 0.03 0.35
442 0.06 0.29
559 0.26 0.13
397 0.11 0.04
785 0.40 0.06
603 0.03 0.36
387 0.18 0.08
952 0.30 0.19
857 0.26 0.06
291 0.04 0.40
591 0.37 0.06
658 0.33 0.06
302 0.15 0.02
448 0.14 0.06
947 0.04 0.13
508 0.07 0.22
397 0.30 0.12
929 0.01 0.24
1000 0.05 0.11
0
]]></test_input>
<test_output><![CDATA[46.25
37.28
20.00
37.28
20.00
10.10
57202.72
57134.72
56980.72
56659.76
55946.50
54823.86
53572.77
51827.49
49877.84
47688.79
45475.85
43117.26
40812.40
38212.48
35672.48
32765.88
29841.82
26992.41
23973.70
21083.01
18192.63
15318.90
12488.36
9727.20
6771.89
2000.00
2613.89
2635.98
2635.98
2613.89
2563.39
2492.65
2390.48
2255.03
2082.68
1846.86
1200.00
2.00
1.67
1.54
1.43
1.25
1.11
1.11
4258.93
1482.12
2230.55
38327.72
3756.13
1012.85
1902.17
1134.32
5443.92
6774.76
3493.96
3334.87
38573.59
1322.59
256.94
8912.55
2696.12
2256.25
2795.75
687.45
2560.93
15979.10
2832.54
10485.07
907.91
2383.38
2751.87
5710.28
2711.04
6176.15
12389.37
2527.24
2537.33
6435.75
781.54
10964.20
3384.04
1455.74
44024.51
4944.28
1975.21
6032.53
5375.97
558.21
1199.59
2257.57
2309.95
4851.13
2230.62
2373.62
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
<solution language="C"><![CDATA[#include <math.h>
#include <stdio.h>

double Pl, Pr, C[1100], c;  // C[m] is cost to build m in a row

int i,l,k,m,n,r;

main(){
   while (3 == scanf("%d%lf%lf",&n,&Pl,&Pr)) {
      if (Pl+Pr == 0) {
         printf("%d.00\n",n);
         continue;
      }
      C[0] = 0;
      for (i=1;i<=n;i++) C[i] = 1e19;
      for (m=1;m<=n;m++) { 
         for (l=0;l<m;l++) {   // l dominoes on the left
            r = m-l-1;
            c = 1 + C[l] + C[r] + 
                (1/(1-Pr-Pl)-1) * (1+ Pl/(Pr+Pl)*C[l] + Pr/(Pr+Pl)*C[r]);
            if (c < C[m]) C[m] = c;
         }
      }
      printf("%0.2lf\n",C[n]);
   }
}]]></solution>
<spj><![CDATA[]]></spj>
</item>
<item>
<title><![CDATA[Guessing Game]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>
<description><![CDATA[<p>Stan and Ollie are playing a guessing game.  Stan thinks of a number between 1 and 10 and Ollie guesses what the number might be.  After each guess, Stan indicates whether Ollie's guess is too high, too low, or right on.</p>
<p>After playing several rounds, Ollie has become suspicious that Stan cheats; that is, that he changes the number between Ollie's guesses.  To prepare his case against Stan, Ollie has recorded a transcript of several games. You are to determine whether or not each transcript proves that Stan is cheating.</p>
<p>Standard input consists of several transcripts.  Each  transcript consists of a number of paired guesses and responses.  A guess is a line containing single integer between 1 and 10, and a response is a line containing &quot;too high&quot;, &quot;too low&quot;, or &quot;right on&quot;. Each game ends with &quot;right on&quot;.  A line containing 0 follows the last transcript.</p>
<p>For each game, output a line &quot;Stan is dishonest&quot; if Stan's responses are inconsistent with the final guess and  response.  Otherwise, print &quot;Stan may be honest&quot;.</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[10
too high
3
too low
4
too high
2
right on
5
too low
7
too high
6
right on
0
]]></sample_input>
<sample_output><![CDATA[Stan is dishonest
Stan may be honest
]]></sample_output>
<test_input><![CDATA[6
too high
6
too high
3
too low
2
too low
8
too high
10
too high
4
right on
7
too high
7
too high
9
too high
10
too high
1
too low
4
too low
4
right on
3
too low
10
too high
4
too low
2
too low
10
too high
2
too low
5
too low
9
too high
6
too high
6
right on
7
too high
3
too high
7
too high
6
too high
7
too high
7
too high
6
right on
5
too low
3
too low
5
too low
5
too low
4
too low
8
too low
7
too low
9
too low
4
too low
5
too low
3
too low
7
too low
10
too high
10
right on
10
too high
1
too low
9
too high
2
too low
3
too low
3
too low
7
right on
7
too high
10
too high
10
too high
10
too high
8
too high
2
too low
6
too low
8
too high
8
too high
7
too high
7
too high
10
too high
9
too high
3
too low
4
too low
1
too low
6
right on
1
too low
7
too low
9
too low
2
too low
10
too high
5
too low
2
too low
4
too low
6
right on
5
too high
8
too high
4
too high
8
too high
10
too high
3
too high
8
too high
6
too high
5
too high
6
too low
8
too low
4
too low
9
too low
9
too low
9
right on
4
too low
9
too high
1
too low
9
too high
7
right on
8
too low
7
too low
4
too low
4
too low
10
too high
6
too low
1
too low
10
too high
9
right on
3
too low
5
too low
6
too high
9
too high
3
too low
10
too high
5
right on
1
too low
2
too low
6
too high
1
too low
6
too high
7
too high
2
right on
6
too high
7
too high
9
too high
8
too high
5
too high
3
too low
5
right on
9
too low
4
too low
2
too low
4
too low
1
too low
10
too low
7
too low
4
too low
9
too low
6
too low
7
too low
1
too low
5
too low
3
too low
8
too low
7
too low
9
too low
3
too low
3
too low
10
right on
1
too low
8
too low
2
too low
3
too low
10
too high
2
too low
10
too high
8
too high
9
too high
1
right on
9
too high
5
too low
10
too high
2
too low
5
too low
3
too low
1
too low
6
too low
10
too high
3
too low
8
right on
1
too low
1
too low
2
too low
7
too low
6
too low
5
too low
10
too high
7
too low
6
too low
3
too low
5
too low
6
too low
8
too low
9
right on
7
too high
5
too high
7
too high
2
too low
9
too high
10
too high
9
too high
9
too high
9
too high
9
too high
4
too low
9
too high
5
too low
5
right on
1
too low
9
too high
10
too high
4
too low
4
too low
4
too low
7
too low
7
too low
7
right on
7
too low
5
too low
1
too low
9
too low
9
too high
5
too low
10
too high
10
too high
9
too low
2
too low
9
too low
6
too low
10
too high
6
too low
5
too low
10
too high
6
too low
9
right on
8
too low
9
too low
10
too low
10
right on
6
too low
5
too low
1
too low
1
too low
10
too high
3
too low
3
too low
8
too low
8
right on
1
too low
2
right on
8
too high
1
too low
5
too low
5
too low
6
too high
7
too high
7
too high
5
too low
3
too low
10
too high
1
too low
1
too low
1
too low
4
too low
8
too high
7
too high
6
right on
1
too low
10
too high
10
too high
5
too low
1
too low
8
too high
9
too high
1
too low
7
too high
7
too high
10
too high
6
too high
8
too high
6
too high
4
too low
5
right on
10
too high
8
too low
8
too low
2
too low
1
too low
9
too high
9
too high
8
too low
9
too high
10
too high
10
too high
4
too high
4
too low
4
right on
1
too low
2
too low
2
right on
5
too low
6
right on
2
too low
5
too high
9
too high
2
too high
3
too high
10
too high
5
too high
2
right on
9
right on
3
too low
9
right on
6
too high
5
too high
4
too high
10
too high
5
too high
2
too low
1
too low
1
too low
6
too high
10
too high
2
too low
5
too high
6
too high
9
too high
9
too high
3
too low
3
too low
1
too low
5
too low
6
right on
4
too low
5
too low
4
too low
8
too high
6
too low
10
too high
3
too low
8
too high
6
too low
2
too low
4
too low
9
too high
2
too low
7
right on
7
too high
6
too high
9
too high
5
too high
2
too high
6
too high
4
too high
2
too high
1
too high
6
too high
6
too high
10
too high
8
too high
4
too high
7
too high
6
too high
7
too high
1
too high
1
right on
7
too high
2
too high
2
right on
5
too high
3
too low
1
too low
8
too high
1
too low
5
too low
8
too high
3
too low
3
too low
5
too low
7
too high
9
too high
5
right on
4
too low
9
too low
10
right on
3
too low
6
too high
8
too high
8
too high
4
right on
9
too high
4
too high
4
too high
10
too high
7
too high
1
too low
9
too high
9
too high
7
too high
6
too high
2
too low
7
too high
7
too high
10
too high
1
too low
10
too high
2
right on
9
too high
4
right on
8
too low
8
too low
3
too low
2
too low
1
too low
1
too low
10
right on
4
too low
5
too low
1
too low
3
too low
8
too high
7
too high
5
too high
3
too low
8
too high
5
too high
4
right on
8
too high
6
too high
3
too high
4
too high
5
too high
10
too high
2
right on
2
too low
4
too low
3
too low
6
too low
6
too low
1
too low
5
too low
7
too low
3
too low
9
too high
6
too low
7
too low
8
right on
8
too high
3
too high
1
too low
6
too high
1
too low
9
too high
4
too high
8
too high
8
too high
10
too high
10
too high
9
too high
9
too high
1
too low
8
too high
7
too high
3
too high
8
too low
8
right on
8
too low
9
too high
5
too low
7
too low
7
too low
5
too low
8
right on
9
too low
3
too low
6
too low
6
too low
4
too low
8
too low
2
too low
5
too low
9
right on
10
too low
5
too low
3
too low
2
too low
3
too low
3
too low
10
too low
4
too low
7
too low
5
too low
4
too low
8
too high
10
too high
2
too low
3
right on
1
too low
3
too high
2
too high
8
too high
4
too high
1
too low
9
too high
3
right on
3
too low
5
too low
10
too high
9
too high
3
right on
7
too low
1
too low
5
too low
5
too low
7
too low
10
too low
3
too low
1
too low
10
too high
5
too high
9
too high
8
too high
4
too high
6
too high
4
too high
1
too low
4
right on
2
too low
8
too high
6
too high
4
right on
4
too high
2
right on
1
right on
3
too low
10
too high
10
too high
10
too high
2
too low
4
too low
4
too low
5
too high
7
too high
8
too high
3
too low
3
too low
2
too low
5
too low
9
too high
6
right on
8
too high
4
too low
3
too low
7
right on
7
too high
2
too low
7
too high
1
too low
6
too high
1
too low
10
too high
1
too low
5
too low
1
too low
3
too low
1
too low
4
too low
6
right on
10
right on
8
too low
2
too low
1
too low
9
right on
2
too low
1
too low
8
too high
2
too low
4
too low
10
too high
9
too high
7
too high
3
too low
1
too low
6
right on
4
too low
5
too high
10
too high
10
too high
3
too low
7
too high
10
too high
7
too high
2
too low
4
too low
4
right on
4
too high
3
too high
5
too high
10
too high
9
too high
3
too low
5
too high
3
right on
10
too high
6
too high
4
too low
8
too high
8
too high
10
too high
6
too high
5
too high
10
too high
7
too low
2
too low
6
too low
10
too high
9
too high
8
too high
3
too low
10
too high
10
too high
4
too low
8
right on
7
too high
3
too low
5
too low
1
too high
5
too high
8
too high
5
too high
3
too high
1
right on
6
too high
9
too high
6
too high
3
too high
6
too high
10
too high
7
too high
2
too high
4
too high
2
too low
7
too high
3
too high
7
too high
4
too high
7
too high
1
too low
9
too high
2
right on
10
too high
6
right on
1
too low
3
too low
2
too low
8
right on
2
too low
4
too low
6
too low
1
too low
7
too high
9
too high
7
too high
6
too high
7
too high
2
too low
4
too high
3
too low
10
too high
5
too low
1
too low
5
too low
8
too high
6
right on
10
right on
7
too high
1
too low
6
too high
8
too high
8
too high
7
too high
5
too high
4
too high
3
too high
7
too high
10
too high
6
too high
1
right on
5
too low
2
too low
10
too high
7
too low
6
too low
2
too low
8
too low
2
too low
10
too low
9
too low
5
too low
4
too low
9
too high
4
right on
9
too high
5
too low
1
too low
7
too low
3
too low
9
too high
1
too low
10
too high
7
too low
6
too low
9
too high
7
too low
9
too high
3
too low
7
too low
10
too high
1
too low
8
too high
6
too low
8
right on
10
too high
2
too high
4
too high
5
too high
8
too high
4
too high
1
too low
2
right on
8
too high
8
too high
10
too high
4
too high
5
too high
5
too high
6
too high
7
too high
7
too high
7
too high
10
too high
10
too high
6
too high
4
too high
2
right on
4
too low
1
too low
7
too low
4
too low
9
too low
6
too low
5
too low
1
too low
9
too low
10
too high
7
too low
4
too low
4
too low
3
too low
5
too low
1
too low
9
right on
6
too high
7
too high
3
too low
2
too low
2
too low
8
too high
2
too low
2
too low
9
too high
5
right on
10
right on
9
too high
9
too high
3
too high
7
too high
7
too high
1
too low
8
too high
3
too high
1
too low
4
too high
1
too low
4
too high
5
too high
2
right on
4
too high
2
too low
4
too high
6
too high
3
right on
4
too low
9
right on
5
too low
10
too high
3
too low
2
too high
8
too high
7
too high
10
too high
1
too high
9
too high
5
too high
5
too high
8
too high
8
too high
6
too high
1
too low
3
too high
10
too high
2
right on
8
too high
10
too high
3
too low
9
too high
6
too high
7
too high
7
too high
1
too low
1
too low
5
too high
4
right on
2
too low
8
too low
9
too high
8
right on
8
too low
1
too low
2
too low
4
too low
8
too low
3
too low
2
too low
4
too low
9
too high
9
right on
1
too low
7
too low
4
too low
8
too low
4
too low
2
too low
10
too high
5
too low
1
too low
10
too high
8
too low
7
too low
10
too high
3
too low
2
too low
9
right on
9
too low
5
too low
2
too low
1
too low
4
too low
1
too low
1
too low
3
too low
5
too low
10
too high
6
too low
9
right on
7
too high
1
too low
5
too low
6
too high
2
too low
10
too high
1
too low
7
too high
4
too low
7
too high
1
too low
2
too low
9
too high
5
too low
6
too low
2
too low
10
too high
7
right on
3
too low
10
too high
1
too low
8
too high
2
too low
8
too low
10
too high
9
too high
9
too high
6
too low
8
right on
3
right on
8
too high
1
too low
2
too low
9
too high
1
too low
5
too high
6
too high
2
too low
3
too high
4
too high
1
too low
9
too high
3
too high
5
too high
3
right on
1
too low
5
too low
6
too high
8
too high
8
too high
3
too low
9
too high
7
too high
6
right on
1
right on
7
too low
5
too low
3
too low
3
too low
9
too low
8
too low
1
too low
5
too low
5
too low
3
too low
10
too high
10
right on
4
too low
5
too low
1
too low
1
too low
3
too low
5
too low
2
too low
10
too high
1
too low
3
too high
8
too high
10
too high
9
too low
7
too low
2
too low
5
too low
6
too low
10
right on
10
too high
5
too low
7
too low
7
too low
8
too high
10
too high
8
right on
7
too high
8
too high
7
too high
6
too high
8
too high
10
too high
3
too high
1
right on
8
too high
5
too low
2
too low
9
too high
2
too low
3
too low
8
too high
5
too low
6
too low
6
too low
1
too low
8
too high
9
too high
7
too high
2
right on
10
too high
5
right on
3
too low
3
too low
3
too low
4
too low
1
too low
6
too low
7
too low
8
too low
3
too low
10
too high
9
too low
7
too low
7
too low
5
too low
10
too high
7
too low
9
right on
9
too high
5
too low
6
too high
1
too low
1
too low
9
too high
5
too low
9
too high
5
too low
10
too high
8
too high
7
right on
3
too low
3
too low
6
too high
3
too low
8
too high
7
too high
2
too low
1
too low
3
too low
8
too high
7
too high
9
too high
5
too low
8
too high
8
too high
2
too low
8
too high
6
right on
9
right on
2
too low
3
too low
4
too low
3
too low
9
too low
2
too low
1
too low
2
too low
2
too low
1
too low
5
too low
7
too low
3
too low
7
too low
4
too low
10
right on
8
too high
5
too high
9
too high
4
too low
7
too high
6
too high
7
too high
6
right on
6
too low
5
too low
1
too low
3
too low
4
too low
6
too low
6
too low
7
too low
4
too low
1
too low
1
too low
2
too low
4
too low
2
too low
5
too low
2
too low
10
right on
8
too high
6
too high
7
too high
10
too high
3
too high
10
too high
2
too high
4
too high
2
right on
4
too high
7
too high
7
too high
7
too high
1
too low
7
too high
6
too high
5
too high
1
too low
6
too high
10
too high
6
too high
5
too high
7
too high
5
too high
3
right on
7
too high
1
too low
6
too high
3
too low
7
too high
6
too high
5
too high
2
too low
8
too high
1
too low
4
right on
9
too low
8
too low
6
too low
3
too low
9
too high
3
too low
6
too low
7
too low
5
too low
9
right on
4
too high
9
too high
10
too high
2
too high
2
too high
9
too high
3
too high
9
too high
4
too low
2
too low
3
too low
8
too high
2
too low
1
too low
8
too high
8
too high
9
too high
4
right on
2
too high
6
too high
6
too high
4
too high
9
too high
4
too high
1
too low
4
too high
1
right on
6
too high
3
too low
1
too low
10
too high
1
too low
7
too high
5
right on
5
too low
9
too high
8
right on
5
too high
10
too high
9
too high
10
too high
7
too high
9
too high
6
too high
2
too low
2
too low
5
right on
7
too low
6
too low
4
too low
10
too low
8
too low
6
too low
5
too low
10
too high
10
right on
7
too high
3
too high
8
too high
2
too high
2
too low
1
too low
5
too high
8
too high
4
too high
3
too high
4
too high
4
too high
5
too high
1
too low
2
right on
5
too high
1
right on
2
too low
3
too low
6
too low
7
too high
2
too low
1
too low
6
too low
5
too low
7
too high
2
too low
9
too high
10
too high
9
too high
9
too high
1
too low
5
too high
9
too high
7
too high
6
right on
7
too high
6
too high
5
too high
1
too low
8
too high
1
too low
5
right on
5
too low
10
too high
5
too low
1
too low
4
too low
9
too low
10
right on
7
too low
4
too low
4
too low
10
too low
8
too low
10
too high
3
too low
1
too low
1
too low
4
too low
10
too high
5
too low
10
right on
5
too high
3
too high
3
too high
8
too high
10
too high
10
too high
5
too high
9
too high
1
right on
1
too low
9
too high
9
too high
7
too high
5
too high
10
too high
4
too high
1
too low
10
too high
4
too high
2
too high
9
too high
7
too high
7
too high
9
too high
8
right on
6
too high
5
too high
8
too high
3
too high
8
too high
1
too low
10
too high
3
too high
5
too high
1
too low
4
too high
9
too high
9
too high
10
too high
3
too high
9
too high
9
too high
2
too low
9
too high
3
right on
5
too high
3
too high
7
too high
6
too high
5
too high
1
too low
7
too high
4
too high
4
too high
4
too high
9
too high
1
too high
7
too high
8
too high
1
right on
8
too high
4
too high
8
too high
3
too high
8
too high
8
too high
9
too high
8
too high
9
too high
7
too high
10
too high
10
too high
6
too high
1
too low
3
too low
7
too high
3
too high
7
too high
5
too high
3
right on
8
too high
10
too high
3
too low
4
too high
5
too high
5
too high
4
right on
5
too high
5
too high
7
too high
9
too high
1
too low
10
too high
10
too high
2
too low
1
too low
3
too low
3
too low
4
too low
7
right on
1
too low
7
right on
2
too low
8
too high
1
too low
9
too high
4
too low
8
too low
5
too low
3
too low
7
too low
10
too high
5
too low
6
too low
8
right on
5
too low
1
too low
8
right on
1
too low
1
too low
3
too low
9
too high
10
too high
3
too low
6
right on
9
too high
8
too high
5
too high
10
too high
4
too high
1
right on
8
too high
7
too low
1
too low
10
too high
2
too low
4
too low
7
right on
5
too high
10
too high
7
too high
4
too high
7
too high
8
too high
8
too high
8
too high
4
too high
3
too high
8
too high
6
too high
1
too low
4
too high
8
too high
4
too high
1
too low
3
too high
1
right on
5
too high
2
too high
3
too high
9
too high
2
too high
2
too high
8
too high
1
right on
10
right on
4
too low
7
too low
10
too high
5
too low
10
too high
8
too high
8
right on
4
too high
10
too high
4
too high
6
too high
3
too high
4
too high
9
too high
8
too high
6
too high
7
too high
2
too high
1
right on
7
too low
8
too high
1
too low
3
too low
2
too low
3
too low
5
too low
3
too low
4
too low
3
too low
3
too low
6
too low
2
too low
9
too high
5
too low
9
too high
6
too low
5
too low
8
right on
6
too low
6
too low
7
too low
8
too high
8
right on
9
too high
6
too high
4
right on
6
too high
6
too high
10
too high
4
too high
8
too high
2
right on
6
too low
1
too high
3
too high
9
too high
1
too low
1
too high
1
right on
6
too high
4
too low
9
too high
4
too high
10
too high
8
too high
3
too low
1
too low
5
too high
9
too high
2
too low
10
too high
10
too high
2
too low
7
too high
8
too high
4
too high
4
right on
7
too low
5
too low
10
too high
9
too low
9
too low
9
too low
8
too low
9
right on
8
too low
1
too low
3
too low
6
too low
3
too low
8
too low
2
too low
4
too low
7
too low
10
too high
8
too low
4
too low
6
too low
9
too high
7
too low
9
right on
7
too high
10
too high
3
too low
9
too high
6
too high
1
too low
3
too low
2
too low
9
too high
8
too high
2
too low
10
too high
1
too low
7
too low
5
too low
1
too low
10
too high
5
too low
2
too low
9
right on
5
too low
6
too high
3
too high
2
too low
2
too low
4
too high
8
too high
4
too high
3
too high
3
right on
7
too low
2
too low
10
too high
8
too high
8
right on
5
too low
1
too low
10
too high
4
too low
3
too low
6
too low
3
too low
4
too low
8
too high
2
too low
7
right on
5
too low
9
too high
6
too high
9
too high
2
too high
1
right on
10
too high
4
too low
2
too low
7
too low
7
too low
6
too low
6
too low
4
too low
10
too high
8
too low
7
too low
9
right on
3
too low
5
too low
6
too low
6
too low
6
too low
6
too low
4
too low
2
too low
10
too high
2
too low
2
too low
1
too low
6
too low
1
too low
7
too low
8
too low
6
too low
9
right on
10
too high
10
too high
1
too low
5
too high
1
too low
5
too high
6
too high
6
too high
10
too high
7
too high
10
too high
6
too high
8
too high
5
right on
2
too low
10
too high
10
too high
5
too low
3
too low
7
too low
7
right on
9
too high
9
too high
8
too high
7
too high
10
too high
2
too high
10
too high
7
too high
6
too low
7
too low
1
too low
6
too low
9
too high
4
too low
7
too low
7
too low
2
too low
8
right on
10
too high
9
too high
7
too high
3
too low
1
too low
1
too low
3
too low
1
too low
4
too low
4
too high
2
too low
9
too high
5
too high
3
too low
4
right on
8
too high
7
too high
7
too high
9
too high
8
too high
9
too high
10
too high
5
too high
7
too high
8
too high
6
too high
9
too high
2
right on
8
too high
6
too high
5
too high
3
too low
1
too low
1
too low
2
too low
2
too low
10
too high
10
too high
5
too high
4
too low
9
too high
6
too high
2
too low
2
too low
4
right on
7
too high
7
too high
7
too high
10
too high
1
too low
6
too high
8
too high
4
too high
3
too high
8
too high
7
too high
10
too high
3
too high
5
too high
1
too low
7
too high
3
too high
5
too high
10
too high
1
right on
8
too high
7
too high
10
too high
8
too high
7
right on
3
too low
8
too low
8
too low
2
too low
1
too low
7
too low
1
too low
9
right on
10
right on
1
too low
7
too high
1
too low
7
too high
7
too high
3
too low
2
too low
3
too low
2
too low
4
too low
1
too low
1
too low
3
too low
8
too high
8
too high
2
too low
1
too low
7
too high
6
right on
5
too high
10
too high
6
too high
4
too high
1
too low
10
too high
9
too high
1
too low
9
too high
3
too low
3
right on
9
too high
4
too low
7
right on
3
too high
5
too high
2
too high
7
too high
9
too high
7
too high
6
too high
1
right on
3
too high
7
too high
1
too low
3
right on
3
too high
3
too low
6
too high
3
too high
8
too high
4
too high
4
too high
1
too low
2
too low
6
too high
3
too high
3
too low
3
right on
9
too high
10
too high
5
too low
1
too low
1
too low
9
too high
6
too high
1
too low
7
too high
9
too high
9
too high
5
too high
10
too high
9
too high
2
too high
2
right on
1
too low
7
too high
6
right on
4
too high
8
too high
8
too high
4
too high
8
too high
4
too high
7
too high
6
too high
9
too high
8
too high
1
right on
1
too low
8
too high
5
too low
6
right on
6
too low
10
too high
10
too high
7
too high
6
too low
8
too high
7
too high
7
too high
6
too low
8
too high
6
too low
2
too low
2
too low
7
too high
5
too low
7
right on
4
too low
8
too low
10
too high
5
too low
5
too low
5
too low
1
too low
8
right on
6
too low
5
too low
6
too low
6
too low
10
too high
3
too low
2
too low
5
right on
8
right on
1
too high
9
too high
4
too high
1
too low
10
too high
7
too high
8
too high
2
too high
2
too high
10
too high
2
too high
3
too high
3
too high
8
too high
6
too high
2
too high
1
right on
8
too high
1
too low
4
too low
9
too low
4
too low
6
too low
8
too low
1
too low
10
right on
4
too low
9
too high
1
too low
2
too low
1
too low
10
too high
1
too low
4
too low
10
right on
5
too low
4
too low
9
too low
4
too low
2
too low
2
too low
3
too low
10
right on
8
too high
6
too high
7
too high
2
right on
5
too low
10
too high
6
too high
7
too high
2
too low
5
too low
3
too low
4
too low
8
too high
5
right on
8
too high
8
too high
6
too low
7
too high
5
too low
2
too low
10
too high
2
too low
5
too low
10
too high
6
too low
3
too low
8
too high
7
too high
3
too low
1
too low
6
right on
7
too low
10
too high
4
too low
8
too low
3
too low
3
too low
3
too low
7
too low
9
too low
9
too high
6
too low
9
too low
10
too high
7
too low
6
too low
6
too low
7
too low
6
too low
9
right on
6
too high
1
too low
7
too high
8
too high
7
too high
6
too high
3
too low
3
too low
1
too low
9
too high
6
too high
4
right on
1
too low
1
too low
8
too high
9
too high
2
right on
4
too low
4
too low
8
too low
9
too high
2
too low
9
too high
1
too low
3
too low
7
too low
5
too low
8
too high
1
too low
3
too low
5
too low
6
too low
4
too low
10
too high
8
right on
10
too high
2
right on
7
too low
3
too low
9
too high
6
too low
10
too high
8
too high
6
too low
8
too high
10
too high
10
too high
7
right on
1
too low
2
too low
8
too low
3
too low
10
right on
1
too low
9
too high
6
too low
2
too low
10
too high
7
too low
9
right on
6
too low
2
too low
1
too low
10
too high
7
right on
7
too low
5
too low
1
too low
8
right on
3
too low
1
too low
1
too low
7
too high
9
too high
5
too high
2
too low
3
right on
2
too low
10
too low
10
too low
5
too high
5
too low
10
too high
4
too low
1
too low
5
too high
9
too high
5
too high
5
right on
8
too high
10
too high
4
too high
6
too high
5
too high
4
too high
9
too high
10
too high
7
too high
9
too high
10
too high
10
too high
10
too high
10
too high
10
too high
4
too high
7
too high
4
too low
4
right on
1
too low
4
too low
8
too high
2
too low
4
too low
6
too low
5
too low
6
right on
0
]]></test_input>
<test_output><![CDATA[Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan is dishonest
Stan may be honest
Stan may be honest
Stan is dishonest
Stan is dishonest
Stan is dishonest
Stan is dishonest
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
<solution language="C"><![CDATA[#include <stdio.h>
#include <string.h>

char buf[1000];
char couldbe[20];


main(){
   memset(couldbe,1,sizeof(couldbe));
   while (gets(buf) && strcmp(buf,"0")) {
      int i, n = atoi(buf);
      gets(buf);
      if (!strcmp(buf,"too high")) {
         for (i=n;i<=10;i++) couldbe[i] = 0;
      } else if (!strcmp(buf,"too low")) {
         for (i=1;i<=n;i++) couldbe[i] = 0;
      } else {
         if (couldbe[n]) printf("Stan may be honest\n");
         else printf("Stan is dishonest\n");
         memset(couldbe,1,sizeof(couldbe));
      }
   }
   if (strcmp(buf,"0")) printf("missing input terminator\n");
}]]></solution>
<spj><![CDATA[]]></spj>
</item>
</fps>