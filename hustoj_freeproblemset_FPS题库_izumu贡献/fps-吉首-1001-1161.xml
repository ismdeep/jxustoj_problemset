<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE fps PUBLIC
       "-//FreeProblemSet//EN"
       "http://freeproblemset.googlecode.com/svn/trunk/fps.current.dtd">
       
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[2^k进制数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">设r是个2^k 进制数，并满足以下条件： <br />
（1）r至少是个2位的2^k 进制数。 <br />
（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。 <br />
（3）将r转换为2进制数q后，则q的总位数不超过w。 <br />
在这里，正整数k（1&le;k&le;9）和w（k〈w&le;30000）是事先给定的。 <br />
<br />
问：满足上述条件的不同的r共有多少个？ <br />
我们再从另一角度作些解释：设S是长度为w 的01字符串（即字符串S由w个&ldquo;0&rdquo;或&ldquo;1&rdquo;组成），S对应于上述条件（3）中的q。将S从右起划分为若干个长度为k 的段，每段对应一位2^k进制的数，如果S至少可分成2段，则S所对应的二进制数又可以转换为上述的2^k 进制数r。 <br />
例：设k=3，w=7。则r是个八进制数（2^3=8）。由于w=7，长度为7的01字符串按3位一段分，可分为3段（即1，3，3，左边第一段只有一个二进制位），则满足条件的八进制数有： <br />
2位数：高位为1：6个（即12，13，14，15，16，17），高位为2：5个，&hellip;，高位为6：1个（即67）。共6+5+&hellip;+1=21个。 <br />
3位数：高位只能是1，第2位为2：5个（即123，124，125，126，127），第2位为3：4个，&hellip;，第2位为6：1个（即167）。共5+4+&hellip;+1=15个。 <br />
所以，满足要求的r共有36个。 </font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">只有1行，为两个正整数，用一个空格隔开： <br />
k w </font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">1行，是一个正整数，为所求的计算结果，即满足条件的不同的r的个数（用十进制数表示），要求最高位不得为0，各数字之间不得插入数字以外的其他字符（例如空格、换行符、逗号等）。 <br />
（提示：作为结果的正整数可能很大，但不会超过200位） </font></p>]]></output>
<sample_input><![CDATA[3  7]]></sample_input>
<sample_output><![CDATA[36]]></sample_output>
<test_input><![CDATA[2 8]]></test_input>
<test_output><![CDATA[4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[Cylinder]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">Using a sheet of paper and scissors, you can cut out two faces to form a cylinder in the following way: <br />
<br />
<br />
Cut the paper horizontally (parallel to the shorter side) to get two rectangular parts. <br />
<br />
From the first part, cut out a circle of maximum radius. The circle will form the bottom of the cylinder. <br />
<br />
Roll the second part up in such a way that it has a perimeter of equal length with the circle's circumference, and attach one end of the roll to the circle. Note that the roll may have some overlapping parts in order to get the required length of the perimeter. <br />
<br />
Given the dimensions of the sheet of paper, can you calculate the biggest possible volume of a cylinder which can be constructed using the procedure described above? </font><br />
<br />
</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">The input consists of several test cases. Each test case consists of two numbers w and h (1 &le; w &le; h &le; 100), which indicate the width and height of the sheet of paper. <br />
<br />
The last test case is followed by a line containing two zeros. <br />
</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">For each test case, print one line with the biggest possible volume of the cylinder. Round this number to 3 places after the decimal point. </font><br />
<br />
</p>]]></output>
<sample_input><![CDATA[10 10
10 50
10 30
0 0

]]></sample_input>
<sample_output><![CDATA[54.247
785.398
412.095

]]></sample_output>
<test_input><![CDATA[24 26
3 100
4 77
40 65
38 85
23 43
34 66
12 44
44 51
22 65
34 48
11 22
34 90
12 69
56 56
6 49
52 70
45 50
60 97
21 64
77 81
72 88
19 89
42 44
74 88
34 40
43 45
70 81
34 92
5 36
1 56
8 8
12 90
39 73
25 30
53 62
17 56
37 50
92 92
2 10
1 10
51 80
35 87
74 100
11 93
37 57
32 65
21 83
44 56
22 81
8 97
11 49
55 86
97 98
45 94
14 96
6 41
48 97
5 95
18 82
23 94
3 30
54 93
18 50
4 10
42 92
32 83
82 84
47 76
87 87
11 23
40 46
40 64
17 44
6 46
57 82
41 51
41 45
20 52
63 81
37 51
63 78
38 95
22 86
43 93
17 32
13 54
86 86
8 61
66 86
58 73
18 74
38 43
1 72
66 88
28 61
9 12
31 98
34 47
30 89
27 44
48 88
38 73
65 77
48 61
29 70
15 82
23 50
26 53
23 36
66 97
29 31
6 79
51 100
17 95
23 89
71 96
68 95
28 94
26 100
62 83
99 99
38 60
24 59
12 42
90 91
9 54
17 63
32 54
27 30
55 98
56 74
62 77
30 49
48 80
21 26
64 68
5 74
18 95
33 82
1 64
13 73
33 70
31 63
32 92
26 68
4 45
59 65
8 30
52 84
38 81
71 78
57 68
67 97
53 84
79 100
51 53
76 83
46 65
35 45
45 49
60 69
13 47
59 63
58 78
27 69
45 83
53 73
42 85
15 65
47 56
26 31
16 50
86 93
45 58
56 66
39 67
23 90
46 49
69 90
22 52
11 30
17 19
20 93
4 32
3 66
45 48
15 64
17 28
33 87
23 40
34 95
12 40
56 59
47 62
59 62
40 66
11 15
32 47
56 93
16 75
20 46
22 82
24 35
13 43
55 74
25 68
90 95
48 91
93 93
79 88
44 44
11 67
62 68
30 86
47 88
31 89
24 45
19 38
12 29
19 91
5 7
1 63
71 94
5 24
54 63
47 47
41 53
10 36
6 16
18 76
23 57
22 96
36 62
51 57
66 72
1 3
18 45
15 42
39 96
67 85
60 61
5 87
17 59
63 65
37 58
40 59
51 68
21 61
30 99
10 27
16 59
2 29
57 81
26 45
29 58
21 68
13 52
5 54
26 30
26 26
18 56
33 83
4 58
9 97
19 60
1 26
10 58
39 43
19 47
95 98
16 68
1 57
54 56
36 43
12 30
59 80
32 46
3 73
10 29
36 69
4 17
8 92
2 16
18 67
79 93
48 86
21 85
44 84
1 36
21 98
31 44
33 45
12 26
70 91
92 99
36 41
28 49
25 78
81 100
53 89
29 86
77 100
18 20
23 28
5 20
36 56
37 66
1 43
12 84
25 77
21 44
16 80
9 36
2 20
15 16
13 60
30 41
82 95
43 78
11 79
9 95
1 81
12 63
33 74
7 67
11 55
41 59
38 88
70 73
14 69
14 46
10 22
18 60
10 51
7 79
44 74
50 74
34 37
50 57
39 72
36 51
42 96
46 92
9 32
13 58
40 55
35 75
45 62
1 68
65 71
45 69
82 91
39 58
31 33
90 96
6 8
18 41
52 75
30 75
13 84
51 77
12 20
46 97
66 95
6 51
22 39
68 78
43 70
32 85
71 76
68 93
35 41
15 49
47 65
49 95
57 100
17 62
73 92
3 33
80 83
38 97
6 39
42 99
9 23
34 82
19 56
64 77
10 43
16 16
15 72
47 64
31 46
42 77
27 63
33 68
87 100
9 88
78 95
38 64
86 87
17 78
2 3
61 63
13 80
36 48
3 69
36 83
21 60
8 51
28 68
61 82
44 85
44 100
10 84
40 99
49 82
3 31
1 96
41 62
27 70
45 53
70 71
5 41
40 48
30 80
83 98
7 23
42 63
8 91
61 75
33 90
10 92
54 76
5 66
45 61
49 72
31 83
78 83
50 98
54 85
18 93
37 89
20 25
22 32
92 96
11 31
30 34
9 82
19 78
80 96
38 61
48 85
71 71
23 87
54 66
43 59
39 64
59 85
19 55
43 55
3 9
56 68
32 36
32 82
23 66
21 91
35 68
4 94
12 97
67 92
8 58
19 77
36 99
24 89
34 59
23 34
29 52
39 49
69 74
39 62
6 97
43 46
24 62
44 83
52 74
2 26
14 53
3 55
3 56
21 23
32 38
46 77
58 79
62 67
1 80
22 68
6 76
22 66
78 85
22 64
20 53
46 56
4 5
6 100
64 91
9 67
26 85
42 74
26 59
59 98
66 83
73 83
42 45
10 68
27 99
11 14
23 88
15 15
19 34
72 92
84 91
10 95
61 98
37 49
17 34
23 41
63 89
39 77
54 96
34 53
36 45
27 68
14 67
25 39
68 84
28 70
26 86
5 67
39 42
23 96
8 14
2 58
86 100
51 83
9 40
65 78
2 24
2 31
8 45
28 47
5 43
21 39
42 89
38 87
45 63
73 76
30 47
84 93
46 58
2 95
40 62
5 59
9 66
41 42
13 27
53 96
28 62
8 32
29 100
26 46
1 44
84 99
35 46
46 55
56 78
59 88
26 78
11 99
57 66
54 86
35 74
67 79
48 100
8 26
32 88
35 43
15 52
74 93
50 73
61 100
13 59
51 70
1 83
10 59
14 35
28 51
26 99
79 89
34 61
15 23
50 85
84 98
57 60
45 56
3 50
68 82
43 52
53 83
77 78
9 18
28 63
66 76
22 94
9 22
17 47
22 97
36 72
2 75
43 51
40 85
12 35
65 90
24 91
48 79
73 79
64 74
52 83
17 88
15 67
3 38
5 47
13 79
45 68
12 12
24 65
6 63
38 86
41 94
90 99
7 30
74 84
93 95
2 19
21 43
72 72
33 62
86 96
30 52
31 85
44 67
42 52
3 51
18 48
1 69
20 100
52 73
75 94
54 77
17 96
11 13
15 33
20 54
60 65
24 69
50 59
57 99
45 52
4 79
46 96
21 92
17 65
57 62
44 47
25 61
14 26
7 83
6 65
10 72
8 81
42 53
47 98
25 43
64 69
11 97
26 54
44 58
12 89
26 38
12 28
85 93
17 82
40 78
41 68
23 47
30 71
50 62
62 89
12 34
61 76
94 95
38 41
17 51
30 48
29 74
9 89
15 88
4 51
84 90
26 69
81 95
44 73
10 57
12 64
35 58
4 20
69 82
8 63
53 74
19 74
20 87
4 15
1 99
85 88
6 11
5 25
1 97
47 96
42 49
19 62
27 54
12 95
8 25
3 42
36 97
7 99
35 42
4 40
2 9
21 95
5 56
54 69
36 89
15 43
12 60
51 72
27 84
9 56
28 91
88 89
31 69
13 17
6 44
4 48
13 85
5 27
84 88
21 27
41 85
48 59
30 69
24 82
35 85
15 95
32 55
18 90
60 92
13 32
31 60
32 41
21 81
22 30
68 81
24 36
33 84
37 78
48 87
40 100
23 42
92 100
44 63
46 52
38 75
48 53
35 39
74 81
76 92
31 42
13 51
41 67
13 42
23 49
14 58
23 31
33 69
75 81
54 83
43 86
23 48
56 87
49 60
13 99
84 94
46 72
27 100
34 77
24 99
2 55
60 98
63 66
41 78
60 62
39 51
43 49
30 59
24 85
45 82
75 76
23 100
45 66
21 48
3 12
55 60
3 37
9 68
17 57
36 91
74 80
18 88
1 20
1 18
22 87
16 30
88 99
17 29
9 90
43 71
35 64
22 73
32 44
67 70
68 83
28 45
37 48
32 43
67 91
49 85
28 52
18 70
4 67
23 35
79 83
10 87
6 72
85 89
28 90
57 75
62 70
85 97
59 77
50 88
3 24
17 26
55 72
2 91
65 91
75 95
19 59
60 72
21 29
4 12
49 80
36 60
34 63
4 42
13 55
11 58
1 34
19 87
30 54
3 14
51 95
23 95
13 33
65 74
77 97
27 88
23 33
51 67
36 63
25 76
80 86
25 33
28 36
4 76
29 61
3 57
13 21
66 98
17 30
23 92
36 58
18 87
10 67
20 37
30 96
25 55
73 87
53 61
16 78
7 28
10 25
26 83
46 85
72 75
21 70
6 62
50 80
62 87
44 90
79 94
9 13
30 62
14 56
59 67
62 93
9 19
50 61
10 19
83 86
60 100
68 98
49 68
48 84
16 45
20 76
37 83
37 94
73 100
66 70
27 91
6 67
69 87
3 27
4 86
44 98
2 77
16 25
9 10
92 98
34 75
10 78
69 77
69 85
16 89
27 45
35 66
57 84
64 79
46 73
7 92
15 39
65 75
15 22
79 91
39 97
21 40
58 75
14 28
17 36
12 19
1 48
14 66
2 14
36 93
56 81
57 77
25 41
7 64
74 96
17 97
40 93
32 56
29 71
9 39
70 77
10 31
4 84
28 78
35 36
40 81
7 22
12 27
13 64
66 77
63 75
18 40
61 90
77 98
60 78
75 99
17 98
5 57
53 81
28 86
3 79
1 75
79 98
13 88
3 78
14 19
35 77
64 65
45 88
15 84
22 77
21 58
31 92
65 66
26 72
1 59
17 86
20 80
12 96
17 61
88 90
53 54
2 89
4 9
14 27
9 85
11 80
18 99
45 46
34 45
60 90
34 57
79 85
21 30
14 78
53 87
25 96
47 52
8 89
12 91
22 95
83 85
56 75
13 95
51 92
38 45
66 87
54 81
51 88
61 64
15 97
19 82
4 98
1 67
75 96
42 71
19 27
11 74
35 61
22 78
22 71
13 76
4 21
72 81
18 100
41 43
55 76
81 82
30 57
59 70
53 90
3 60
41 98
59 78
23 82
15 73
72 100
51 99
21 25
57 95
61 95
33 88
36 86
19 81
20 63
10 26
76 85
23 78
7 90
30 78
73 94
26 50
2 76
44 68
13 81
76 82
25 63
27 46
36 55
8 65
64 75
20 85
56 58
58 63
12 66
12 65
11 65
15 56
55 78
15 35
4 16
28 89
10 69
34 41
7 56
77 80
18 51
8 38
44 80
39 99
8 36
51 52
23 39
4 72
22 62
20 98
16 53
26 60
54 65
24 25
23 65
44 62
3 87
58 64
53 95
9 79
38 80
48 67
28 55
38 67
24 76
67 90
19 45
5 44
1 60
63 92
7 42
8 82
30 77
14 48
31 38
63 84
4 23
14 38
57 67
2 80
13 44
33 41
1 25
58 84
6 81
46 50
7 85
12 100
7 26
43 76
34 54
56 94
14 29
27 78
51 93
2 78
17 21
45 93
9 70
44 61
63 91
23 58
69 86
34 83
30 72
37 76
8 87
32 75
54 97
47 79
41 54
9 46
36 84
7 69
48 81
32 58
12 70
17 69
14 73
63 63
21 62
59 92
52 94
28 33
43 72
27 43
60 75
29 39
1 24
31 97
34 85
41 75
35 35
21 84
74 99
80 97
63 76
19 20
61 84
65 80
17 58
47 75
48 50
24 90
24 51
41 95
74 89
11 46
11 20
7 14
61 88
14 34
2 85
37 86
64 70
47 74
10 32
42 68
85 85
52 72
63 86
72 99
55 94
15 100
36 42
1 86
60 71
14 92
36 79
91 98
20 27
58 60
12 41
51 78
27 93
66 67
72 90
14 39
45 89
32 57
4 18
2 51
89 96
51 55
14 61
88 88
52 60
45 97
37 88
6 66
51 76
49 69
20 99
47 90
85 99
60 79
1 89
25 65
19 53
59 75
2 22
37 65
25 34
7 87
61 62
9 57
2 72
50 81
16 18
38 78
21 31
4 62
14 18
6 15
4 95
22 69
16 77
19 96
32 95
34 87
20 20
14 49
15 21
27 67
33 57
28 64
27 97
8 83
24 80
74 95
21 71
51 90
37 96
35 82
59 91
46 51
20 45
26 87
39 70
28 40
20 39
24 57
44 93
14 88
69 99
23 45
1 29
26 65
5 75
66 68
12 39
16 83
16 21
23 85
2 87
22 58
8 96
50 65
22 60
51 73
16 85
43 88
9 93
40 95
9 81
71 80
47 66
58 74
77 92
39 55
6 6
48 62
70 96
14 43
16 58
26 62
1 94
28 95
51 69
2 33
41 46
70 100
75 80
73 96
24 67
8 11
45 65
9 15
2 96
53 72
97 99
1 62
41 72
52 93
23 23
56 100
15 63
57 73
45 77
29 83
47 100
30 84
83 96
19 80
40 87
42 42
53 77
34 84
34 50
63 99
28 32
52 77
30 39
81 81
65 98
33 44
3 85
16 32
16 52
48 82
18 52
42 90
26 97
4 49
15 93
2 27
39 83
26 66
21 34
5 65
38 56
37 100
26 61
6 23
19 83
10 65
16 86
69 71
6 19
5 52
54 64
10 85
31 72
38 76
24 42
56 90
19 93
16 91
52 61
76 97
15 98
37 64
11 84
5 45
28 39
32 77
37 56
11 27
52 76
72 97
28 81
61 85
2 57
1 95
78 96
50 83
63 95
31 40
7 78
1 19
50 79
34 80
55 73
5 76
50 56
87 92
4 69
64 87
70 86
13 98
59 66
25 90
27 29
9 33
62 90
29 56
15 57
19 85
86 94
46 86
27 62
34 76
42 57
8 41
79 82
5 80
33 98
47 86
11 62
15 74
5 92
5 37
61 81
15 24
3 91
43 73
15 75
46 90
54 58
16 87
30 68
9 58
44 76
66 80
12 24
54 73
40 69
6 87
57 76
23 68
1 5
41 83
27 60
52 91
21 33
27 87
7 76
46 98
33 40
55 56
12 21
69 69
1 55
27 55
31 34
63 93
16 64
51 79
30 79
25 73
35 93
24 55
22 70
29 32
3 45
36 77
41 49
43 95
27 39
65 81
44 96
32 33
42 55
40 53
84 86
19 37
31 99
8 21
7 59
6 99
23 62
44 70
29 69
40 41
80 98
61 73
3 49
38 96
8 68
23 76
14 25
40 70
4 66
9 9
33 77
32 45
54 68
2 28
78 86
82 94
31 95
2 53
92 95
8 19
8 84
33 96
22 92
50 68
56 82
40 76
5 28
2 50
27 37
73 85
57 65
56 96
16 37
50 60
31 32
84 92
40 91
13 72
54 75
42 88
35 50
4 37
6 69
32 40
74 94
4 4
73 90
12 75
14 71
38 42
36 44
29 54
57 89
20 77
61 99
96 97
53 94
12 55
5 22
11 38
25 83
13 91
64 81
11 28
2 99
20 70
65 97
5 32
27 76
5 55
86 89
82 97
46 47
53 65
21 69
24 37
56 72
71 84
49 81
23 84
25 92
59 71
48 74
27 34
4 53
23 60
34 97
77 79
33 89
63 64
4 7
6 70
26 27
46 91
6 26
16 19
4 87
30 38
11 34
42 43
9 72
91 94
27 89
42 75
27 80
20 74
33 79
36 73
7 50
36 66
72 95
74 90
8 86
35 47
15 87
10 88
26 88
91 95
18 96
91 91
4 65
72 83
11 12
60 88
14 14
30 45
18 57
20 60
10 83
7 52
57 85
1 2
44 88
20 29
33 54
54 60
57 80
16 67
55 58
10 86
29 98
22 34
7 57
4 70
55 65
10 94
50 52
44 72
19 69
68 87
19 90
46 62
3 52
38 84
15 61
33 56
62 63
10 44
24 88
23 26
42 62
9 83
70 90
71 91
19 21
26 58
90 93
53 71
19 100
50 58
12 17
9 35
33 33
15 60
68 76
23 63
40 49
3 47
34 60
42 73
8 29
7 29
41 65
6 54
6 94
13 41
3 76
78 88
50 90
7 25
8 62
11 25
11 16
58 76
22 24
42 51
36 59
46 82
8 47
50 67
10 100
4 83
14 87
22 25
72 82
5 17
19 84
46 57
5 72
22 23
24 58
8 85
7 24
19 28
51 54
4 78
35 95
14 89
59 81
28 74
32 68
77 94
44 50
76 95
50 96
24 72
71 83
88 94
7 100
80 80
62 76
36 76
72 87
37 59
56 61
9 45
32 67
38 74
22 22
3 10
36 65
54 92
9 31
76 94
9 20
28 97
66 75
45 73
14 64
12 56
30 66
77 90
2 81
54 62
5 63
34 79
13 100
49 55
6 88
50 94
6 58
13 92
37 75
73 95
15 31
4 35
20 23
64 84
16 81
65 99
45 76
6 92
30 65
32 63
40 40
21 21
13 48
66 100
27 75
59 73
55 64
24 49
32 79
49 59
21 75
77 83
32 64
68 77
11 91
10 42
5 35
24 46
4 97
33 61
34 70
73 80
35 59
81 96
38 57
6 13
11 35
20 65
23 79
10 34
24 73
25 84
30 94
52 54
26 47
23 69
16 42
67 71
20 89
27 66
34 96
41 63
9 43
20 84
53 53
35 99
45 95
4 52
62 73
28 98
62 91
65 67
11 19
7 94
14 85
18 30
2 71
11 75
40 80
41 61
29 41
12 13
78 91
16 74
47 58
59 87
20 36
93 97
10 45
42 67
79 79
30 61
41 66
54 89
24 97
9 30
29 84
21 35
30 42
29 72
18 46
50 100
14 44
9 37
4 54
28 85
56 73
48 78
14 83
15 91
33 67
43 84
65 73
9 84
57 71
3 58
11 11
32 34
24 41
30 60
41 70
49 91
34 73
22 51
62 97
53 97
1 38
37 69
54 99
70 99
14 59
26 51
37 52
16 46
45 72
13 62
7 38
58 61
41 77
35 60
89 92
44 95
19 75
57 88
49 93
49 51
61 74
27 51
47 80
4 30
12 61
47 71
15 80
70 80
6 31
11 87
7 9
22 35
75 91
56 63
45 55
69 100
43 66
7 68
6 36
49 61
12 76
13 82
45 100
36 75
73 98
23 52
47 91
57 59
11 82
5 8
47 68
53 85
25 72
10 66
9 48
2 52
20 90
66 99
1 8
46 99
14 54
24 66
27 49
39 95
6 33
55 87
23 27
32 98
53 69
24 44
33 36
11 63
6 57
21 93
6 42
18 77
12 36
25 42
38 82
36 74
57 69
94 96
29 87
23 24
5 49
34 86
38 44
35 44
8 39
51 75
63 98
9 62
11 36
16 51
1 90
82 85
24 39
5 33
35 83
38 47
80 94
95 97
16 43
39 88
71 88
31 70
39 86
5 15
47 83
22 89
13 78
6 43
20 62
11 29
46 53
49 63
66 91
41 58
50 54
31 73
32 49
8 9
48 58
7 32
17 81
24 87
40 68
37 68
44 54
45 87
41 100
42 94
29 99
46 93
61 93
47 81
67 95
56 71
32 99
6 59
10 89
2 60
6 73
77 87
30 76
68 89
38 53
8 54
13 16
58 100
25 40
15 96
25 80
55 63
59 60
17 99
11 73
49 74
32 93
69 73
16 28
51 85
8 78
67 74
58 67
24 84
55 82
38 77
24 92
97 97
35 96
15 78
80 81
65 84
73 97
5 69
11 17
46 79
60 66
24 71
33 52
57 79
62 78
82 88
36 96
48 73
82 92
37 47
18 86
5 64
64 71
1 54
44 66
56 64
43 80
35 71
83 88
29 88
7 65
59 99
58 86
41 69
33 78
25 95
43 89
61 69
39 82
7 21
18 32
32 74
1 28
49 78
18 53
5 100
9 42
79 92
61 96
24 47
74 77
10 15
7 97
25 87
64 92
2 82
31 47
60 87
32 73
36 90
63 96
33 91
26 39
19 76
30 50
31 67
48 89
42 83
32 66
10 64
70 92
76 90
10 49
28 60
81 97
46 87
87 93
58 66
63 68
90 100
39 52
41 92
39 60
8 90
22 85
29 44
1 79
40 86
2 43
50 91
53 98
70 95
63 70
35 91
36 82
43 67
61 97
60 74
21 38
60 77
46 63
29 91
52 86
67 81
26 77
63 90
9 26
55 61
36 54
24 100
67 83
47 73
71 93
4 44
31 82
59 96
12 92
21 32
23 99
26 75
39 63
57 92
68 85
82 86
50 70
8 44
8 100
42 46
27 73
24 70
46 81
63 77
38 59
45 45
38 79
58 62
17 37
25 64
80 92
2 64
63 94
81 90
31 80
8 53
27 47
43 57
4 92
24 86
35 97
30 53
32 52
45 86
64 86
12 37
94 97
8 56
21 90
40 94
66 92
51 71
5 83
63 71
2 32
36 80
10 33
20 91
15 19
44 81
64 64
21 96
41 88
1 33
11 40
6 98
2 90
24 93
20 28
74 86
24 28
43 62
13 18
64 96
23 30
49 77
18 72
77 99
26 44
29 34
22 28
40 51
25 62
9 96
34 81
26 67
75 83
50 89
28 100
53 86
69 88
84 87
53 63
47 82
10 73
43 97
24 95
16 72
13 26
12 94
45 57
53 99
32 48
24 48
49 100
46 68
37 93
58 97
3 34
37 39
7 96
14 80
65 96
46 64
38 55
29 51
29 53
44 69
17 70
3 23
44 53
39 98
45 84
31 74
28 84
5 30
76 80
23 56
53 76
47 49
11 83
7 18
67 67
83 83
21 88
42 64
3 26
36 36
69 76
59 97
72 93
39 93
55 100
45 79
21 76
21 42
26 55
84 89
1 35
62 100
1 92
7 16
35 53
25 37
38 40
29 47
15 79
57 90
2 48
76 81
54 74
2 74
58 70
23 38
49 70
18 97
43 79
61 66
46 94
35 90
15 34
48 57
77 88
20 51
23 77
35 70
50 92
47 59
50 55
57 70
3 17
61 87
67 76
67 96
60 81
78 89
4 89
69 89
18 54
22 76
2 45
37 92
1 15
43 63
30 35
8 27
33 48
13 28
75 85
35 52
47 60
68 97
55 62
18 98
60 64
3 74
54 91
76 84
71 72
95 96
16 35
75 75
51 60
45 54
30 95
27 53
91 96
79 97
6 74
37 98
14 100
69 91
3 90
35 98
55 70
3 8
13 77
61 72
22 48
29 94
24 56
22 74
19 88
11 96
10 28
3 5
11 43
42 86
53 57
7 61
9 24
26 32
31 52
8 10
41 81
52 81
24 96
28 87
50 75
25 89
1 1
20 57
41 57
2 59
3 40
37 44
34 99
69 93
62 72
13 61
51 63
33 58
58 68
33 49
2 86
44 75
37 42
13 40
92 93
41 73
43 44
20 79
13 69
38 38
3 92
25 88
36 67
27 36
39 85
70 75
56 76
74 76
5 48
40 67
29 37
4 43
39 66
28 28
18 47
35 62
2 38
68 72
4 93
3 80
21 46
22 72
8 40
50 66
51 91
60 73
18 21
11 26
18 63
65 76
3 99
42 56
6 93
54 57
40 50
18 31
17 76
18 37
62 66
13 22
57 64
8 74
25 35
43 61
4 73
59 76
13 50
14 94
59 59
75 88
5 26
32 72
24 79
40 47
18 33
13 29
24 34
67 73
12 81
53 70
95 99
65 82
58 88
16 24
27 59
25 98
24 50
72 98
10 21
33 37
17 74
35 100
54 72
31 81
16 82
9 34
36 49
47 63
40 58
21 56
94 94
36 87
97 100
9 87
33 85
58 96
23 44
4 59
23 75
18 27
24 60
27 64
68 100
60 86
38 70
26 42
43 58
5 18
9 44
80 88
15 54
31 64
44 64
7 27
44 65
3 16
34 49
54 95
73 99
11 24
26 94
15 81
41 52
64 80
49 76
46 71
84 100
70 89
75 78
27 58
1 52
19 73
11 72
39 91
6 18
72 91
17 72
11 64
64 67
56 77
17 85
61 83
89 97
3 71
32 87
25 74
31 31
19 39
21 97
14 74
31 91
60 96
19 33
85 95
65 79
71 82
47 97
11 50
5 34
5 94
7 80
36 52
42 78
53 75
67 72
27 83
71 74
9 28
17 41
15 36
5 60
26 37
85 90
54 98
55 85
15 38
75 98
69 75
91 99
39 69
76 76
15 41
83 87
20 34
69 98
22 91
36 68
90 98
34 65
73 77
34 58
56 98
2 30
37 90
10 23
43 64
38 71
41 97
2 5
20 61
33 66
52 95
89 99
10 90
13 39
18 44
51 66
14 91
59 68
28 71
31 66
71 73
17 22
15 29
47 99
4 56
36 81
25 27
64 88
62 81
17 31
47 53
31 61
47 95
16 69
7 40
33 76
10 47
40 89
87 88
63 72
28 75
15 25
16 66
83 89
27 50
44 59
57 96
43 90
7 35
62 95
7 71
21 51
36 38
78 81
19 98
48 75
65 83
5 13
47 50
4 41
78 90
57 91
28 50
1 12
70 74
29 73
30 81
31 48
28 96
21 63
88 97
63 97
12 59
3 53
70 78
48 68
36 71
64 78
20 83
1 32
69 95
1 41
24 32
26 93
12 48
49 49
24 61
70 85
39 53
96 98
31 86
15 20
46 59
7 15
11 69
73 75
73 88
18 91
55 97
56 88
14 65
7 43
7 95
38 62
52 80
21 36
16 88
43 87
14 36
45 99
22 43
17 20
45 92
35 56
66 96
25 25
61 67
6 52
54 84
54 67
13 37
3 28
23 80
11 52
57 58
4 39
71 75
16 62
11 53
10 12
13 83
14 68
59 95
1 77
30 92
30 97
6 27
29 67
18 80
21 50
29 95
12 82
17 40
62 75
29 89
5 85
22 57
41 74
57 63
52 66
15 27
81 85
22 26
18 36
17 77
83 99
71 92
36 47
23 86
39 48
8 72
10 35
19 68
12 71
65 93
34 71
17 33
42 47
19 32
33 63
56 91
64 89
42 95
35 63
82 98
7 88
75 100
14 51
14 86
10 74
25 28
16 99
9 76
39 56
82 89
53 91
41 50
9 98
7 46
96 96
24 27
3 46
8 24
19 50
9 11
14 77
44 89
93 100
10 81
10 62
78 80
72 76
7 37
18 19
8 52
37 82
15 69
39 87
9 17
63 74
42 61
12 67
24 52
73 78
62 82
25 32
34 36
58 81
40 54
15 90
68 74
12 33
9 51
17 38
8 31
40 96
20 82
13 45
60 99
30 55
46 84
30 67
3 89
8 75
37 37
31 88
9 78
29 92
22 53
33 53
3 61
15 18
24 78
5 21
35 54
39 94
10 60
24 33
78 92
55 66
72 78
6 21
2 70
81 83
18 39
1 23
55 89
17 50
12 52
2 34
58 71
23 83
5 68
19 63
47 51
19 48
42 54
48 93
27 77
10 24
21 73
46 70
46 46
39 79
2 13
17 55
23 46
17 84
35 57
50 76
2 41
41 76
12 23
20 88
1 85
39 54
20 66
18 73
65 87
41 89
18 24
21 72
42 97
14 52
22 27
4 90
59 61
65 100
78 97
51 87
56 60
39 40
67 94
25 100
17 92
33 64
68 80
30 87
52 100
35 40
14 24
32 91
19 51
38 89
6 45
19 22
32 60
34 43
14 72
22 54
29 64
31 62
65 69
7 41
19 79
31 35
10 50
23 98
1 16
55 59
4 61
62 64
76 79
16 27
98 100
17 75
67 77
19 29
52 98
51 61
37 91
30 74
56 84
12 83
54 80
38 94
81 98
25 45
1 50
14 76
9 73
26 80
55 81
4 63
87 99
39 89
20 96
21 37
42 98
39 61
20 41
1 65
42 84
33 97
6 20
28 72
2 6
62 69
20 69
6 9
78 78
27 95
24 29
61 92
7 39
91 92
68 70
77 95
1 76
5 61
89 98
11 60
14 32
29 79
53 88
6 86
7 49
45 60
42 80
66 78
57 57
2 92
55 69
87 97
52 67
10 91
36 88
17 71
93 99
73 91
29 80
20 56
52 82
5 11
19 97
86 95
9 75
42 79
61 65
3 84
41 55
6 95
21 52
32 76
12 53
20 30
11 41
20 43
79 86
22 50
55 96
18 61
15 99
13 20
12 80
2 73
10 93
8 48
13 19
73 81
26 63
60 84
36 85
56 79
54 79
10 71
55 93
62 84
11 68
54 71
26 41
49 67
8 98
30 91
38 93
79 96
37 71
51 64
14 62
10 40
53 92
53 93
19 19
42 70
11 54
14 42
78 84
22 93
61 77
2 65
62 71
52 71
60 85
33 60
10 79
68 91
52 63
19 66
77 91
22 90
35 86
40 61
26 33
23 64
78 87
10 82
1 11
8 76
5 97
16 20
37 84
14 98
28 53
29 96
16 65
40 74
19 43
55 71
11 86
50 53
26 79
73 93
49 53
26 35
49 71
35 51
72 80
6 50
80 84
34 52
1 21
80 82
9 94
11 66
12 14
36 50
16 48
10 46
80 95
41 96
22 63
15 94
49 57
12 99
11 81
22 80
57 87
26 52
37 99
63 79
55 55
12 43
14 55
31 94
63 87
66 94
6 34
25 93
12 68
49 87
68 73
19 95
55 83
19 92
28 80
50 78
66 71
85 100
41 82
7 86
41 64
3 15
58 98
31 51
12 54
55 57
7 60
41 93
68 68
32 84
52 88
8 12
10 98
16 17
72 85
17 48
35 73
20 71
26 64
11 90
8 80
39 39
32 39
10 17
17 25
4 34
27 56
26 95
10 41
16 63
12 79
21 74
80 85
17 79
54 61
49 90
13 86
50 95
34 74
5 5
7 58
4 74
13 74
56 99
51 65
51 86
74 91
6 78
63 67
74 78
36 53
18 79
48 63
43 75
12 77
52 78
12 38
4 26
16 49
94 100
69 97
46 48
7 10
3 98
10 97
22 59
6 10
28 41
31 50
31 49
33 75
7 93
25 38
6 71
14 20
86 88
46 75
11 18
65 88
15 55
2 44
29 60
77 93
32 50
13 65
61 79
79 90
24 30
45 75
32 81
27 82
29 33
79 99
38 54
64 82
30 100
22 31
5 96
56 95
29 97
5 86
26 49
68 90
45 70
42 69
49 66
72 94
35 78
23 72
63 85
38 98
21 49
5 16
23 67
23 61
60 76
65 94
32 97
3 32
32 90
1 98
21 28
90 92
17 45
3 67
19 26
27 72
28 34
14 81
75 93
35 88
8 95
21 66
21 82
75 82
67 86
54 54
10 55
26 73
1 39
76 78
48 51
19 67
85 86
92 97
6 37
23 25
8 50
100 100
51 98
46 61
69 79
9 49
82 96
15 37
48 69
17 80
89 90
30 85
6 32
2 46
60 70
65 72
25 99
22 46
5 38
9 50
16 41
84 84
35 55
8 55
16 71
58 83
21 87
72 84
21 24
61 89
68 94
40 77
43 85
28 56
25 44
2 98
70 97
15 28
9 65
49 83
66 82
20 47
37 80
7 81
59 72
33 72
35 94
6 12
37 67
16 55
15 51
43 92
27 90
43 48
8 67
52 55
7 44
5 23
87 89
12 62
20 73
40 56
38 68
73 82
10 80
36 37
56 83
16 47
18 26
3 11
1 73
47 78
28 58
7 62
15 71
51 89
81 89
59 93
20 95
56 70
41 41
34 93
83 95
66 74
50 77
28 67
15 50
61 94
44 55
38 46
11 47
9 16
77 96
40 84
11 77
75 92
60 95
2 21
11 57
72 77
48 64
26 90
18 23
27 52
68 71
36 46
17 46
6 90
81 92
56 65
78 99
48 77
86 90
43 91
70 70
62 92
41 90
76 96
6 55
88 91
74 92
75 79
68 75
52 79
50 86
23 81
16 23
28 38
27 71
87 96
4 60
25 71
13 13
37 41
19 36
37 81
31 96
4 36
31 39
12 46
76 100
8 34
18 43
20 72
6 89
43 47
10 75
14 50
77 82
8 16
67 89
90 90
15 17
77 85
11 56
50 93
52 53
80 90
12 73
1 78
40 63
16 39
25 66
15 53
52 96
58 82
10 16
30 56
18 35
20 35
13 70
47 84
39 100
76 88
7 63
8 73
65 65
18 68
33 39
49 79
1 27
59 94
46 74
38 50
15 30
31 45
21 78
31 76
19 23
68 69
9 80
8 79
53 59
54 59
37 63
64 100
76 77
46 88
21 89
64 83
48 54
16 26
10 76
24 31
29 57
16 100
67 82
10 70
27 38
49 92
29 36
8 49
48 90
12 49
72 79
45 59
69 78
44 86
18 18
1 4
23 53
4 71
18 55
2 100
1 61
64 90
29 43
31 77
60 68
10 52
55 99
93 98
34 51
42 91
2 94
18 83
19 54
17 39
44 45
13 24
1 46
39 84
3 88
33 42
95 95
40 73
80 89
88 93
13 94
42 50
21 79
16 76
20 64
68 96
52 68
28 83
76 93
24 94
52 57
40 92
48 94
13 68
72 86
17 23
46 89
13 38
19 44
70 83
11 100
5 88
9 21
22 83
33 34
4 25
50 69
28 76
3 4
71 97
7 34
57 74
60 80
25 91
48 56
28 59
4 29
69 92
23 91
35 67
20 67
51 51
12 85
33 100
58 85
13 34
42 72
83 93
28 88
45 74
33 47
5 53
81 87
26 71
12 15
28 92
33 43
18 89
2 37
29 46
38 91
33 50
30 93
6 82
72 89
74 97
81 91
5 12
4 6
37 43
52 87
14 70
56 69
64 97
24 54
21 45
43 56
58 90
71 81
5 46
93 94
17 52
32 61
1 87
49 62
3 29
2 35
69 94
17 94
7 73
27 48
62 94
14 95
29 68
3 96
15 70
26 76
36 98
48 92
43 65
57 78
27 57
32 69
13 90
26 89
6 75
41 87
21 59
38 92
52 90
9 71
27 85
21 86
52 64
14 63
43 96
64 98
5 31
8 46
47 67
3 63
11 61
59 89
45 81
69 96
54 87
9 61
14 31
63 73
13 53
63 100
78 98
80 100
9 60
25 56
4 14
19 65
51 81
38 69
7 53
4 11
12 57
71 77
18 78
22 84
6 56
40 90
23 97
7 31
33 65
72 96
81 93
30 43
52 65
83 90
83 84
66 84
22 56
28 30
9 25
96 100
3 75
45 90
20 44
65 92
23 54
54 90
64 76
54 100
8 59
23 59
52 92
3 70
48 71
50 99
40 52
47 85
10 63
12 32
36 94
14 79
8 23
14 23
63 88
8 70
57 72
1 51
53 68
44 60
65 70
23 37
34 72
6 80
3 20
37 95
21 41
20 21
14 15
25 85
64 93
41 60
39 90
31 79
14 22
7 33
25 60
6 40
4 50
9 77
38 51
15 62
18 65
23 73
62 86
20 68
18 38
3 95
71 95
39 80
73 74
13 30
4 24
33 80
3 7
42 59
3 44
20 31
85 92
15 45
15 58
11 76
33 46
11 85
3 36
37 55
14 40
13 15
29 55
28 57
71 98
3 54
35 48
10 13
6 68
22 42
20 97
3 72
27 98
31 78
19 46
39 65
1 82
57 83
83 92
59 86
32 59
52 89
38 72
10 18
49 54
17 18
55 90
4 96
68 88
8 35
66 81
2 88
16 79
13 56
24 64
24 74
52 58
6 48
92 94
32 37
27 42
23 51
35 92
29 76
35 69
51 94
12 86
11 32
67 68
30 51
67 75
81 84
20 38
67 87
5 6
71 87
47 61
17 17
51 58
75 86
1 37
9 55
48 96
65 68
29 62
28 31
24 77
26 91
11 70
32 86
58 99
2 63
56 97
15 32
22 55
89 94
35 72
27 35
40 71
9 64
39 46
25 67
33 59
3 22
29 66
5 51
24 53
5 82
21 77
44 46
1 42
4 13
18 85
60 89
51 56
60 94
46 80
21 47
2 25
43 74
4 88
48 48
30 44
2 40
34 38
80 93
40 82
31 54
18 42
39 44
45 91
45 78
22 88
42 100
22 41
9 100
84 95
68 99
22 36
17 89
16 73
22 61
25 31
53 82
49 50
31 36
23 93
20 78
50 87
45 71
22 33
74 85
12 98
46 54
49 65
73 73
2 83
8 42
59 90
9 59
4 8
30 30
70 72
11 45
13 67
1 45
28 65
39 92
86 97
17 64
27 96
61 70
23 70
52 69
4 81
34 88
25 59
1 88
7 74
70 93
39 47
17 68
22 99
8 88
10 30
48 55
17 35
49 89
96 99
12 74
30 58
62 80
44 78
1 74
1 93
15 66
29 29
8 94
34 55
25 51
12 88
55 95
56 85
2 69
74 98
62 79
29 45
55 84
19 94
1 7
5 39
3 83
2 47
61 61
64 73
29 42
25 97
28 46
49 99
47 54
29 49
3 65
37 54
98 98
60 63
40 75
36 57
29 48
7 98
87 91
33 94
15 89
62 74
3 77
4 99
57 94
6 64
17 93
15 40
19 35
32 70
37 97
27 65
13 66
72 73
51 84
60 93
61 91
43 43
74 75
14 82
41 79
16 93
37 46
6 28
7 12
24 43
75 87
65 85
1 31
53 78
83 94
14 84
15 85
12 45
4 38
34 89
8 57
64 72
32 62
45 96
20 26
25 53
35 84
30 88
13 75
83 91
2 66
7 66
4 80
49 75
76 89
10 14
71 89
39 59
7 55
11 39
39 75
3 82
58 93
15 26
1 71
4 27
40 79
19 42
58 77
16 84
5 71
59 74
13 97
52 52
17 60
54 88
57 61
12 93
34 34
78 82
48 60
41 71
13 89
19 57
27 33
3 97
5 9
25 70
18 25
8 71
84 85
14 33
34 94
38 63
32 53
13 25
16 96
20 75
64 99
90 94
2 23
85 91
20 40
10 61
9 99
10 53
25 79
67 69
99 100
39 76
5 89
3 6
46 76
16 57
4 91
14 17
3 41
8 13
49 84
9 63
25 81
20 42
16 94
16 95
8 28
16 36
45 67
63 69
17 27
78 79
21 55
44 52
41 47
15 46
61 71
44 79
58 95
46 83
25 58
41 86
5 91
36 40
27 41
21 67
27 81
6 38
1 9
82 90
17 43
79 87
88 100
2 17
31 93
51 59
30 40
54 78
49 64
58 87
19 30
33 81
64 95
1 40
76 91
34 69
46 69
40 97
21 80
22 38
55 75
38 39
18 75
28 77
49 88
31 58
20 81
79 84
77 86
62 65
47 48
29 50
38 49
77 77
11 95
29 38
10 48
18 28
7 45
21 22
2 2
16 22
10 39
8 64
7 54
43 77
9 29
2 15
9 69
14 47
23 32
44 48
2 56
67 88
28 48
11 88
16 33
22 75
27 61
31 43
43 50
13 46
33 73
76 99
15 44
48 49
41 80
29 35
38 66
39 41
19 40
71 85
25 36
7 82
71 79
18 22
9 74
71 99
5 73
33 35
20 58
9 27
3 86
41 91
50 63
71 86
29 81
7 7
10 96
79 81
24 63
10 20
36 78
18 84
14 93
5 98
55 88
75 84
50 50
5 90
75 90
22 98
28 79
20 59
44 82
49 97
43 100
29 77
93 96
19 71
31 41
21 65
35 89
18 58
18 49
4 22
36 39
34 67
19 49
32 89
41 56
60 82
37 61
45 85
91 93
26 92
34 100
17 66
8 77
32 32
4 46
29 30
79 95
90 97
60 60
15 86
3 18
14 97
1 14
47 55
12 78
33 93
28 73
27 28
33 71
28 82
7 36
6 61
16 29
85 87
43 82
15 68
85 96
49 52
9 91
24 83
48 72
8 22
87 90
40 83
94 99
22 79
47 89
53 79
26 96
79 80
76 86
28 66
31 37
22 45
11 92
74 82
22 37
31 100
1 53
57 97
86 99
48 76
5 19
32 96
6 47
43 94
42 87
33 99
80 99
24 40
26 28
26 98
19 31
91 97
18 34
19 52
16 97
12 47
78 94
81 99
61 86
53 56
33 38
67 78
10 77
8 66
39 78
34 44
5 42
30 32
5 78
28 93
66 69
27 32
37 53
3 68
78 100
32 51
88 96
18 64
5 99
26 36
57 98
5 14
10 54
29 85
31 84
1 84
22 44
82 82
20 92
3 25
27 31
4 28
85 94
63 82
26 43
51 62
53 58
87 95
17 54
60 91
69 83
19 70
47 69
65 86
47 57
43 54
37 74
40 45
3 35
14 16
70 84
44 99
40 42
66 93
12 16
44 49
26 29
25 82
11 33
3 13
39 45
26 84
11 71
17 42
24 68
7 13
31 56
13 49
6 83
38 48
21 94
47 94
16 98
13 35
16 60
70 87
38 52
75 97
37 60
39 57
6 53
29 90
81 88
88 95
13 71
33 55
27 40
20 86
53 60
50 71
43 81
11 44
70 76
59 69
60 67
27 79
62 99
16 90
48 66
85 98
95 100
12 51
23 55
7 91
2 54
1 58
43 83
70 98
28 43
45 47
62 88
45 80
70 82
58 58
23 71
50 97
55 67
9 41
52 56
19 86
47 70
39 74
7 19
2 49
26 57
68 79
53 80
17 83
34 68
13 14
42 66
49 96
37 72
89 89
22 47
40 98
42 81
18 62
11 51
82 83
17 90
1 49
7 84
44 77
15 48
7 47
42 48
61 78
40 43
87 98
30 36
27 94
43 98
83 97
14 45
78 93
82 93
33 92
31 53
31 71
17 87
43 60
39 50
4 82
16 92
25 52
35 79
35 37
1 30
30 33
2 7
13 93
34 35
9 47
35 80
37 70
86 92
55 91
43 68
37 45
29 65
58 89
20 22
70 79
71 90
2 67
37 87
73 84
77 89
12 18
55 80
37 79
21 53
25 86
34 56
1 70
42 93
10 11
38 58
8 43
16 44
59 84
1 22
30 46
32 35
35 49
13 23
66 85
15 77
3 3
12 72
53 55
75 77
24 24
73 89
45 98
74 74
56 57
57 93
14 30
8 37
44 57
62 98
70 88
37 73
66 66
11 89
26 34
18 94
5 70
37 85
4 75
54 94
56 67
52 59
69 80
48 65
29 40
24 98
47 93
2 97
49 98
18 81
46 67
34 64
18 29
25 47
31 90
52 99
34 62
30 90
29 75
55 77
89 100
30 31
2 42
4 64
11 78
42 65
6 14
50 72
60 83
80 91
41 44
68 86
49 94
31 59
40 88
3 81
48 70
89 95
9 38
17 73
44 92
32 100
2 79
4 19
51 74
64 94
61 68
88 98
1 47
36 95
25 49
6 24
11 98
88 92
5 81
22 49
16 54
16 40
15 47
30 64
9 92
2 68
13 63
7 51
74 79
83 100
31 55
28 37
30 82
8 60
11 48
14 21
10 38
13 31
36 92
53 64
27 86
26 74
4 47
58 92
55 68
25 69
54 82
86 91
52 97
67 93
76 98
33 95
24 75
63 80
25 94
31 75
25 46
6 60
38 100
46 66
19 61
31 65
8 15
6 85
25 75
21 99
25 54
13 96
6 96
9 86
3 94
51 97
44 87
48 98
55 92
3 59
42 60
7 70
29 63
49 58
8 18
51 96
20 94
43 69
9 53
47 72
39 68
17 100
34 91
64 66
32 80
35 65
38 83
5 62
28 44
6 30
5 93
32 42
47 87
36 61
2 39
7 20
58 72
7 17
1 66
27 92
26 82
69 84
38 90
10 56
26 40
42 58
38 99
43 53
82 99
12 58
3 19
55 79
58 80
56 62
47 92
12 31
19 64
13 57
6 17
26 48
7 89
1 17
27 27
3 48
80 87
28 54
35 38
89 93
49 73
44 94
71 100
59 64
5 29
14 90
81 86
42 82
67 98
28 69
4 85
63 83
21 57
50 51
21 100
82 100
12 22
44 71
54 55
28 35
2 84
75 89
41 99
1 6
16 70
19 99
2 8
31 68
8 17
36 70
72 74
35 76
4 31
48 83
56 92
57 86
47 77
30 70
4 55
5 50
21 54
3 62
13 87
81 94
20 49
59 82
29 78
25 57
66 79
25 48
89 91
30 63
14 57
74 87
40 57
1 91
17 24
59 83
13 36
67 100
7 11
31 87
22 40
8 93
2 11
3 64
2 62
86 98
11 21
16 61
5 77
59 79
19 58
5 58
32 78
56 86
20 24
61 80
58 94
70 94
30 83
11 94
45 64
10 37
29 93
31 57
8 69
84 96
40 72
15 59
7 8
41 84
37 40
34 98
8 99
38 65
53 100
7 75
30 98
62 62
44 97
20 32
15 76
66 90
50 82
22 67
19 24
50 84
40 44
11 37
5 84
1 13
30 73
26 70
65 89
28 42
34 78
43 99
49 86
74 83
68 92
10 10
18 69
67 84
34 42
94 98
20 48
27 74
37 77
39 71
24 81
5 79
67 80
29 59
32 71
20 50
3 93
46 60
2 93
34 39
59 100
87 94
18 92
17 67
52 62
58 69
6 35
46 100
46 95
34 46
6 25
14 37
66 73
98 99
58 59
66 89
20 33
56 80
14 99
2 18
6 22
42 76
58 91
53 66
91 100
62 85
28 29
67 99
73 86
41 48
7 48
16 38
76 87
17 49
12 50
48 99
5 10
46 78
6 77
36 100
40 60
32 94
53 67
15 92
20 55
84 97
4 57
16 31
8 20
4 68
69 72
23 29
48 52
18 71
28 99
9 14
37 38
48 95
22 29
19 25
36 64
69 81
39 81
26 81
3 39
6 84
18 59
2 36
5 40
33 86
82 87
54 70
25 29
19 72
25 26
15 83
18 66
7 72
14 60
45 51
16 56
11 42
14 75
16 34
2 61
14 41
77 84
33 51
62 96
65 95
9 52
23 74
2 4
51 82
3 43
3 21
69 70
49 56
6 7
52 85
37 62
30 37
6 91
64 85
35 81
2 12
8 33
4 33
22 100
58 65
6 29
7 77
19 41
26 56
29 82
50 64
25 50
56 89
12 25
1 100
17 91
10 99
44 91
4 100
24 38
17 53
12 87
11 59
0 0
]]></test_input>
<test_output><![CDATA[841.586
70.936
96.418
7738.233
12571.195
1947.242
6781.440
1063.755
5699.425
4256.028
3586.877
243.777
12610.115
1357.168
9526.672
169.646
11666.875
5748.996
25849.363
3938.532
26652.885
26848.124
5387.046
4299.814
28082.985
2684.080
4607.308
22896.007
13176.792
98.175
4.431
27.775
1357.168
9516.241
1096.292
10087.955
2441.069
4235.424
42241.625
6.283
0.785
14945.322
12130.024
33883.389
1045.365
5504.356
6190.587
6624.157
6469.735
6609.184
481.048
1045.365
18625.790
50258.677
18206.369
2155.133
169.646
20679.490
185.830
4580.442
9305.477
21.206
21385.272
2060.476
18.315
16277.214
10093.953
30980.315
12430.259
35721.928
266.442
4235.763
7501.965
1506.987
169.646
17549.214
5076.467
4273.849
2476.235
19249.517
4406.535
18301.988
15703.119
7450.316
17029.013
797.084
1725.520
34504.242
402.124
22528.635
14599.754
4513.267
3551.200
5.704
23402.616
4770.598
59.342
13632.295
3438.981
10880.689
2393.449
17020.084
9272.235
18932.208
8382.808
6506.526
2650.719
2632.831
3344.107
1364.860
28434.299
1456.884
220.847
23352.065
3858.661
8341.861
29960.974
28100.318
11328.407
11904.974
19557.034
52635.980
6263.848
3825.343
969.248
40190.769
572.555
3089.478
4272.604
1241.783
24186.329
14041.276
17517.058
3298.136
14066.185
677.851
15524.369
144.052
4580.442
10160.071
5.068
1725.520
7403.978
5633.754
12401.687
5504.860
55.675
12803.286
329.676
16800.300
11415.863
22223.711
12890.216
28865.121
17123.383
37175.476
7609.904
27030.685
8898.968
3300.672
5587.851
14295.700
1314.904
12249.267
16157.431
5885.957
14194.622
12932.328
13894.479
2650.719
7214.184
1222.420
1831.535
38624.126
7038.151
12022.222
8016.215
8530.372
5785.361
25776.921
2723.858
453.305
312.512
6283.185
50.265
46.585
5426.707
2650.719
610.267
11436.880
1685.012
14050.159
879.137
10275.337
8272.492
11972.258
7978.164
113.326
3236.688
22177.319
3216.991
1937.764
6773.381
1346.178
1100.615
13790.539
5293.135
42769.079
18200.325
43634.095
31215.760
4620.991
1045.365
14763.996
10159.522
16665.499
11243.378
2225.314
1256.250
462.096
5387.046
11.218
4.988
28725.604
98.175
10630.408
5632.105
5344.006
593.417
70.331
4580.442
3421.627
8362.920
6336.377
8437.828
17675.683
0.412
1668.986
1211.560
16457.437
22745.562
12003.869
169.915
2709.618
14196.029
5699.186
6375.572
10797.995
3577.948
13463.152
333.797
2550.229
9.028
17123.795
2410.757
4466.930
4446.233
1609.553
104.263
1168.626
953.448
2584.662
10409.389
72.227
606.774
3131.924
2.044
785.398
3702.038
1921.783
48664.732
3216.991
4.511
9006.073
3252.883
494.514
17289.686
3100.422
51.598
385.080
7847.942
50.265
455.583
6.283
3699.791
33698.975
16255.235
6947.239
14215.638
2.839
7273.572
2748.034
3059.807
371.435
26795.303
46956.431
3046.618
3078.260
6964.410
38749.221
19222.550
9820.871
35617.367
367.936
870.508
91.577
5169.323
7379.802
3.397
1357.168
6786.980
1861.572
3216.991
534.075
6.283
200.989
1725.520
2309.107
36866.183
11978.785
1045.365
593.883
6.420
1357.168
8274.324
269.392
1045.365
6534.961
13474.233
19776.570
2155.133
1356.434
221.616
2967.086
785.398
299.356
11032.431
12536.854
2408.106
8173.503
9257.308
4287.439
17723.393
17827.424
421.986
1725.520
5540.392
9014.584
7920.471
5.386
16914.920
9809.928
34725.867
6007.250
1769.026
43413.656
17.583
1385.464
13393.096
7726.786
1725.520
13845.439
219.784
19817.845
27273.838
169.646
1532.170
20736.710
9647.608
10586.270
21421.411
26929.602
2910.742
1649.068
9092.424
20248.759
26099.367
2992.178
29160.372
22.951
29302.441
16371.263
169.646
18848.413
217.998
10467.952
2728.254
18457.913
785.398
222.196
2650.719
8814.809
3003.533
11402.127
4906.818
6986.938
43552.112
572.555
33973.644
7126.867
35092.797
3858.661
0.824
12905.294
1725.520
3797.870
48.734
11355.697
3461.600
402.124
5928.311
18780.738
14556.121
20146.880
785.398
17950.870
15086.167
21.518
7.614
7216.429
6057.800
6232.429
18996.711
98.175
4490.411
8791.366
39240.968
169.554
7632.829
450.490
16458.587
12239.229
785.398
14281.574
128.137
7667.032
11630.977
9778.517
28163.852
21987.572
17864.330
4580.442
13419.516
593.132
1031.520
44935.800
484.029
1751.153
572.555
5292.952
35923.287
6474.383
15879.404
19415.661
7971.159
11326.552
6853.740
7314.416
19518.434
2631.686
6078.695
11.127
12521.331
2103.521
9852.191
4587.445
7273.572
7410.389
118.063
1357.168
25966.031
402.124
5158.105
16155.783
8704.551
5419.236
1217.421
3590.540
4428.262
19715.027
6864.408
272.413
4754.446
4224.251
13879.185
13038.328
8.073
1800.673
38.707
39.423
572.570
2266.495
12488.043
16574.380
14458.100
6.341
4657.959
212.253
4387.990
29132.151
4126.081
2572.390
6964.062
4.745
281.008
24267.100
572.555
8601.344
10530.957
4144.122
25945.335
21488.717
25343.757
4440.189
785.398
12116.837
101.090
8155.457
183.084
1005.696
28498.242
36083.008
785.398
26824.838
4067.701
899.833
1770.315
22849.446
10587.689
22787.220
4373.063
3459.148
5716.586
2155.133
1741.103
22944.508
6282.163
8804.919
130.126
3581.000
9555.939
71.796
18.259
42744.011
16087.238
572.555
19268.423
7.437
9.665
402.124
2832.102
98.175
1462.526
15232.964
13169.741
8178.031
22375.279
3034.395
37206.006
7300.834
30.037
7040.419
114.210
572.555
3872.539
433.936
22365.234
4928.293
375.098
13278.625
2519.093
3.476
40574.998
3398.154
6795.676
15600.278
20920.520
7242.986
1045.365
12373.122
18287.140
8775.798
20602.223
21978.414
247.623
11346.723
3105.707
1857.176
30261.816
12200.309
27930.901
1725.520
11442.512
6.580
785.398
785.270
3334.675
11668.065
31712.403
5792.869
363.331
16541.046
40013.499
10821.839
6715.862
35.126
22208.575
5637.279
16718.110
25237.441
133.519
5088.552
19062.241
8362.920
199.454
1719.490
8362.920
8545.207
23.671
5490.140
13232.837
673.089
24107.573
9100.162
13716.728
23647.484
17480.065
16402.674
3858.661
2650.719
26.532
98.175
1725.520
9527.643
93.739
4642.940
175.010
12868.728
16588.025
45347.389
269.392
26339.920
45010.627
6.283
1777.916
20247.650
5808.345
40389.791
3714.352
10255.449
9043.934
5422.811
35.842
1898.935
5.466
6283.185
12688.322
31390.369
14659.877
3858.661
91.461
747.953
2670.377
13149.784
5231.962
8571.390
25579.990
6071.285
98.965
19411.336
7273.572
3288.749
11338.933
5083.177
4259.462
433.341
314.953
180.740
785.398
402.124
5563.186
20668.318
2116.567
15850.318
1045.365
3471.491
6777.859
1357.168
1719.078
430.777
37914.125
3858.661
11143.056
8680.741
2326.369
6924.574
9168.221
22486.757
635.176
16754.695
45759.983
3321.381
2024.624
3164.892
7271.375
572.555
2650.719
63.314
35521.510
5667.958
36138.682
10736.272
785.398
1357.168
5391.122
50.265
22745.974
402.124
13289.065
4764.004
6283.185
41.210
7.853
35039.388
33.242
98.175
7.694
19833.321
5001.687
3344.199
3605.009
1357.168
228.942
29.396
15509.618
377.342
3008.224
50.265
6.283
7273.572
108.242
12022.696
13056.826
1269.940
1357.168
12105.711
8723.233
572.555
10616.856
37584.179
6757.950
172.975
169.646
59.494
1725.520
98.175
34398.513
712.945
13563.658
8016.115
6539.952
7389.143
11578.732
2650.719
4432.314
4580.442
23253.162
609.535
5109.981
2510.957
6308.766
906.610
21840.609
1424.201
10661.729
10307.327
16635.462
18315.345
1857.725
47629.974
7996.297
6290.519
9787.263
6916.036
2715.777
25032.621
31167.440
2503.891
1548.242
8427.302
1050.019
2528.571
2155.133
1012.060
7193.947
25571.267
17033.546
14561.982
2426.417
19408.039
8483.847
1725.520
37767.504
10918.876
12362.858
9230.293
10770.522
17.304
26385.086
14511.872
11421.632
12290.348
4670.336
5195.863
4781.679
7939.702
13854.643
23333.150
9555.939
8975.435
2215.424
19.781
10228.983
25.815
572.555
2529.029
13650.244
24596.855
4580.442
1.566
1.407
7624.587
659.352
43746.659
654.636
572.555
9925.223
6564.220
5368.136
2836.681
17387.213
22576.541
2596.200
3946.139
2709.206
25404.620
16210.225
3466.729
4038.534
83.686
1290.087
28732.545
785.398
200.793
35614.336
10384.801
14700.047
15375.787
40213.914
16127.396
17729.254
21.206
526.200
13117.645
28.764
24646.273
31837.993
3028.397
15155.137
808.668
26.374
14359.231
5934.172
6178.956
51.855
1725.520
1045.365
2.680
5387.046
4005.566
21.206
21075.239
9504.519
648.226
17923.564
34201.922
9573.797
1146.861
10507.638
6542.424
6611.840
30830.329
1246.588
1689.944
95.145
4940.976
40.139
262.505
29023.595
700.562
8913.712
5545.154
4580.442
785.398
1253.685
12659.567
3462.745
27040.030
9864.422
3216.991
251.287
286.177
8201.337
15217.762
21485.239
4711.623
172.146
14652.276
21487.471
16318.973
34195.618
69.644
5280.314
2010.292
13357.304
24553.460
148.766
8969.277
165.296
32662.457
27473.018
29903.098
10374.544
15507.969
1483.543
5289.472
11671.133
14969.681
33425.505
16982.404
10237.683
186.470
24640.316
21.206
107.877
19349.063
24.307
457.884
45.992
46282.887
8757.024
785.398
20851.632
23882.579
3216.991
2503.479
6980.894
18415.713
19109.811
11224.285
350.047
1044.662
18259.779
332.424
32705.689
16802.086
1538.489
15135.151
502.573
1008.809
198.355
3.794
2155.133
6.283
14256.848
16823.377
15474.315
1924.256
269.392
31569.115
3858.661
15840.942
4594.954
6693.755
572.555
21336.289
440.026
105.331
7800.139
2423.330
12016.698
155.131
400.557
1725.520
19408.880
17354.459
1318.705
22624.030
34673.737
16874.010
33657.881
3858.661
110.232
15922.125
9482.221
55.896
5.943
36182.190
1725.520
55.179
231.414
9501.772
14546.521
15956.329
2650.719
5972.543
3234.673
12014.134
15233.845
6171.539
4.670
3858.661
5860.910
1357.168
2896.434
38200.427
8299.690
28.127
14.835
467.316
572.555
1045.365
4580.442
5104.418
3152.529
22253.144
5058.057
29725.831
865.400
2155.133
18368.322
10549.639
6511.038
440.304
1357.168
8362.920
32114.248
14423.334
1725.520
19765.188
3781.020
22875.275
16222.542
18083.839
13201.401
2650.719
5387.046
123.156
5.306
32285.616
9694.404
634.215
1045.365
5963.247
6128.681
5078.021
1725.520
50.265
23960.416
4580.442
4006.309
14546.047
29351.281
4462.992
14188.332
19656.944
42.288
18029.809
16436.008
7081.262
2650.719
32967.621
22887.359
642.758
23554.679
25207.639
11701.308
12191.426
5387.046
3634.680
309.529
27949.963
6407.257
342.248
8357.292
30008.509
2976.244
23.989
9315.917
1725.520
26571.045
4543.350
2615.981
4986.353
402.124
17806.014
6283.185
10025.782
11922.768
1357.168
1357.168
1045.365
2153.885
15321.702
841.361
46.887
10155.309
785.398
2776.072
269.392
26181.070
2143.720
402.124
12894.003
17502.098
402.124
7402.923
1601.814
90.052
3872.230
6283.185
2057.912
4285.791
11094.504
795.750
4449.484
7744.461
61.625
12190.467
21901.719
572.555
11135.730
9866.110
3878.274
7810.671
6347.366
24849.345
1761.707
98.175
4.749
24415.820
269.392
404.653
8144.376
1476.949
2151.395
20354.209
50.265
925.658
12631.669
25.262
1152.402
2642.760
1.964
18738.796
226.577
5953.747
322.752
1357.168
216.671
11372.364
4539.641
22656.815
539.112
7521.563
20197.201
24.626
358.508
17821.060
572.555
7496.654
23887.926
3542.737
24261.447
10724.825
7121.006
9785.523
430.118
8241.905
23264.426
13430.963
5477.776
572.555
11630.977
269.392
14420.038
4929.026
1357.168
3705.973
2155.133
13564.344
3696.220
22865.610
21038.471
1502.778
10206.776
2285.892
16014.573
2019.679
1.885
13355.504
11247.911
10559.941
2325.848
6784.736
33209.109
36432.583
17670.302
400.809
19708.044
19940.853
2618.545
12105.298
6365.997
8901.258
2858.293
16942.839
28518.751
1045.365
201.469
62.822
21629.690
741.039
26.854
12530.077
16176.268
11784.643
468.873
8892.466
33314.547
12343.077
21334.996
32311.566
22252.229
2650.719
3149.751
6.818
14868.658
2155.133
10287.546
45491.966
667.594
11119.672
923.643
14207.396
10692.636
15942.485
27673.183
975.017
16321.033
4760.525
50.265
16.031
42654.909
8023.866
2155.133
36967.931
9349.007
19387.022
13119.648
183.605
13488.153
10681.921
6283.185
17431.630
41363.808
17160.489
7.057
4836.396
2443.771
15573.378
6.800
7157.866
1323.284
330.550
12609.186
572.555
22.716
15020.873
262.940
10585.903
924.055
77.320
211.243
61.814
119.337
4795.965
3216.991
5387.046
13223.679
11783.452
433.977
1539.130
302.890
5549.687
4909.291
5251.376
11632.213
409.746
7033.093
31133.348
4847.202
18915.173
15613.466
10775.833
22371.233
6122.133
1854.429
9010.875
8750.156
2051.319
1392.882
3570.393
17425.036
2155.133
30965.251
2132.593
2.282
5029.852
146.041
16289.125
835.729
3216.991
324.056
7608.881
27.490
3388.705
475.955
9765.052
3626.438
12444.316
3216.991
15247.159
580.991
16529.599
572.555
23026.011
9374.343
14867.453
31842.848
5401.882
11.717
8566.155
29538.989
1185.278
2464.513
4576.272
7.455
11570.719
11117.918
10.302
4407.618
32051.854
25123.644
30856.645
4933.055
44.323
8705.513
92.721
30.355
12580.444
51007.421
4.908
9732.042
20593.225
660.025
25641.483
2650.719
14182.952
12216.564
9147.645
21520.531
9692.481
38144.549
5387.046
13862.885
4019.065
14388.398
10984.811
3892.011
28272.620
1440.389
14116.919
2109.251
28829.173
28583.844
2925.327
60.193
750.197
1980.988
14778.286
2228.611
15577.201
11201.390
60.768
2650.719
8.392
12302.005
5185.807
1111.558
126.147
5456.508
16941.694
4429.841
145.332
5387.046
785.398
3216.991
18578.422
99.178
100.284
10862.456
785.398
7358.373
10049.996
1938.496
20769.602
5387.046
3216.991
9564.184
33465.637
2650.719
6939.318
1045.365
98.175
1950.035
8687.335
5312.915
367.177
13752.626
31019.235
8411.689
20180.076
17.941
7.535
34457.794
15771.802
26034.119
2304.343
295.457
1.487
14288.259
9963.548
13420.340
148.031
7974.559
38733.537
86.232
22180.616
24845.655
1725.520
13080.295
9272.144
1183.771
448.772
22994.916
4164.177
2231.496
5387.046
39212.681
15577.934
4752.283
8992.102
6248.188
402.124
28235.902
155.989
14511.797
15916.584
1045.365
2650.719
179.862
98.175
18325.464
395.611
64.490
10492.266
2650.719
17060.744
9470.169
3216.991
6351.762
572.555
11636.838
20448.799
316.489
13176.334
8719.936
243.765
15074.994
4869.684
0.785
12932.877
4450.629
19717.019
1047.134
9357.447
287.658
20228.566
2556.100
9266.096
242.312
17820.685
4.351
3739.765
1845.499
24949.484
3000.786
14574.024
8572.955
6100.155
13860.824
3324.235
4935.986
1523.808
31.545
9773.251
4808.927
17769.319
1880.391
20277.068
18567.364
1859.059
5843.935
5144.780
33275.515
1191.001
13911.924
161.541
269.392
278.143
4048.241
9871.971
6321.954
3599.143
36941.879
15866.371
34.410
16035.451
402.124
6082.892
400.648
8974.519
82.413
39.546
8958.814
2967.086
11790.648
8.710
29616.300
36331.104
12810.439
16.668
44262.256
132.237
414.839
13925.523
8362.920
10586.270
17241.333
10578.943
98.175
15.713
1692.475
26191.894
12114.575
23631.191
1002.948
8770.334
1692.552
36644.507
15166.937
1725.520
13908.215
14892.574
4006.482
50.265
192.199
2429.470
30697.582
3.472
28312.235
1357.168
2155.133
3436.290
3356.015
3872.047
20673.309
5429.584
27375.077
48727.815
21443.057
1357.168
98.175
727.302
7885.901
1725.520
19761.710
394.879
31.310
4487.260
28003.476
98.175
7140.787
106.253
36269.906
37936.341
5448.589
10758.554
4577.966
1504.422
13519.551
24630.611
14720.455
7430.902
9688.818
14465.341
12035.380
1473.831
65.861
3791.276
14647.972
25709.255
11968.758
13880.187
8.975
195.064
1007.243
17441.978
169.646
283.312
109.151
2037.632
582.245
4159.439
572.555
42856.042
9792.620
10817.501
7912.229
5014.742
9430.251
8784.223
269.392
7180.348
29753.278
28954.517
425.025
3540.127
2650.719
785.398
9219.212
43515.023
4580.442
40879.098
81.139
24785.476
81.832
21275.105
148.854
2781.643
2677.795
3296.762
785.398
269.392
18856.793
0.183
15601.744
770.160
4406.123
9934.265
16703.595
3216.991
9747.539
785.398
12752.792
1164.490
269.392
87.506
11432.592
785.398
7178.784
10444.142
4141.970
24048.406
5387.046
8096.482
36.558
12277.142
2555.677
4738.546
13234.517
785.398
8510.042
786.315
7392.440
572.555
26405.373
27438.662
429.536
4004.833
41479.924
12233.414
5387.046
8372.446
158.794
504.817
1949.481
2472.572
20000.778
4179.882
4617.735
32.977
5604.496
10248.260
308.064
269.392
7931.689
169.646
263.819
1000.613
53.747
30584.599
18544.287
200.324
402.124
314.795
128.940
15402.850
654.655
5282.437
5738.015
14162.524
402.124
10277.198
785.398
104.058
2155.133
693.170
24372.946
66.164
5387.046
7132.448
140.073
616.139
3696.769
419.932
184.619
682.063
7816.885
97.692
14463.399
2155.133
17724.630
7020.638
6775.213
32786.478
5545.363
32546.358
21099.278
5696.805
24229.461
40665.419
381.241
27774.554
17211.162
9521.049
26435.594
5897.404
10774.447
572.555
6577.407
9528.009
577.624
13.737
6964.410
20927.846
396.024
32086.719
164.838
12063.036
18715.601
10980.278
2155.133
1357.168
5983.623
30899.219
25.580
10398.361
122.168
9716.016
1725.520
7528.519
246.630
20229.299
169.646
1725.520
9529.703
30432.577
660.039
50.265
529.470
20739.558
3216.991
29170.164
11901.311
258.089
5803.675
5815.488
3471.819
502.383
1371.453
30220.320
6954.108
15019.359
11191.871
2638.509
9144.486
8292.781
5408.750
27596.515
6001.572
20368.744
1045.365
785.398
98.175
2325.316
121.883
5622.490
7628.341
24071.552
5578.625
36660.790
5653.123
46.429
616.998
3869.117
6572.599
529.313
5856.148
8077.067
12137.579
8057.942
2629.809
5013.963
1292.331
17744.436
6283.185
5385.261
14347.509
7451.095
572.555
6283.185
8076.157
15707.011
18595.799
64.587
16293.475
12313.040
23508.753
15570.060
181.826
357.846
2155.133
741.771
22.397
1045.365
11721.821
6985.518
2232.137
105.198
32037.047
3216.991
7565.757
20447.755
1186.834
46387.158
785.398
8632.846
26745.973
5111.355
8177.618
19585.240
10339.745
370.886
9369.398
1177.906
2423.120
6883.639
1743.987
22894.182
1241.048
564.158
67.134
9262.986
13769.106
13371.667
2155.133
2650.719
6782.951
13892.556
17587.349
572.555
13665.858
40.856
72.203
1940.546
1847.286
4945.143
9198.882
18579.498
8296.210
2620.102
26711.008
22833.604
2.999
8065.941
24233.674
31414.022
2155.133
3096.484
4581.034
1550.211
10681.509
1725.520
269.392
11387.371
11130.647
5769.334
40133.577
18182.559
4893.631
20211.350
19405.154
6764.257
16162.479
3215.579
13773.140
50.265
1357.168
10848.500
2650.719
22506.077
169.646
1045.365
26.405
1233.996
30047.500
11273.557
6554.718
31593.971
8576.527
269.392
169.646
8674.912
1357.168
1725.520
20604.763
9272.144
32101.855
2847.670
17821.151
10563.292
1045.365
14.652
9951.093
17533.509
5934.172
785.398
572.555
16.349
6283.185
29618.935
0.785
20643.500
1869.264
4786.899
2968.322
16116.359
169.646
19061.467
828.411
14072.046
11652.687
2127.511
2209.460
1045.365
169.646
7273.572
169.646
4580.442
712.101
2019.267
11699.476
9026.535
13148.764
46463.129
10050.591
702.122
98.175
11514.125
3666.110
3203.189
402.124
13135.537
27704.341
572.555
652.759
1905.529
7.137
31515.393
1671.458
98.175
11040.261
4010.840
34904.695
47946.546
1354.603
13828.818
26235.211
6955.252
13207.379
51.512
14825.494
7979.172
1725.520
169.646
3520.209
423.588
6458.905
9057.043
25025.447
6315.314
7576.672
7564.192
3518.012
32.868
7832.769
269.392
3858.661
8317.731
8469.016
7833.839
6161.611
15595.745
18773.229
16992.611
13014.381
18217.083
24157.437
14119.620
27687.078
13269.996
14360.696
169.646
785.398
18.896
203.658
29483.774
7934.208
24784.339
4887.541
402.124
159.527
26557.251
1831.535
2650.719
7326.138
10951.149
11418.240
3858.661
1045.365
12286.117
12672.754
19336.159
574.369
16871.867
402.124
18816.106
12993.562
7753.985
16933.452
10316.210
9301.265
49509.933
14769.494
2650.719
28283.850
21285.712
31450.058
134.105
145.561
13145.198
13436.263
5539.659
4085.787
16288.615
17822.954
33120.630
15191.480
11712.297
35260.946
3837.198
4580.442
124.158
16502.217
4.272
8775.981
11523.112
12600.958
8078.670
33758.876
10282.967
269.392
26477.533
19641.743
8937.934
9193.021
10330.999
15595.654
14681.940
12007.357
141.349
843.971
8023.586
2.203
13650.244
2315.151
195.777
572.555
33202.332
25741.119
2427.516
23289.556
103.024
369.543
8664.303
24803.373
25.899
3135.541
20794.327
7808.198
13351.887
26585.090
12512.723
1810.747
5024.998
3434.127
6371.863
17409.102
13248.313
6382.532
785.398
27185.233
30248.161
785.398
4615.467
37182.898
15942.318
39335.859
12725.864
15143.558
45991.966
4828.658
15889.661
6428.686
445.397
7278.060
2570.742
6.261
13546.029
13.485
18958.672
23306.826
28926.798
15775.244
13271.070
11083.714
8838.390
26280.185
15728.095
1388.486
16587.531
8359.765
10996.030
17609.838
21316.669
7058.459
23365.802
278.576
10469.705
4806.679
10857.344
22031.116
11468.291
28240.962
54.401
9544.310
24897.148
1357.168
984.633
9555.939
6696.548
7087.627
22090.504
23312.474
32050.472
11218.149
402.124
496.327
4580.563
6588.167
5384.712
13819.203
17986.145
6056.793
4943.274
10859.077
11655.069
1065.633
4688.728
33886.104
20.169
25488.917
33528.143
9084.411
402.124
2730.955
6396.955
115.517
8127.618
15078.795
3858.585
3961.975
15239.283
21673.647
752.211
47166.276
402.124
7273.572
16183.439
25578.479
11771.776
161.957
16091.087
9.983
10549.639
498.635
6283.185
254.704
13218.368
14220.572
7273.572
14537.988
2.601
805.875
275.278
28.445
9504.565
717.962
27211.452
933.259
7568.450
192.861
27007.075
954.701
13302.481
4272.604
35145.552
2304.803
1657.658
808.717
4872.383
4400.262
600.329
10214.193
5344.143
26466.513
18134.481
12820.742
17948.489
25019.184
33837.014
10311.488
14470.405
785.398
18525.376
9917.759
3216.991
402.388
1357.168
6877.006
23784.903
3375.884
2531.913
22436.298
9739.368
14652.871
24987.717
23.667
2965.665
365.644
2155.133
27429.061
8627.260
5263.372
3453.770
3729.966
9591.929
3814.171
21.206
6007.549
17150.306
14538.721
7772.849
9046.315
98.175
25651.766
3302.623
14017.100
5983.678
1045.365
103.848
16315.543
31017.830
7273.572
7877.064
21.206
2530.956
20472.764
25418.540
28910.772
15444.919
25183.600
12859.433
5553.945
1696.184
3601.255
34960.011
2.760
28388.785
7.296
82.053
4501.683
1567.107
3206.471
2933.248
2650.719
21140.487
15.076
26111.406
13539.802
23.352
13796.658
1520.723
10993.786
4580.442
12287.902
13793.617
18610.955
12981.001
793.970
7649.422
29955.589
2381.911
6244.022
7852.704
19377.635
7741.544
7775.615
13407.311
21.206
21140.899
19530.553
28273.032
18025.047
31068.748
111.697
25398.052
2403.340
5818.419
14.121
14339.450
1.168
7814.563
1822.772
267.038
3481.381
466.675
27361.760
4333.411
7917.331
29295.944
10710.427
4580.442
12863.306
52.315
20475.365
27490.324
19816.811
47228.359
897.452
22885.527
9058.771
6393.573
12397.199
3472.727
44174.004
35685.547
206.523
16270.803
2155.133
26162.967
63.774
15391.300
12636.202
8.791
1725.520
15570.264
2320.921
11732.993
3446.215
5516.216
5387.046
1045.365
358.981
3.434
931.290
14223.331
8970.289
269.392
237.367
1276.215
3838.164
37.960
12317.115
15621.707
10127.653
9704.019
12877.977
9067.241
0.054
2975.328
6099.422
18.578
27.964
3510.373
15258.239
27325.625
15987.579
1725.520
9679.714
5083.058
13261.261
3627.949
27.172
11332.620
3292.490
952.398
42915.168
10004.254
4460.169
5715.303
1725.520
2976.651
65.206
8864.627
7399.583
1602.226
12902.016
20556.429
14810.521
22853.790
98.175
8221.758
1858.432
53.128
7778.710
1190.834
1820.637
6160.366
11.893
18528.913
116.790
56.612
2034.652
5222.071
402.124
9972.705
19337.845
15441.616
393.719
340.482
3271.212
18595.994
70.220
6030.877
260.954
9238.121
4745.059
792.047
3858.661
1128.317
14152.204
288.100
11856.028
402.124
1402.269
7326.275
91.325
15850.387
1488.122
2155.133
11141.231
28704.630
98.175
7595.740
6858.364
4363.087
897.543
500.604
1270.352
18458.883
1357.168
11891.238
49382.919
20613.283
20565.935
421.986
4303.511
10993.786
2747.302
31662.104
201.927
2296.120
3858.661
16025.927
12817.811
9312.941
3216.991
476.382
3957.763
8541.499
6161.282
3015.438
45056.836
12476.596
51756.166
572.555
10917.090
24475.162
2038.864
73.500
5923.869
600.835
3956.115
5063.827
31136.087
20319.044
8525.793
2100.037
6623.378
74.177
572.555
31848.920
2002.783
5814.023
8252.162
233.658
8512.057
21.206
3737.887
22314.959
32760.338
290.115
10519.235
2650.719
5210.237
19435.761
12959.206
10617.680
41136.496
26015.444
24228.397
4158.865
4.113
4636.118
1045.365
14787.764
89.013
28085.712
3858.661
1045.365
15198.420
15202.835
3858.661
19241.598
43285.242
50.166
11090.308
6268.427
1616.078
1323.238
7273.572
2155.133
11754.376
25319.133
947.407
39064.019
19604.638
23828.311
20248.667
1045.365
98.175
183.841
303.255
4457.222
11700.209
13650.656
18101.660
8516.773
20619.111
323.083
1308.494
890.126
116.200
1629.791
36189.283
23746.578
18195.151
991.776
33180.863
20093.895
46150.947
8501.937
23813.208
1154.554
33210.667
1058.627
30342.849
8341.816
7622.114
44702.811
6577.498
22799.347
5237.090
24626.081
9.347
13722.772
242.220
8064.613
8771.127
17663.731
2.289
3407.570
6581.986
21488.479
44545.909
785.398
905.373
1595.633
10300.657
2155.133
13634.313
6462.936
6183.077
20217.961
381.506
577.620
21092.272
69.680
10815.028
947.084
22693.445
18740.641
748.044
6686.824
5281.733
19422.279
3216.991
269.392
8727.628
785.398
14507.585
36324.250
16406.930
7211.667
429.266
3191.266
34307.085
3090.715
7013.129
24053.177
15948.087
269.392
25620.879
269.392
2501.006
2737.221
27195.554
5387.046
12362.858
20949.497
38.691
6159.464
50.582
31552.898
21612.886
3205.185
0.930
20166.500
7076.179
9012.524
3270.388
11815.596
3816.414
42514.163
27141.831
1357.168
37.275
21726.218
10162.819
8309.489
18783.862
6283.185
2.521
28513.558
3.237
1125.295
10296.612
1265.957
6382.126
4089.084
24455.725
5016.161
49461.201
10498.173
274.730
7469.220
72.117
1045.365
21951.210
27464.099
4580.442
23695.249
19856.765
2155.133
269.392
361.745
6688.398
15238.367
1246.176
3216.991
14902.601
830.784
20194.729
1862.579
335.510
17439.872
5025.731
27851.047
847.612
14089.725
169.646
17446.465
11558.600
814.895
21.206
6740.047
1045.365
10304.744
50.265
21020.261
2816.167
1045.365
70.163
1725.520
2155.133
24381.159
6.102
11626.581
12924.681
169.646
5960.775
4580.442
2403.889
11983.959
1357.168
1245.443
16905.266
10517.999
165.936
3272.861
10280.220
11597.480
10640.072
500.696
30917.604
731.686
1068.151
3858.661
39789.177
27839.812
3665.413
7788.967
4307.224
402.124
560.907
4022.782
1357.168
25741.531
7847.851
847.680
4720.938
890.858
5997.222
21233.712
23212.136
17356.079
6360.690
38471.419
334.450
34341.272
1667.337
2155.133
785.398
996.820
3216.991
572.555
5600.100
33655.709
20096.192
4942.697
613.220
269.392
47994.429
887.423
32.261
210.993
2174.947
52.438
2155.133
15958.343
48451.954
785.398
785.398
26711.404
21897.768
269.392
342.153
402.124
11391.595
2650.719
13516.313
119.096
17038.616
7155.897
1357.168
2971.482
23223.415
19088.619
1195.764
2316.114
17424.212
5340.755
2650.719
19264.845
598.362
572.555
1124.013
352.021
16879.422
6157.619
1205.379
26926.305
4155.294
14861.804
6166.319
63.058
402.124
2747.782
10992.138
572.555
11239.028
2829.629
4244.444
43.004
236.799
6685.834
98.175
4673.160
15778.853
785.398
1196.725
32521.196
11673.314
22722.827
121.156
22.079
29873.389
1253.594
1.805
19947.929
1946.005
1357.168
10.620
14064.357
7255.029
132.115
3452.946
6335.251
2004.431
5703.561
19009.131
7329.939
263.741
5124.130
10320.697
5280.203
11144.842
6.283
2354.667
2228.428
3858.661
5206.824
13223.679
12.848
10843.417
290.665
6283.185
6.739
5207.236
3989.082
4392.111
22527.188
14870.275
474.734
4984.704
18094.554
1733.364
770.201
112.970
11695.249
29762.436
34941.943
17675.178
10524.892
3338.926
27107.260
11447.091
3858.661
6189.121
21472.643
10397.164
23809.949
2813.260
369.237
12133.550
2262.815
13782.206
169.646
458.264
5274.819
2960.055
2155.133
2937.415
5438.925
5456.325
16242.490
269.392
5387.046
1921.973
785.398
9555.939
1.248
9988.261
76.046
13540.412
25192.127
534.075
52585.532
3858.661
19887.776
731.652
22867.075
9265.752
14029.417
7522.112
18092.631
1357.168
15824.458
15374.267
37705.006
2318.036
3.954
2155.133
572.555
7619.184
16522.960
78.593
42949.790
14144.895
6283.185
1316.370
18469.560
6644.761
1539.405
5.147
13569.473
14217.149
109.892
6646.272
3.297
15069.891
4359.968
22.253
25743.106
11157.479
979.096
23640.715
269.392
41538.079
17792.980
33258.293
6.023
118.189
43915.576
1045.365
656.422
8287.190
18793.009
240.901
269.392
7417.715
12307.912
19755.520
10046.197
29.082
12395.480
41745.147
10855.249
785.398
12765.063
3858.661
47763.689
28736.304
8498.320
2871.846
16009.810
27.702
5387.046
39801.236
572.555
12002.137
13497.509
59.477
5678.902
266.684
2600.046
8463.155
1357.168
824.191
846.673
1693.254
30222.474
2518.360
23209.205
3066.813
2650.719
238.099
1357.168
23.034
785.398
402.124
214.885
24495.620
4725.084
19384.961
11909.553
16002.850
15431.319
785.398
21781.295
20031.127
1045.365
12486.792
2001.226
10071.654
486.141
11375.203
15048.895
35188.904
8540.308
9886.695
2155.133
732.614
20540.293
20989.248
372.081
9423.245
1045.365
1130.789
28648.002
8362.920
17050.803
20.488
15681.683
12002.595
19849.255
5439.658
785.398
25783.794
9994.539
3789.628
31371.033
8159.486
11852.776
6815.140
1330.009
4313.630
30100.450
785.398
0.850
402.124
189.809
303.684
11954.060
2155.133
3601.346
12237.581
3095.293
10029.483
1608.591
12876.923
1045.365
7377.728
7429.895
29584.440
7146.388
1458.359
11310.138
4168.344
23547.887
169.646
29811.737
4209.599
1.646
28793.146
587.437
1045.365
116.657
4120.953
1687.942
785.398
35413.991
17301.408
3998.148
2650.719
7910.650
1357.168
1045.365
6447.002
19754.611
3219.105
16604.555
18617.831
9025.374
1015.952
1939.137
12542.165
21834.044
26702.674
169.646
9900.589
1357.168
16982.034
18896.879
5387.046
17348.982
5387.046
8205.275
13928.820
17329.043
41938.755
12623.119
326.651
7689.515
21.206
25505.583
3691.962
1357.168
9506.818
269.392
16236.966
17057.048
10338.646
18438.424
52.748
785.398
242.568
25610.535
1793.439
8540.217
4616.383
4876.278
1045.365
402.124
3217.888
2347.983
132.328
486.501
50.265
3876.992
10744.239
769.702
2907.744
1357.168
5265.479
30321.033
3858.661
10166.313
18173.401
1725.520
20661.999
8525.061
6.781
269.392
92.599
1725.520
25131.218
10093.676
17271.187
29390.283
217.982
14827.715
23725.322
4630.302
4580.442
8749.501
11075.060
1357.168
14485.973
793.421
50.265
1759.006
49275.715
29726.767
5616.975
32.052
69.503
785.398
3506.564
27.473
2155.167
3548.598
3408.074
8499.465
353.946
1652.960
197.929
256.415
35681.352
11847.739
163.190
23048.030
2077.647
13.803
4780.305
32314.663
3663.069
1725.520
17643.018
32209.046
1024.933
11590.179
9613.358
8312.786
1590.733
36678.833
5073.717
20087.659
13736.509
968.058
187.820
23141.439
12493.859
167.925
2858.384
25220.230
10096.334
9155.933
9773.251
29323.301
9750.174
5459.438
20841.718
16710.555
2308.695
58.609
4727.511
3918.705
16301.052
26298.088
13786.327
22.234
11868.344
7.773
753.860
40835.346
1576.264
47.301
588.106
6408.906
1565.166
2155.133
30942.746
12410.478
470.862
4188.536
6465.500
26018.890
23102.785
8541.977
785.398
6344.161
3.078
24732.487
6549.343
3905.335
33889.494
45609.343
169.646
744.218
402.124
54247.176
22427.323
7837.411
21609.369
572.555
37401.262
940.264
10463.923
3858.661
38872.910
9924.628
169.646
14.440
14582.179
17251.134
11219.294
2131.540
98.175
572.555
1231.524
32152.518
4847.843
402.124
3216.991
18295.290
7273.572
25198.005
607.664
22124.067
27511.846
10859.168
14225.300
4020.585
2216.157
30.992
30157.590
538.471
572.555
15456.366
21142.077
2022.930
10842.684
307.155
14742.350
7833.107
14160.509
39.561
7605.127
2216.157
1786.433
16664.766
10013.915
5048.724
402.124
8273.119
269.392
98.175
36926.572
1357.168
4880.124
5743.692
8045.565
24919.689
785.398
2634.089
17664.418
1618.344
557.153
16.621
5.784
13093.091
4312.897
269.392
2650.719
18497.171
33006.036
23365.390
6283.185
13020.441
3738.770
13464.801
37596.340
18368.962
13573.960
5755.231
1717.064
24679.745
6315.673
3895.930
1045.365
105.496
33730.108
12923.308
1045.365
30495.123
24794.399
6.482
1045.365
22310.298
9002.358
9643.029
445.285
3342.917
18160.947
3562.280
1647.099
252.360
34572.359
11772.667
35910.242
13031.002
36858.461
16304.458
18606.781
24028.268
15206.315
33005.998
169.646
38816.675
29826.050
24676.020
19632.812
14859.789
16932.537
6909.601
387.553
1851.315
6232.117
41142.825
74.773
5770.478
119.181
3183.548
1127.493
11115.446
13081.552
50.265
2227.869
1162.658
34844.556
402.124
1523.928
4747.337
249.495
4901.585
785.398
1602.593
27124.700
93.775
24300.205
39546.191
218.894
28540.144
1045.365
19801.178
7842.764
32867.512
1357.168
6.182
7269.361
1114.306
4986.353
1929.293
21943.249
17857.095
117.218
4307.769
1009.633
1121.815
1725.520
15184.886
17857.462
29328.882
269.392
402.124
14897.631
3811.057
2469.440
14002.494
2.123
23870.573
11533.906
4355.569
618.143
2874.364
5850.104
8198.681
486.991
17425.014
572.555
402.124
9417.355
9702.217
6724.158
29304.552
24272.848
16310.914
7273.572
20413.609
7099.383
495.247
785.398
1070.769
4314.225
3216.991
21673.892
785.398
1785.197
18990.083
1791.507
402.124
17802.516
1319.254
23135.357
7199.295
21230.500
14900.632
316.370
0.733
2958.249
88.779
2493.176
31.628
4.829
23736.687
2455.218
8415.855
14009.221
785.398
24682.446
47075.423
4049.248
15925.284
29.718
4580.442
2536.858
1183.950
4775.053
342.863
3.635
12600.225
62.341
2729.420
46510.172
9760.247
32358.216
40049.171
1725.520
5142.062
6001.069
3216.991
3750.983
28695.018
11070.427
8832.209
31627.079
9710.063
8703.474
15502.108
19420.127
1725.520
26023.064
411.775
16683.723
859.539
1684.279
23675.866
1045.365
171.904
181.734
6939.593
2036.141
50.265
10899.920
7405.260
2.198
30588.412
269.392
14441.500
17582.731
9479.336
7466.076
4462.900
50.265
26741.137
8720.989
7194.039
4110.879
7195.942
1357.168
15110.160
19187.614
688.108
9969.409
36499.922
9928.382
11283.168
3337.834
102.274
31961.820
6001.298
128.117
10851.476
2816.079
4580.442
11.575
2809.757
14408.591
3777.540
11880.707
229.441
27260.653
32004.881
34050.251
32.968
6.594
3401.432
18021.750
2155.133
12770.886
27572.653
3204.453
1947.150
6225.834
21511.373
23427.161
98.175
44322.361
2104.799
5452.112
6.898
8865.978
21.206
10.938
27916.432
3858.661
275.960
2848.402
25084.331
2155.133
6140.036
68.071
2650.719
6876.313
15831.052
18602.530
8318.601
15878.855
4016.693
6975.949
1725.520
9429.930
209.388
14209.457
3347.175
14727.003
19286.059
572.555
8932.165
7111.665
10209.717
2155.133
18145.379
28144.092
98.175
402.124
9660.566
44.437
1045.365
21398.688
13518.785
29117.003
18714.894
572.555
616.037
16722.773
1672.054
28846.669
35426.092
37960.470
572.555
3589.808
35.898
3675.661
15321.290
8283.939
269.392
22.162
1357.168
21822.561
4580.442
7107.819
169.646
14835.430
9555.939
269.392
6384.043
30382.960
35094.467
2539.881
10424.894
34855.294
31566.039
21835.356
3159.031
1315.611
257.560
50927.973
53.031
16689.858
1772.925
25190.926
3070.934
20027.830
18131.963
24725.716
402.124
3665.954
20152.741
49.450
11079.319
22438.587
4999.707
15548.583
785.398
562.647
14565.095
2155.133
193.776
339.109
22338.860
402.124
13924.405
4.033
11429.154
7252.877
16578.705
1441.738
8070.474
223.712
21.206
15289.879
1616.375
465.808
164.451
8270.523
25345.507
6758.362
14464.544
8858.720
310.262
269.392
4120.953
169.646
62.041
572.555
4525.630
2640.157
3482.205
5612.142
20996.345
4234.508
1190.131
67.355
29340.038
11428.775
21527.142
535.724
50.265
9670.502
6.731
6694.350
30.829
880.052
37339.177
1390.822
2310.481
1045.365
3197.310
1045.365
25.099
5124.863
1025.659
146.078
4016.784
4165.459
31222.352
37.991
3692.374
78.120
189.334
1776.955
6283.185
50.882
11873.289
8635.868
1840.875
7544.778
6.500
17979.854
35951.713
19980.393
5100.457
18859.860
9019.941
148.354
7337.454
289.514
20398.716
120.610
24416.372
402.124
20795.438
27.809
3216.991
1725.520
4501.179
6017.690
8918.652
169.646
43588.712
2185.008
2180.808
2739.197
13564.345
7669.734
7629.944
20633.885
1357.168
515.760
16672.767
3572.866
19173.329
30395.497
1322.368
23460.009
8.770
25834.061
8093.117
266.516
8644.809
27809.383
2.919
572.555
20255.307
15906.275
5104.304
1378.000
6515.501
9858.509
1045.365
10836.823
26028.761
19.851
24126.072
703.309
3047.216
41394.243
8307.841
1531.843
9232.766
572.555
4065.150
5138.599
5259.847
21.206
5784.169
98.295
3086.868
159.968
5701.063
4929.115
3.317
30.953
4580.442
21761.377
8230.847
24275.159
13480.094
2124.076
7.755
10781.694
110.424
5999.304
2659.388
12.530
2500.097
34395.400
12315.238
4139.085
1453.872
3823.075
17062.805
12535.938
7800.872
19231.113
1693.345
626.112
38329.003
30516.479
1305.518
3858.661
3216.991
3748.327
1146.028
16317.691
6573.191
1998.447
9108.542
5571.528
17328.606
10386.861
1096.998
26775.686
1357.168
6627.291
9479.336
21103.074
26.217
402.124
21882.259
572.555
11.722
1464.674
19386.640
1019.936
1725.520
3.556
5416.763
15114.556
40978.346
3188.335
11393.610
14978.048
5160.349
11335.917
101.511
12055.893
3984.732
6.977
279.860
27721.649
4186.187
3599.332
8362.920
435.211
412.095
7282.729
953.543
17771.792
50194.587
1357.168
4620.962
18434.745
12257.362
5.863
7.375
2650.719
1323.034
465.769
4709.333
2977.388
1357.168
22728.199
18525.972
21.761
32541.607
18128.849
2688.922
17769.548
5387.046
0.785
98.175
58.760
14.758
12313.078
17154.116
2342.350
10770.568
2712.869
21989.816
6862.611
3188.198
45.869
4940.198
51057.008
12576.827
10302.382
5355.590
3059.395
373.443
38131.215
13351.337
2650.719
16599.370
54.463
124.430
23061.401
177.875
3858.661
1098.921
1065.724
7179.615
15940.440
5223.308
1725.520
20660.179
16477.217
23761.413
23129.580
4313.030
22418.024
2155.133
11716.372
3216.991
3728.256
169.646
46.155
2031.904
28257.007
21621.927
2.442
14764.549
37048.131
2155.133
2650.719
1112.657
50.265
12331.447
402.124
16828.166
5632.335
18989.350
624.963
3215.488
11307.894
10637.553
1725.520
35403.503
20.806
269.392
100.238
12620.418
29788.521
89.745
26636.361
6216.182
269.392
766.085
10044.822
58.044
22969.366
464.294
5.625
50.265
11430.607
1534.643
15745.794
3216.991
138.084
15296.368
1725.520
7627.587
2802.248
19147.595
11080.386
1357.168
2132.131
27679.703
8199.462
9463.585
1725.520
2826.561
1415.819
68.787
18.544
5609.074
515.119
402.124
32714.017
698.089
13755.923
6905.892
4115.824
372.030
3216.991
5151.191
28721.392
42124.501
7.118
36764.230
1465.228
785.398
619.666
785.398
7144.129
17029.990
53415.919
10314.470
173.894
4.945
12165.785
2380.262
114.244
195.646
28.680
61.906
15831.052
572.555
7510.436
1615.413
3216.991
3216.991
287.185
949.467
9249.478
15459.401
567.455
26227.255
2908.706
5853.487
4541.388
1453.323
15274.156
12573.668
23967.919
14510.058
3850.801
13884.680
177.872
2943.486
2078.196
4316.423
8111.271
169.646
0.785
34190.788
1439.266
30719.117
44362.907
6.283
12276.730
8851.790
2197.841
15043.126
9248.109
20101.183
782.981
9913.776
26447.359
3.158
30707.800
7411.945
10027.926
17232.908
6153.956
1454.605
14165.775
3091.561
4580.442
7601.418
17374.669
4774.994
6008.349
29229.188
29011.959
13846.308
5807.891
3319.656
4240.660
24765.626
1045.365
1925.356
785.398
646.165
269.392
537.477
0.434
354.585
696.441
402.124
269.392
11673.606
346.572
6.283
572.555
1416.051
1078.408
5237.239
17.623
23817.232
2953.899
1045.365
797.816
5666.310
4600.219
2624.543
5343.001
1259.546
8052.204
34384.916
1329.694
6182.650
12014.866
1724.582
7579.256
3459.963
1391.966
25031.761
1483.543
311.054
22624.861
419.502
572.555
31862.794
142.063
2122.800
3080.641
300.417
60.909
15546.111
9367.165
25432.911
8712.106
18.607
785.398
27739.259
4361.616
183.153
10028.750
4580.442
2155.133
191.799
19502.180
26914.137
6780.897
175.883
29599.876
8362.920
8001.425
3187.786
13546.762
21110.313
19688.996
7872.897
45698.892
4385.564
2386.077
4062.573
12694.137
2772.577
1978.881
50.265
2840.353
6988.495
2088.819
11606.068
5887.285
18472.857
6304.004
14886.942
42197.060
10076.370
15568.043
3390.720
402.124
1777.571
56.948
1389.959
34692.261
44058.234
11717.390
2650.719
21.206
2155.133
1.089
7038.398
1357.168
13068.777
6832.173
1125.759
7617.032
8620.667
269.392
169.646
616.128
34464.441
13238.881
2650.719
39638.966
6955.322
572.555
7570.465
11393.610
177.293
37528.894
12617.441
48572.569
6286.834
17046.412
15145.554
10971.624
27242.616
28409.603
5584.715
2074.921
2039.872
1045.365
25468.387
1379.054
14194.393
4.192
24556.894
42155.456
12694.732
82.648
13503.538
169.646
17397.197
14556.029
14809.468
37451.174
1758.273
1061.037
11433.537
836.050
44832.985
952.764
2352.423
3216.991
1213.758
33489.495
38227.114
20657.695
8746.756
2382.780
20244.999
785.398
402.124
10864.480
3052.047
98.175
1607.913
152.010
11088.659
16635.764
1357.807
4758.922
48.017
36394.391
3811.057
41897.915
3375.884
193.788
1542.885
25065.832
44.873
785.398
9593.807
10015.563
6.659
1950.218
29910.157
6283.185
21.206
1299.795
50.265
38489.072
19565.360
2201.230
9472.733
9193.822
40540.503
2269.821
22750.406
23124.842
4262.897
10245.925
22012.298
7389.971
5931.556
9277.272
4108.439
24.383
180.049
24065.796
19745.957
3726.467
26137.554
140.662
5391.301
1114.831
7697.024
548.499
21.206
3944.112
8400.150
1045.365
1373.101
5081.409
54.168
4451.362
1429.192
232.306
4125.750
7273.572
19015.541
3216.991
729.180
2637.410
25235.585
4704.846
32733.239
6099.010
5801.889
169.646
10755.686
32483.928
41281.667
1725.520
4570.823
1978.057
6283.185
9640.889
11540.957
12917.950
975.109
20946.359
13911.322
13722.742
7715.660
27823.848
3216.991
9573.797
40788.861
50101.106
1357.168
3185.725
346.148
16.986
4.590
13563.749
30782.601
2370.555
5265.563
21984.275
13187.049
23285.937
10584.275
5308.840
21541.135
11914.036
572.555
8488.297
5387.046
10545.060
9778.746
115.707
15.395
3867.926
21104.676
15531.413
3858.661
7198.663
132.630
8377.073
20677.292
8782.574
38242.577
2225.223
17590.058
12617.533
3168.188
1045.365
30445.236
3858.661
3.874
318.853
11945.085
1582.446
269.392
4861.313
17346.910
3853.791
42347.469
1894.392
10923.821
18909.312
38692.759
1298.100
33005.346
35796.025
12789.239
3987.205
7155.393
3858.661
7088.039
4549.299
102.785
3216.991
3095.293
10001.781
2520.812
2.362
1679.533
4.487
1725.520
2224.123
572.555
10256.593
8301.430
38035.571
20854.539
9104.192
3619.315
5610.219
21035.998
497.639
22116.148
27037.512
21.124
12823.168
25767.825
30427.404
178.025
16117.504
10573.311
2701.010
8466.268
4882.138
5.545
16632.989
62.205
5853.218
402.124
1418.340
19061.879
1.725
2906.645
2022.033
3847.825
314.887
22181.996
2650.719
1.465
1357.168
8523.223
23780.774
749.913
27888.167
19788.815
21982.257
9776.227
22573.342
576.933
402.124
6623.797
27264.589
25625.514
9028.229
15595.846
1045.365
1383.803
4580.442
136.094
12240.374
93.872
21847.643
12271.776
9133.829
21988.237
9285.880
2124.580
10554.035
18613.107
30.673
21547.821
4580.442
9455.022
6376.671
693.144
2528.662
11497.458
23336.131
5984.356
11126.572
7469.227
14931.356
45176.242
1536.293
13.166
79.866
1045.365
8125.145
53.847
11868.344
18926.162
33376.808
4140.079
23680.440
19824.713
4941.068
14183.403
57.328
10769.423
42024.576
572.555
3858.661
17052.319
14652.276
24.944
50.265
12787.591
25893.502
14385.833
43130.411
3.715
14876.639
2748.446
158.245
1045.365
39432.923
157.978
2418.633
2136.302
1172.182
1517.197
5626.474
574.546
21.442
1725.520
269.392
24161.089
40337.386
4293.804
1755.160
9236.429
402.124
1045.365
282.697
661.184
572.034
13951.897
10535.021
9143.570
6519.164
58.221
22478.057
12154.758
5449.960
16625.571
37447.016
22402.781
26533.578
33925.277
13636.919
6181.429
18933.674
10114.649
7984.346
2422.204
169.646
17399.578
9174.889
3237.191
5997.131
82.419
238.036
6438.989
7273.572
3337.972
1725.520
269.548
572.555
66.639
21971.958
15249.173
21108.069
21315.399
41.572
6923.201
269.392
5270.286
8101.716
118.683
21521.263
6283.185
9373.931
572.555
11156.243
8257.290
3858.661
12891.897
14872.470
9377.457
6770.954
11986.569
120.179
2482.096
169.646
181.851
2592.445
16288.890
6133.626
12.211
128.207
14332.056
92.630
5.227
10463.923
8004.905
23503.711
14093.658
785.398
1904.796
6469.346
17053.326
5784.418
39006.498
1357.168
21.206
15717.085
16996.640
11024.002
18214.977
528.031
3563.434
1725.520
79.397
2742.906
338.349
1.327
1067.747
33.694
31339.625
3738.528
2618.295
40763.910
11956.303
17801.783
32509.738
12526.277
98.175
2155.133
31439.712
12931.000
29463.346
6103.955
106.604
19881.203
3124.094
6979.841
7273.572
39541.577
265.939
10156.042
8774.025
1627.555
26.535
29152.253
18399.642
0.785
3216.991
5387.046
5.861
6563.487
105.863
8077.067
21072.709
9256.575
50.265
15140.930
21702.951
19303.092
12759.523
6730.889
68.407
98.175
2803.896
43.720
1725.520
35616.575
2198.757
18164.976
8078.716
3719.160
20102.159
2637.410
39503.243
5452.020
2082.729
27647.219
5950.656
7.216
448.360
18610.726
771.442
30678.203
38.783
10743.736
1611.750
460.676
6.283
45.153
19.533
41566.901
222.119
2726.056
150.020
16860.145
2926.609
112.221
8914.445
18964.441
561.301
17939.126
23465.987
28321.018
9463.081
1045.365
8439.711
626.843
11484.683
4611.758
402.124
38890.502
9494.675
2390.839
22.506
13246.390
3074.607
14951.549
491.234
7351.322
24267.832
283.759
13192.543
12928.621
18956.199
937.746
2650.719
24478.459
15394.048
4521.967
515.719
16154.135
3981.115
689.527
163.946
1.009
7320.186
5833.437
23574.826
2261.579
9471.598
19297.185
16593.886
25904.154
26353.584
54.247
3923.971
22388.339
2868.063
47869.422
2109.928
6769.901
10044.731
9001.946
7210.019
153.999
20959.446
4622.289
7386.212
2289.418
65.922
7637.606
29.400
2592.089
27015.134
39938.181
4580.442
3494.247
9779.362
13528.960
169.646
21062.647
19009.039
3294.198
169.646
877.580
18022.322
51821.270
10851.974
23937.515
997.271
16410.549
2155.133
6.283
132.969
11107.891
21992.059
10982.087
46809.928
20510.897
1253.223
30067.707
26615.962
4675.158
269.392
1057.894
28869.242
1868.944
1357.168
21541.044
22.894
12814.514
215.117
16483.811
6593.524
12946.751
11205.620
2650.719
2770.196
39452.000
70.954
704.042
146.523
84.959
18957.290
912.604
6732.690
4154.744
12565.609
80.771
2856.724
19835.519
847.232
544.446
6751.769
22367.106
11716.281
7810.854
27.248
235.171
2869.007
11.257
98.175
11175.474
32585.551
12254.744
1046.556
4509.971
897.348
2650.719
3590.174
272.061
2155.133
5910.140
2297.477
888.477
2155.133
846.902
19.214
1077.583
28068.330
3930.153
26163.104
26860.599
572.555
5766.953
1.465
15701.929
30.113
21.206
18199.554
7719.585
14.582
17202.688
6512.387
1966.012
255.224
21172.539
10514.611
6.283
398.908
50.265
8362.920
12458.165
169.646
291.558
1462.435
3733.400
8928.548
9566.108
2861.773
20310.619
343.413
7.932
3858.661
785.398
16683.631
125.703
1586.842
2186.532
1357.168
1045.365
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[C语言考试练习题_一元二次方程]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">解一元二次方程ax^2+bx+c=0的解。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">
<p><font size="3" face="Times New Roman">a,b,c的值。</font></p>
</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">两个根X1和X2，其中X1&gt;=X2。。 <br />
结果保留两位小数</font></p>]]></output>
<sample_input><![CDATA[1 5 -2
]]></sample_input>
<sample_output><![CDATA[0.37 -5.37
]]></sample_output>
<test_input><![CDATA[1 -2 1]]></test_input>
<test_output><![CDATA[1.00 1.00
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[C语言考试练习题_保留字母]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">编一个程序，输入一个字符串，将组成字符串的所有非英文字母的字符删除后输出。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个字符串，长度不超过80个字符</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">删掉非英文字母后的字符串。</font></p>]]></output>
<sample_input><![CDATA[abc123+xyz.5
]]></sample_input>
<sample_output><![CDATA[abcxyz
]]></sample_output>
<test_input><![CDATA[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]></test_input>
<test_output><![CDATA[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[C语言考试练习题_排列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有4个互不相同的数字，输出由其中三个不重复数字组成的排列。 <br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">4个整数。</font></p>]]></input> 
<output><![CDATA[<pre><p><font size="3" face="Times New Roman">所有排列。</font></p></pre>]]></output>
<sample_input><![CDATA[1 2 3 4
]]></sample_input>
<sample_output><![CDATA[1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
1 2 4
1 4 2
2 1 4
2 4 1
4 1 2
4 2 1
1 3 4
1 4 3
3 1 4
3 4 1
4 1 3
4 3 1
2 3 4
2 4 3
3 2 4
3 4 2
4 2 3
4 3 2

]]></sample_output>
<test_input><![CDATA[1 3 7 9]]></test_input>
<test_output><![CDATA[1 3 7
1 7 3
3 1 7
3 7 1
7 1 3
7 3 1
1 3 9
1 9 3
3 1 9
3 9 1
9 1 3
9 3 1
1 7 9
1 9 7
7 1 9
7 9 1
9 1 7
9 7 1
3 7 9
3 9 7
7 3 9
7 9 3
9 3 7
9 7 3
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[DNA]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于， 小强上中学了，接触到了神圣的名词--DNA.它有一个双螺旋的结构。这让一根筋的小强抓破头皮，&ldquo;要是能画出来就好了&rdquo; 小强喊道。现在就请你帮助他吧</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入包含多组测试数据。第一个整数N（N&lt;=15）,N表示组数，每组数据包含两个整数a,b。a表示一个单位的DNA串的行数，a为奇数且 3&lt;=a&lt;=39。b表示重复度(1&lt;=b&lt;=20)。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">输出DNA的形状，每组输出间有一空行。 </font></p>]]></output>
<sample_input><![CDATA[2
3 1
5 4]]></sample_input>
<sample_output><![CDATA[X X
 X
X X

X   X
 X X
  X
 X X
X   X
 X X
  X
 X X
X   X
 X X
  X
 X X
X   X
 X X
  X
 X X
X   X
]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[IP判断]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">在基于Internet的程序中，我们常常需要判断一个IP字符串的合法性。  <br />
合法的IP是这样的形式：  <br />
A.B.C.D  <br />
其中A、B、C、D均为位于[0, 255]中的整数。为了简单起见，我们规定这四个整数中不允许有前导零存在，如001这种情况。  <br />
现在，请你来完成这个判断程序吧^_^ </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入由多行组成，每行是一个字符串，输入由&ldquo;End of file&rdquo;结束。  <br />
字符串长度最大为30，且不含空格和不可见字符</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每一个输入，单独输出一行  <br />
如果该字符串是合法的IP，输出Y，否则，输出N</font></p>]]></output>
<sample_input><![CDATA[1.2.3.4
a.b.c.d
267.43.64.12
12.34.56.bb
210.43.64.129
-123.4.5.6]]></sample_input>
<sample_output><![CDATA[Y
N
N
N
Y
N]]></sample_output>
<test_input><![CDATA[1.2.3.4
a.b.c.d
267.43.64.12
12.34.56.bb
210.43.64.129
-123.4.5.6]]></test_input>
<test_output><![CDATA[Y
N
N
N
Y
N]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[Jam的计数法]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Jam是个喜欢标新立异的科学怪人。他不使用阿拉伯数字计数，而是使用小 写英文字母计数，他觉得这样做，会使世界更加丰富多彩。在他的计数法中，每个数字的位数都是相同的（使用相同个数的字母），英文字母按原先的顺序，排在前 面的字母小于排在它后面的字母。我们把这样的&ldquo;数字&rdquo;称为Jam数字。在Jam数字中，每个字母互不相同，而且从左到右是严格递增的。每次，Jam还指定 使用字母的范围，例如，从2到10，表示只能使用{b,c,d,e,f,g,h,i,j}这些字母。如果再规定位数为5，那么，紧接在Jam数字 &ldquo;bdfij&rdquo;之后的数字应该是&ldquo;bdghi&rdquo;。（如果我们用U、V依次表示Jam数字&ldquo;bdfij&rdquo;与&ldquo;bdghi&rdquo;，则U〈V，且不存在Jam数字 P，使U〈P〈V）。你的任务是：对于从文件读入的一个Jam数字，按顺序输出紧接在后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就 输出几个。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">有2行，第1行为3个正整数，用一个空格隔开：  <br />
s t w  <br />
（其中s为所使用的最小的字母的序号，t为所使用的最大的字母的序号。w为数字的位数，这3个数满足：1&le;s〈t&le;26, 2&le;w&le;t-s ）  <br />
第2行为具有w个小写字母的字符串，为一个符合要求的Jam数字。  <br />
所给的数据都是正确的，不必验证。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">最多为5行，为紧接在输入的Jam数字后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。每行只输出一个Jam数字，是由w个小写字母组成的字符串，不要有多余的空格。</font></p>]]></output>
<sample_input><![CDATA[2 10 5
bdfij]]></sample_input>
<sample_output><![CDATA[bdghi
bdghj
bdgij
bdhij]]></sample_output>
<test_input><![CDATA[2 10 5
cefij

]]></test_input>
<test_output><![CDATA[ceghi
ceghj
cegij
cehij
cfghi
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[K-进制数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.</font></p>
<p><font size="3" face="Times New Roman">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.  <br />
<br />
例:  <br />
1010230 是有效的7位数  <br />
1000198 无效  <br />
0001235 不是7位数, 而是4位数.  <br />
<br />
给定两个数N和K, 要求计算包含N位数字的有效K-进制数的总数.  <br />
<br />
假设2 &lt;= K &lt;= 10; 2 &lt;= N; 4 &lt;= N+K &lt;= 18.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">两个十进制整数N和K</font></p>]]></input> 
<output><![CDATA[<p>十进制表示的结果</p>]]></output>
<sample_input><![CDATA[2
10]]></sample_input>
<sample_output><![CDATA[90]]></sample_output>
<test_input><![CDATA[3
7]]></test_input>
<test_output><![CDATA[288]]></test_output>
<test_input><![CDATA[8
10]]></test_input>
<test_output><![CDATA[85096170]]></test_output>
<test_input><![CDATA[4
10]]></test_input>
<test_output><![CDATA[8829]]></test_output>
<test_input><![CDATA[8
9]]></test_input>
<test_output><![CDATA[35721216]]></test_output>
<test_input><![CDATA[2
10]]></test_input>
<test_output><![CDATA[90]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[Tom数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">正整数的各位数字之和被Tom称为Tom数。求输入数（&lt;2^32）的Tom数!</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">每行一个整数(&lt;2^32).</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">每行一个输出,对应该数的各位数之和.</font></p>]]></output>
<sample_input><![CDATA[12345
56123
82
]]></sample_input>
<sample_output><![CDATA[15
17
10
]]></sample_output>
<test_input><![CDATA[12345
56123
82
3
876905
879678865
2147483647
4294967295
]]></test_input>
<test_output><![CDATA[15
17
10
3
35
64
46
57
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】"水仙花数"问题1]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">判断一个数是否为&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指这样的一人数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3. </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个三位数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">1或者0(1代表此数为水仙花数,0代表此数不是水仙花数)</font></p>]]></output>
<sample_input><![CDATA[371]]></sample_input>
<sample_output><![CDATA[1]]></sample_output>
<test_input><![CDATA[370]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[152]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[371]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[407]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[153]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[153]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[555]]></test_input>
<test_output><![CDATA[0]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】"水仙花数"问题2]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输出所有的&quot;水仙花数&quot;.所谓&quot;水仙花数&quot;是指这样的一个三位数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3.</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出所有的&quot;水仙花数&quot;(从小到大的顺序输出)</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】8除不尽的数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个自然数被8除余1,所得的商被8除也余1, <br />
再将第二次的商被8除后余7,最后得到一个商为a. <br />
又知这上自然数被17除余4.所得的商被17除余15, <br />
最的得到一个商是a的2倍. <br />
<br />
求这个自然数.</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p>1993</p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】亲密数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">两个不同的自然数A和B，如果整数A的全部因子(包括1，不包括A本身)之和等于B；且整数B的全部因子(包括1，不包括B本身)之和等于A，则将整数A和B称为亲密数。求3000以内的全部亲密数。</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">3000以内的全部亲密数(输出格式:(A,B)，不加换行，不加分隔符号) <br />
一对亲密数只输出一次, 小的在前</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[(220,284)(1184,1210)(2620,2924)]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">按照亲密数定义，要判断数a是否有亲密数，只要计算出a的全部因子的累加和为b，再计算b的全部因子的累加和为n，若n等于a则可判定a和b是亲密数。计算数a的各因子的算法： <br />
用a依次对i(i=1~a/2)进行模运算，若模运算结果等于0，则i为a的一个因子；否则i就不是a的因子。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】列出最简真分数序列*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">按递增顺序依次列出所有分母为40，分子小于40的最简分数。</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">分数之间用逗号分开(含最末逗号)</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[1/40,3/40,7/40,9/40,11/40,13/40,17/40,19/40,21/40,23/40,27/40,29/40,31/40,33/40,37/40,39/40,]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">对分子采用穷举法，利用最大公约数的方法，判断分子与40是否构成真分数。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】大、小写问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入一串字符,将其中的大写变成小写，若不为大写则原样输出</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">任意字符串(长度在100以内)以回车表示输入结束</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">将其中的大写 输出相应的小写，若不为大写则原样输出</font></p>]]></output>
<sample_input><![CDATA[A123b]]></sample_input>
<sample_output><![CDATA[a123b]]></sample_output>
<test_input><![CDATA[afdadf123A
]]></test_input>
<test_output><![CDATA[afdadf123a]]></test_output>
<test_input><![CDATA[dfgjHJG65JG
]]></test_input>
<test_output><![CDATA[dfgjhjg65jg]]></test_output>
<test_input><![CDATA[dfgjHJG65JG
]]></test_input>
<test_output><![CDATA[dfgjhjg65jg]]></test_output>
<test_input><![CDATA[dfgjHJG65JG
]]></test_input>
<test_output><![CDATA[dfgjhjg65jg]]></test_output>
<test_input><![CDATA[dfgjHJG65JG]]></test_input>
<test_output><![CDATA[dfgjhjg65jg]]></test_output>
<test_input><![CDATA[I LOVE YOU
]]></test_input>
<test_output><![CDATA[i love you]]></test_output>
<test_input><![CDATA[dfgjHJG65JG]]></test_input>
<test_output><![CDATA[dfgjhjg65jg]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】委派任务*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">某侦察队接到一项紧急任务，要求在A、B、C、D、E、F六个队员中尽可能多地挑若干人，但有以下限制条件： <br />
1)A和B两人中至少去一人； <br />
2)A和D不能一起去； <br />
3)A、E和F三人中要派两人去； <br />
4)B和C都去或都不去； <br />
5)C和D两人中去一个； <br />
6)若D不去，则E也不去。 <br />
问应当让哪几个人去？ </font><br />
</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">要派出的人 <br />
若有多个，按字母递增顺序排列，用逗号分开（含末尾逗号） <br />
<br />
</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[A,B,C,F,]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】字符串正反连接]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">所给字符串正序和反序连接，形成新串并输出</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">任意字符串（长度&lt;=50）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">字符串正序和反序连接所成的新字符串</font></p>]]></output>
<sample_input><![CDATA[123abc]]></sample_input>
<sample_output><![CDATA[123abccba321]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】尼科彻斯定理]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">验证尼科彻斯定理，即：任何一个正整数的立方都可以写成一串连续奇数的和。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">任一正整数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">该数的立方分解为一串连续奇数的和</font></p>]]></output>
<sample_input><![CDATA[13]]></sample_input>
<sample_output><![CDATA[13*13*13=219=157+159+161+163+165+167+169+171+173+175+177+179+181]]></sample_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[100*100*100=1000000=9901+9903+9905+9907+9909+9911+9913+9915+9917+9919+9921+9923+9925+9927+9929+9931+9933+9935+9937+9939+9941+9943+9945+9947+9949+9951+9953+9955+9957+9959+9961+9963+9965+9967+9969+9971+9973+9975+9977+9979+9981+9983+9985+9987+9989+9991+9993+9995+9997+9999+10001+10003+10005+10007+10009+10011+10013+10015+10017+10019+10021+10023+10025+10027+10029+10031+10033+10035+10037+10039+10041+10043+10045+10047+10049+10051+10053+10055+10057+10059+10061+10063+10065+10067+10069+10071+10073+10075+10077+10079+10081+10083+10085+10087+10089+10091+10093+10095+10097+10099]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1*1*1=1=1]]></test_output>
<test_input><![CDATA[2]]></test_input>
<test_output><![CDATA[2*2*2=8=3+5]]></test_output>
<test_input><![CDATA[2]]></test_input>
<test_output><![CDATA[2*2*2=8=3+5]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[20*20*20=8000=381+383+385+387+389+391+393+395+397+399+401+403+405+407+409+411+413+415+417+419]]></test_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">本题是一个定理，我们先来证明它是成立的。  <br />
对于任一正整数a,不论a是奇数还是偶数，整数(a&times;a-a+1)必然为奇数。  <br />
构造一个等差数列，数列的首项为(a&times;a-a+1),等差数列的差值为2(奇数数列)，则前a项的和为：  <br />
a&times;((a&times;a-a+1))+2&times;a(a-1)/2  <br />
=a&times;a&times;a-a&times;a+a+a&times;a-a  <br />
=a&times;a&times;a  <br />
定理成立。证毕。  <br />
通过定理的证明过程可知L所要求的奇数数列的首项为(a&times;a-a+1)，长度为a。编程的算法不需要特殊设计，可按照定理的证明过直接进行验证。  </font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】排序问题<1>]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">将四个整数进行从小到大的顺序排列,</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">四个整数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">从小到大输出这四个数</font></p>]]></output>
<sample_input><![CDATA[5 3 4 2
]]></sample_input>
<sample_output><![CDATA[2 3 4 5

]]></sample_output>
<test_input><![CDATA[45 21 12354 55]]></test_input>
<test_output><![CDATA[21 45 55 12354]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】排序问题<2>]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">将十个数进行从大到小的顺序进行排列</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">十个整数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">以从大到小的顺序输出这个十个数</font></p>]]></output>
<sample_input><![CDATA[1 2 3 4 5 6 7 8 9 10
]]></sample_input>
<sample_output><![CDATA[10 9 8 7 6 5 4 3 2 1
]]></sample_output>
<test_input><![CDATA[-52 -63 -54 
-65 -5 2 65 12 2 0]]></test_input>
<test_output><![CDATA[65 12 2 2 0 -5 -52 -54 -63 -65 ]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】数字母]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入一个字符串,数出其中的字母的个数.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个字符串，不包含空格（长度小于100）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">字符串中的字母的个数</font></p>]]></output>
<sample_input><![CDATA[124lfdk54AIEJ92854&%$GJ]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】斐波纳契数列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">斐波纳契数列  <br />
1，1，2，3，5，8，13，21，34，55，89&hellip;&hellip;这个数列则称为&ldquo;斐波纳契数列&rdquo;，其中每个数字都是&ldquo;斐波纳契数&rdquo;。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个整数N(N不能大于40)</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">由N个&ldquo;斐波纳契数&rdquo;组成的&ldquo;斐波纳契数列&rdquo;。</font></p>]]></output>
<sample_input><![CDATA[6]]></sample_input>
<sample_output><![CDATA[1 1 2 3 5 8]]></sample_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1 ]]></test_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[1 1 2 3 5 8 13 21 34 55 ]]></test_output>
<test_input><![CDATA[2]]></test_input>
<test_output><![CDATA[1 1 ]]></test_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[1 1 2 3 5 ]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 ]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 ]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】最大数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入若干个整数,以-1标记输入结束。输出其中的最大数</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">若干个整数。（以-1标记输入结束）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">其中的最大数</font></p>]]></output>
<sample_input><![CDATA[1 2 5 7 8 6 1 -6 -1]]></sample_input>
<sample_output><![CDATA[8]]></sample_output>
<test_input><![CDATA[ 9 4 56 2 32 2 51 5 2 1 24 1 54 124 1 2545 55  -1]]></test_input>
<test_output><![CDATA[2545]]></test_output>
<test_input><![CDATA[-457875
-500
-48452
 -1]]></test_input>
<test_output><![CDATA[-500]]></test_output>
<test_input><![CDATA[12 45 748 12 34 57  2455 48 42 485 2 56 45 12 5 45 -1]]></test_input>
<test_output><![CDATA[2455]]></test_output>
<test_input><![CDATA[12 54 587 54  45 75 
12 -51 -454  8 541 54 84 87 100 13 52 15 4700 -1]]></test_input>
<test_output><![CDATA[4700]]></test_output>
<test_input><![CDATA[12 54 587 54  45 75 8 541 54 84 87 100 13 52 15 4700 -1]]></test_input>
<test_output><![CDATA[4700]]></test_output>
<test_input><![CDATA[12 54 587 54  45 75 8 541 54 84 87 100 13 52 15 4700 -1]]></test_input>
<test_output><![CDATA[4700]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求1+2!+3!+...+N!的和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">求1+2!+3!+...+N!的和 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">正整数N（N〈=20）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">1+2!+3!+...+N!的和 (结果为整数形式)</font></p>]]></output>
<sample_input><![CDATA[3]]></sample_input>
<sample_output><![CDATA[9]]></sample_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[153]]></test_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[4037913]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[2561327494111820300]]></test_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[9]]></test_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[9]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求PI*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
<test_input><![CDATA[0]]></test_input>
<test_output><![CDATA[3.141591]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求s=a+aa+aaa+aaaa+aa...a的值]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个一位的整数。  <br />
例如2+22+222+2222+22222(此时共有5个数相加)</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">整数a和n（n个数相加，1&lt;= n, a&lt;=9）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">s的值</font></p>]]></output>
<sample_input><![CDATA[2 2]]></sample_input>
<sample_output><![CDATA[24]]></sample_output>
<test_input><![CDATA[3,3]]></test_input>
<test_output><![CDATA[369]]></test_output>
<test_input><![CDATA[2,2]]></test_input>
<test_output><![CDATA[24]]></test_output>
<test_input><![CDATA[2,9]]></test_input>
<test_output><![CDATA[246913578]]></test_output>
<test_input><![CDATA[2 9]]></test_input>
<test_output><![CDATA[246913578]]></test_output>
<test_input><![CDATA[5,6]]></test_input>
<test_output><![CDATA[617280]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求具有abcd=(ab+cd)2性质的四位数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">3025这个数具有一种独特的性质：将它平分为二段，即30和25，使之相加后求平方，即(30+25)2，恰好等于3025本身。请求出具有这样性质的全部四位数</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font face="Times New Roman">满足题意的数全部四位数(从小到大输出,且数之间用两个空格分开) </font><br />
<br />
</p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[2025  3025  9801  ]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">根据题意可以采用穷举法，对所有四位数进行判断，从而筛选出符合这种性质的四位数。具体算法实现，可任取一个四位数，将其截为两部分，前两位为a，后两位为b，然后套用公式计算并判断。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求函数值]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">按如下递归公式求函数值。  <br />
x=1时 f(x)=10；x&gt;1时 f(x)=f(x-1)+2</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">整型变量x</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">f(x)</font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[28]]></sample_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[208]]></test_output>
<test_input><![CDATA[1569]]></test_input>
<test_output><![CDATA[3146]]></test_output>
<test_input><![CDATA[150]]></test_input>
<test_output><![CDATA[308]]></test_output>
<test_input><![CDATA[1000]]></test_input>
<test_output><![CDATA[2008]]></test_output>
<test_input><![CDATA[9009]]></test_input>
<test_output><![CDATA[18026]]></test_output>
<test_input><![CDATA[9009]]></test_input>
<test_output><![CDATA[18026]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[10]]></test_output>
<test_input><![CDATA[1987]]></test_input>
<test_output><![CDATA[3982]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求矩阵的两对角线上的元素之和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">求矩阵的两对角线上的元素之和</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">矩阵的行数N  <br />
和一个N*N的整数矩阵a[N][N](N&lt;=10) </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">所输矩阵的两对角线上的元素之和</font></p>]]></output>
<sample_input><![CDATA[3
1 2 3 
4 5 6 
7 8 9]]></sample_input>
<sample_output><![CDATA[25]]></sample_output>
<test_input><![CDATA[1
13]]></test_input>
<test_output><![CDATA[13]]></test_output>
<test_input><![CDATA[10
-5077 7575 -9015 1420 -1304 -6556 6974 724 
3732 9826 -1998 -886 9605 -555 -7086 2682 
7230 -6152 -3613 7432 -8498 -879 4177 3953 -8413 8645 
7448 -850 464 434 -5163 5440 3974 -5667 -1302 8380 
6996 -2697 -5927 -2612 -657 -9961 5238 9554 -6059 9153 -5408 -8160 5224 6938 1349 3716 7059 469 -7467 -6285 -8003 
8431 503 -9802 -4323 -8807 631 -2675 -5028 -7781 -8515 -4026 8251 -5779 2857 -5142 -6070 -3310 9669 7211 -7137 
7884 7280 -3522 -3044 -5537 -4554 8686 -661 -3236 -2374 3882 8978 -5605 -2071 -220 4793 -1428 -8797 -2721 -5716 2346 9377 557]]></test_input>
<test_output><![CDATA[-13201]]></test_output>
<test_input><![CDATA[3
3 1 4
1 5 9
2 6 3]]></test_input>
<test_output><![CDATA[17]]></test_output>
<test_input><![CDATA[3
3 1 4
1 5 9
2 6 3]]></test_input>
<test_output><![CDATA[17]]></test_output>
<test_input><![CDATA[3
1 2 3 
4 5 6 
7 8 9]]></test_input>
<test_output><![CDATA[25
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求素数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">求出1-N中的所有素数 <br />
<br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">大于1的正整数N</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">1-N中的所有素数,(以从小到大的格式输出)</font></p>]]></output>
<sample_input><![CDATA[9
]]></sample_input>
<sample_output><![CDATA[2 3 5 7 
]]></sample_output>
<test_input><![CDATA[1234]]></test_input>
<test_output><![CDATA[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 ]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】求车速]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一辆以固定速度行驶的汽车，司机在上午10点看到里程表上的读数是一个对称数(即这个数从左向右读和从右向左读是完全一样的)，为95859。两小时后里程表上出现了一个新的对称数。问该车的速度是多少？新的对称数是多少？</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[95959]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">根据题意，设所求对称数为i，其初值为95589，对其依次递增取值，将i值的每一位分解后与其对称位置上的数进行比较，若每个对称位置上的数皆相等，则可判定i即为所求的对称数。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】百钱百鸡问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">中国古代数学家张丘建在他的《算经》中提出了著名的&ldquo;百钱买百鸡问题&rdquo;：鸡翁一，值钱五，鸡母一，值钱三，鸡雏三，值钱一，百钱买百鸡，问翁、母、雏各几何？</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman"><br />
</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">给出所有的解，每组解占一行  <br />
解的顺序：按&ldquo;字典序&rdquo;排列，即公鸡数少的在前；公鸡数相同，母鸡数少的在前  <br />
格式:  <br />
cock=%d,hen=%d,chicken=%d\n</font></p>]]></output>
<sample_input><![CDATA[13 14.1
12.2 12.3
15 18
22.2 23.5
33.45 33.56
67.73 67.92]]></sample_input>
<sample_output><![CDATA[cock=0,hen=25,chicken=75
cock=4,hen=18,chicken=78
cock=8,hen=11,chicken=81
cock=12,hen=4,chicken=84]]></sample_output>
<test_input><![CDATA[13 14.1
12.2 12.3
15 18
22.2 23.5
33.45 33.56
67.73 67.92]]></test_input>
<test_output><![CDATA[19]]></test_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">设鸡翁、鸡母、鸡雏的个数分别为x,y,z，题意给定共100钱要买百鸡，若全买公鸡最多买20只，显然x的值在0~20之间；同理，y的取值范围在0~33之间，可得到下面的不定方程：  <br />
5x+3y+z/3=100  <br />
x+y+z=100  <br />
所以此问题可归结为求这个不定方程的整数解。  <br />
由程序设计实现不定方程的求解与手工计算不同。在分析确定方程中未知数变化范围的前提下，可通过对未知数可变范围的穷举，验证方程在什么情况下成立，从而得到相应的解。  <br />
<br />
注意：浮点数的比较不准确  <br />
</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】立方和不等式]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">试求满足下述立方和不等式的m的整数解。  <br />
1^3+2^3+...+m^3〈=n  <br />
本题算法如下：  <br />
对指定的n，设置求和循环，从i=1开始，i递增1取值，把i3(或i*i*i)累加到s，直至s&gt;=n，脱离循环作相应的打印输出。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">正整数n</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">不等式的整数解 </font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[4]]></test_output>
<test_input><![CDATA[36]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[1548]]></test_input>
<test_output><![CDATA[8]]></test_output>
<test_input><![CDATA[1000000]]></test_input>
<test_output><![CDATA[44]]></test_output>
<test_input><![CDATA[4874]]></test_input>
<test_output><![CDATA[11]]></test_output>
<test_input><![CDATA[1000000]]></test_input>
<test_output><![CDATA[44]]></test_output>
<test_input><![CDATA[35]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[1542]]></test_input>
<test_output><![CDATA[8]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】素数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">编写一个程序判断一个数是否为素数</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">整数</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">1或0(其中1表示此数为素数,0为表示为不是素数) </font><br />
<br />
</p>]]></output>
<sample_input><![CDATA[5
]]></sample_input>
<sample_output><![CDATA[1
]]></sample_output>
<test_input><![CDATA[199]]></test_input>
<test_output><![CDATA[1]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】自守数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">自守数是指一个数的平方的尾数等于该数自身的自然数。 <br />
例如： <br />
25^2=625 <br />
76^2=5776 <br />
9376^2=87909376 <br />
请求出200000以内的自守数?</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font face="Times New Roman">200000以内的自守数(包括0, 数之间用两个空格分开) </font><br />
<br />
</p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[0  1  5  6  25  76  376  625  9376  90625  109376  ]]></sample_output>
<hint><![CDATA[<p><font face="Times New Roman">若采用&ldquo;求出一个数的平方后再截取最后相应位数&rdquo;的方法显然是不可取的，因为计算机无法表示过大的整数。 <br />
分析手工方式下整数平方(乘法)的计算过程，以376为例： <br />
376 被乘数 <br />
X 376 乘数 <br />
---------- <br />
2256 第一个部分积=被乘数*乘数的倒数第一位 <br />
2632 第二个部分积=被乘数*乘数的倒数第二位 <br />
1128 第三个部分积=被乘数*乘数的倒数第三位 <br />
---------- <br />
141376 积 <br />
本问题所关心的是积的最后三位。分析产生积的后三位的过程，可以看出，在每一次的部分积中，并不是它的每一位都会对积的后三位产生影响。总结规律可以得到：在三位数乘法中，对积的后三位产生影响的部分积分别为： <br />
第一个部分积中：被乘数最后三位*乘数的倒数第一位 <br />
第二个部分积中：被乘数最后二位*乘数的倒数第二位 <br />
第三个部分积中：被乘数最后一位*乘数的倒数第三位 <br />
将以上的部分积的后三位求和后截取后三位就是三位数乘积的后三位。这样的规律可以推广到同样问题的不同位数乘积。 <br />
按照手工计算的过程可以设计算法编写程序。 </font><br />
<br />
</p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】自由落体问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个球从100m高度自由落下,每次落地后反跳回原来高度的一半,再落下,再反弹.求它在第N次落地时共经过多少米? <br />
</font></p>]]></description>
<input><![CDATA[<p><b> </b></p>
<p><font size="3" face="Times New Roman"> 反弹的次数N</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">小球经过的路程(保留四位小数)</font></p>]]></output>
<sample_input><![CDATA[2]]></sample_input>
<sample_output><![CDATA[200.0000]]></sample_output>
<test_input><![CDATA[1
]]></test_input>
<test_output><![CDATA[100.0000]]></test_output>
<test_input><![CDATA[20
]]></test_input>
<test_output><![CDATA[299.9996]]></test_output>
<test_input><![CDATA[200
]]></test_input>
<test_output><![CDATA[300.0000]]></test_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[299.6094]]></test_output>
<test_input><![CDATA[10
]]></test_input>
<test_output><![CDATA[299.6094]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】舍罕王的失算]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">相传国际象棋是古印度舍罕王的宰相达依尔发明的.舍罕王十分喜爱象棋,决定让宰相自己选择何种赏赐.这位聪明的宰相指着8*8共64格的象棋说:陛下,请您赏给我一些麦子吧.就在棋盘的第1格放1粒,第2格放2粒,第三格放4粒,以后每一格都比前一格增加一位,依此放完棋盘一64格,我就感激不尽了.舍罕王让人扛了一袋麦子,他要兑现他的许诺. <br />
请问,国王要兑现他的许诺共要多少粒麦子赏赐他的宰相?</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">以整数形式输出,不要其它符号</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[18446744073709552000]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">应该是个很大的数,要考虑数的精度问题! 用double类型，输出尽可能精确的结果。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】角谷猜想]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">角谷猜想:  <br />
日本一位中学生发现一个奇妙的&ldquo;定理&rdquo;，请角谷教授证明，而教授无能为力，于是产生角谷猜想。猜想的内容是：任给一个自然数，若为偶数除以2，若为奇数则乘3加1，得到一个新的自然数后按照上面的法则继续演算，若干次后得到的结果必然为1。请编程验证。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">任一正整数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">演算的过程</font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[10/2=5
5*3+1=16
16/2=8
8/2=4
4/2=2
2/2=1]]></sample_output>
<test_input><![CDATA[268]]></test_input>
<test_output><![CDATA[268/2=134
134/2=67
67*3+1=202
202/2=101
101*3+1=304
304/2=152
152/2=76
76/2=38
38/2=19
19*3+1=58
58/2=29
29*3+1=88
88/2=44
44/2=22
22/2=11
11*3+1=34
34/2=17
17*3+1=52
52/2=26
26/2=13
13*3+1=40
40/2=20
20/2=10
10/2=5
5*3+1=16
16/2=8
8/2=4
4/2=2
2/2=1]]></test_output>
<test_input><![CDATA[268]]></test_input>
<test_output><![CDATA[268/2=134
134/2=67
67*3+1=202
202/2=101
101*3+1=304
304/2=152
152/2=76
76/2=38
38/2=19
19*3+1=58
58/2=29
29*3+1=88
88/2=44
44/2=22
22/2=11
11*3+1=34
34/2=17
17*3+1=52
52/2=26
26/2=13
13*3+1=40
40/2=20
20/2=10
10/2=5
5*3+1=16
16/2=8
8/2=4
4/2=2
2/2=1]]></test_output>
<test_input><![CDATA[123]]></test_input>
<test_output><![CDATA[123*3+1=370
370/2=185
185*3+1=556
556/2=278
278/2=139
139*3+1=418
418/2=209
209*3+1=628
628/2=314
314/2=157
157*3+1=472
472/2=236
236/2=118
118/2=59
59*3+1=178
178/2=89
89*3+1=268
268/2=134
134/2=67
67*3+1=202
202/2=101
101*3+1=304
304/2=152
152/2=76
76/2=38
38/2=19
19*3+1=58
58/2=29
29*3+1=88
88/2=44
44/2=22
22/2=11
11*3+1=34
34/2=17
17*3+1=52
52/2=26
26/2=13
13*3+1=40
40/2=20
20/2=10
10/2=5
5*3+1=16
16/2=8
8/2=4
4/2=2
2/2=1]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】计算1977！*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">编写一个程序，计算1977！的值，</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
<test_input><![CDATA[0]]></test_input>
<test_output><![CDATA[44885501861451087214610857079909248837424492260428166724654147729643971700105425720084828218702600864349140553199425461195269756193449196420567670679997930497776962868627670814088525137310931384053497107655953166587777978189922585102015543252313842383879336452450405459365865930993882304967506579365573169114407061415044954204598042872984994370362994974190731648365853764021641267208890952183486957937797501412079339876017057593846219506921136683729082140979815738837181904628215025970879798689459975470705399719623801943630265034717650140070948581455541860388599570712955903767340302796772249678308667271334347735171920753722738382693169959755895777926922251934138946424062651593626615221554668142680371533735545526245936393642639820076708459169410776182481701982480050935429118156542429067920764915432851090578762675010478117563049656075543746119739717069866844883357409792569209134960636899425405149847065831281602082518075830646453654516317941696388277090166892581177070312338391653451955318906268079481790194265751853219151144318930316453953750991148493823206443369425944001941242917619527312311207417490693701494050808890878867975845117860433305316607551476965975790906896956127068298433273240281529950530069641805218400403258304360527381746385960815854239125565833311599210531902596579244149649008262885625747559728294814901871961517895638622905618910600921127432523435482034431607171597093293499891539807469664419507507385877763852240766577618864272175955102012797157374020057234790470573845442607086246849758817092472168600233686805040307801018904746900136895007446767892015103691546758917875283121559678424003351902375286355906676294721988128226509353084890739795591400978292429823019720587768866778565392965756177032714260472652522638182042178310497913363256666800211643586936480222169051736890119033575641362239097097668967707166546262165398342392082223840669956935518432433500512388128400501454567656003140699526312023215530969441249645000266981731474774311788566684103080652651130203579577659975621990943301760656291769606581621697893381784095276308563096667204798424584607702111698065254798376863076775838978795969975490569630809412346134850519967391026203435895655178226018567556450547196780276455924702875584894370421382586806714454592324162291540557289594093207488369616272458093646865153652591651977875393766158034846660994538470440002956734058798262392142018920993818689377588368163212024980190732396123717654885345318311881246452386979748492361608880215366959550154169889976098868177465811974997151687956412035252091325327239663869718509994035950918164411361389182525735435503547508839069279412344659861985920520906072587123123331095210491314236109240894403174951136822689796682524419281202547410727207049300182313660882768899486299620250523429591273583672949060001392324716645374632799121425207847994631057230794080496305639953304416917362257038854013896602584668330878544023543613061625753736164860737224928877680952653955796563792519162354541809473826165637051852050551375789673906991015231770191344532237230197212247808977750167304211358001556586938445903710297655467254175868400223251027316617594966819372453229090075416331169907476721079357279340658265132544616671356523759070808402554409562998869466175554581595720186681291377238031229963602424692724581562963871555299756846210719567248993090291643090340865372994247770175629123166395093036590992401428163026242637631276118954137752850608058698188636249011898545242604954174231816312797226812573427520943156653441116944356313617111649439782483116345998865356371264021702934385830524607545916082681723336300525740351901199785928918756667131759364856921713383210912328024559654704854102702259188968835912529499829982173477142559122574238026368742589720302024351936092912062935207156160753422673950733411087659019615053695175512684860561708230621159432059777334251461120470573475673358987108714856295142438953966517877419012271749890653388333329644505840068967629673118338646511218029658964431806630859185514092919508645264791768635043717176995406906564969624139415056784502969192669845401546983119762050259532817708831129549658092293235478320212147238061012342575368912996276889850467927800530591024505261738190292620196591471057917771997314616468851435648447291509773768541016965006318582734773265425619413143971696759006852267259561850525423115448245064957917308932248736590889553216053395073528665556848023503474296872182653139085069088572995129970277847947107821860675145364682650925420911412190721877818056372224222386334296773926506377426553303395543283286979254479006385723721651473737581750366456411044778457816144171346913394986370709474086023995999519809157066651288416873822563589323100234110838358055086897561674267091601132114100558679834327264396337664219084247730733599995905528037136968919519302002171318340744996774790395419281259057908266922735066452279956814516691434241768267941233868352917686780465248273578999914786724525402231196812975707174605005153159430528247125884412573041717023369550991289730066133225519782887483548537172695747744050948960901844040458316467701938297164400940155373802267886187842636408654937504031184246746956396377352375369130175324314589462528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]]></test_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">1977！的值超过计算机所能表示的整数范围，请考虑其他技巧，假设 1977！之值不超过10000位用一个含有10000个元素的整型数组num表示其结果，每个元素存放一位，num[0]存入个位数，num[]存入十 位数，依次类推&hellip;&hellip;8！=40320，当前最高位len=4，求9！与各位依次相乘rum保存当前的进位数字。（0&lt;=rem&lt;9）.  <br />
1)rem置初始值0.  <br />
2）i=0:rem=rem+num[0]*9=0+0=0。num[0]=rem%10=0，rem=rem/10=0。  <br />
3）i=1:rem=rem+num[1]*9=0+18=18。num[1]=rem%10=8，rem=rem/10=1。  <br />
4）i=2:rem=rem+num[2]*9=1+27=28。num[2]=rem%10=8，rem=rem/10=2。  <br />
5）i=3:rem=rem+num[3]*9=2+0=2。num[3]=rem%10=2，rem=rem/10=0。  <br />
6）i=4:rem=rem+num[4]*9=0+36=36。num[4]=rem%10=6，rem=rem/10=3。  <br />
7）rem=3，说明有进位，数组最高位增加1，len=len+1=5，num[5]=rem%10=3，rem=rem/10=0，结束。  <br />
num各位结果为：3、6、2、8、8、0。即9！=362880 </font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】计算1~N之间所有奇数之和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">计算1~N之间所有奇数之和</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">正整数N</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">1~N之间所有奇数之和</font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[25]]></sample_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[2500]]></test_output>
<test_input><![CDATA[500]]></test_input>
<test_output><![CDATA[62500]]></test_output>
<test_input><![CDATA[1000]]></test_input>
<test_output><![CDATA[250000]]></test_output>
<test_input><![CDATA[254]]></test_input>
<test_output><![CDATA[16129]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】计算t=1+1/2+1/3+...+1/n]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">计算t=1+1/2+1/3+...+1/n</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">整型变量n </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">t(保留六位小数)</font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[2.928968 ]]></sample_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[1.833333]]></test_output>
<test_input><![CDATA[321534]]></test_input>
<test_output><![CDATA[13.258076]]></test_output>
<test_input><![CDATA[123]]></test_input>
<test_output><![CDATA[5.393460]]></test_output>
<test_input><![CDATA[45]]></test_input>
<test_output><![CDATA[4.394948]]></test_output>
<test_input><![CDATA[12]]></test_input>
<test_output><![CDATA[3.103211]]></test_output>
<test_input><![CDATA[
12]]></test_input>
<test_output><![CDATA[3.103211]]></test_output>
<test_input><![CDATA[654258]]></test_input>
<test_output><![CDATA[13.968473]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1.000000]]></test_output>
<test_input><![CDATA[123456]]></test_input>
<test_output><![CDATA[12.300860]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】计算一个整数N的阶乘]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">计算一个整数N的阶乘</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个整数N, (0〈=N〈=12)</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">整数N的阶乘.</font></p>]]></output>
<sample_input><![CDATA[5]]></sample_input>
<sample_output><![CDATA[120]]></sample_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[3628800]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[12]]></test_input>
<test_output><![CDATA[479001600]]></test_output>
<test_input><![CDATA[0]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[3628800]]></test_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[120]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">整型变量m</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">t(保留六位小数)</font></p>]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[0.450232]]></sample_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[0.450232]]></test_output>
<test_input><![CDATA[40]]></test_input>
<test_output><![CDATA[0.379756]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[0.403837]]></test_output>
<test_input><![CDATA[20000]]></test_input>
<test_output><![CDATA[0.355116]]></test_output>
<test_input><![CDATA[30]]></test_input>
<test_output><![CDATA[0.387850]]></test_output>
<test_input><![CDATA[30]]></test_input>
<test_output><![CDATA[0.387850]]></test_output>
<test_input><![CDATA[500]]></test_input>
<test_output><![CDATA[0.357064]]></test_output>
<test_input><![CDATA[9]]></test_input>
<test_output><![CDATA[0.460232]]></test_output>
<test_input><![CDATA[60]]></test_input>
<test_output><![CDATA[0.371594]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】谁家孩子跑最慢* ]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">张王李三家各有三个小孩。一天，三家的九个孩子在一起比赛短跑，规定不分年龄大小，跑第一得9分，跑第2得8分，依此类推。比赛结果各家的总分相同，且这些孩子没有同时到达终点的，也没有一家的两个或三个孩子获得相连的名次。已知获第一名的是李家的孩子，获得第二的是王家的孩子。问获得最后一名的是谁家的孩子？</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出最后一名的那家的姓的一个字母且以大写输出(若为张家,则输出Z)</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[W]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">按题目的条件，共有1+2+3+...+9=45分，每家的孩子的得分应为15分。根据题意可知：获第一名的是李家的孩子，获第二名的是王家的孩子，则可推出：获第三名的一定是张家的孩子。由&ldquo;这些孩子没有同时到达终点的&rdquo;可知：名次不能并列，由&ldquo;没有一家的两个或三个孩子获得相连的名次&rdquo;可知：第四名不能是张家的孩子。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】邮票组合问题*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">某人有四张3分的邮票和三张5分的邮票，用这些邮票中的一张或若干张可以得到多少种不同的邮资？</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">可得到多少种 <br />
</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[19]]></sample_output>
<test_input><![CDATA[13 14.1
12.2 12.3
15 18
22.2 23.5
33.45 33.56
67.73 67.92]]></test_input>
<test_output><![CDATA[19]]></test_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">将问题进行数学分析，不同张数和面值的邮票组成的邮资可用下列公式计算：  <br />
S=3*i+5*j  <br />
其中i为3分邮柰的张数，j为5分的张数  <br />
按题目的要求，3分的邮票可以取0、1、2、3、4张，5分的邮票可以取0、1、2、3张。采用穷举方法进行组合，可以求出这些不同面值不同张数的邮标组合后的邮资。  </font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】阶乘和数*]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个正整数如果等于组成它的各位数字的阶乘之和，该整数称为阶乘和数。 <br />
例如，145=1!+4!+5!，则145是一个三位阶详细和数。 <br />
请问:共有多少个阶乘和数？</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">所有的阶乘和数(按字典序，即1打头的在前，2打头的次之,..., 空格分隔)</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[1 145 2 40585 ]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">提示：8*9!=8*362880&lt;10000000</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【C语言训练】阿姆斯特朗数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">如果一个正整数等于其各个数字的立方和，则称该数为阿姆斯特朗数(亦称为自恋性数)。 <br />
如 407=4^3+0^3+7^3就是一个阿姆斯特朗数。试编程求大于1小于1000的所有阿姆斯特朗数。</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">从小到大输出,数之间用两个空格分开</font></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[153  370  371  407  ]]></sample_output>
<hint><![CDATA[<p><font size="3" face="Times New Roman">可采用穷举法，依次取1000以内的各数(设为i)，将i的各位数字分解后，据阿姆斯特朗数的性质进行计算和判断。</font></p>]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【亲和数】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">古希腊数学家毕达哥拉斯在自然数研究中发现，220的所有真约数(即不是自身的约数)之和为：  <br />
<br />
1+2+4+5+10+11+20+22+44+55+110＝284。  <br />
<br />
而284的所有真约数为1、2、4、71、 142，加起来恰好为220。人们对这样的数感到很惊奇，并称之为亲和数。一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。  <br />
你的任务就编写一个程序，判断给定的两个数是否是亲和数  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据第一行包含一个数M，接下有M行，每行一个实例,包含两个整数A,B； 其中 0 ＜＝A,B ＜＝600000 ; </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，如果A和B是亲和数的话输出YES，否则输出NO。</font></p>]]></output>
<sample_input><![CDATA[2
220 284
100 200]]></sample_input>
<sample_output><![CDATA[YES
NO]]></sample_output>
<test_input><![CDATA[1
1184 1210]]></test_input>
<test_output><![CDATA[YES]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【作业调度方案】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />
每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />
例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />
一方面，每个操作的安排都要满足以下的两个约束条件。  <br />
(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />
(2) 同一时刻每一台机器至多只能加工一个工件。  <br />
另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />
由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />
还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />
例如，取n=3,m=2，已知数据如下：  <br />
<br />
则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />
<br />
当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />
显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行为两个正整数，用一个空格隔开：  <br />
m n  <br />
（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />
第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />
接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />
其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />
后n行依次表示每个工件的每个工序的加工时间。  <br />
可以保证，以上各数据都是正确的，不必检验。  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一个正整数，为最少的加工时间。</font></p>]]></output>
<sample_input><![CDATA[2 3
1 1 2 3 3 2
1 2 
1 2 
2 1
3 2 
2 5 
2 4
]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
<test_input><![CDATA[3 3
1 1 1 2 3 3 2 2 3
1 2 3
2 1 3 
2 3 1
7 2 4 
3 2 5 
3 2 3
]]></test_input>
<test_output><![CDATA[18]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【偶数求和】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有一个长度为n(n&lt;=100)的数列，该数列定义为从2开始的递增有序偶数（公差为2的等差数列），现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出一个平均值序列，每组输出占一行</font></p>]]></output>
<sample_input><![CDATA[3 2
4 2]]></sample_input>
<sample_output><![CDATA[3 6
3 7]]></sample_output>
<test_input><![CDATA[7 3]]></test_input>
<test_output><![CDATA[4 10 14]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【出圈】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">设有n个人围坐一圈并按顺时针方向从1到n编号，从第1个人开始进行1到m的报数，报数到第个m人，此人出圈，再从他的下一个人重新开始1到m的报数，如此进行下去直到所剩下一人为止。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入多行，每行２个数，分别表示n和m.</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">计算每一行中最后剩下这个人的编号．</font></p>]]></output>
<sample_input><![CDATA[10 3]]></sample_input>
<sample_output><![CDATA[4]]></sample_output>
<test_input><![CDATA[10 3
20 5
35 6 
60 33
70 25
80 9
29 8]]></test_input>
<test_output><![CDATA[4
7
34
58
19
74
23
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【回文数(二)】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。  <br />
例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。  <br />
又如：对于10进制数87：  <br />
STEP1：87+78 = 165　　　　　　　　 STEP2：165+561 = 726  <br />
STEP3：726+627 = 1353　　　　　　　　STEP4：1353+3531 = 4884  <br />
在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。  <br />
写一个程序，给定一个N（2&lt;=N&lt;=16）进制数M，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出&ldquo;Impossible!&rdquo;  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">共两行  <br />
第一行为进制数N（2&lt;=N&lt;=16）  <br />
第二行为N进制数M（0&lt;=M&lt;=maxlongint）  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">共一行，为&ldquo;STEP=经过的步数&rdquo;或&ldquo;Impossible!&rdquo;</font></p>]]></output>
<sample_input><![CDATA[9
87]]></sample_input>
<sample_output><![CDATA[STEP=6]]></sample_output>
<test_input><![CDATA[2
10011]]></test_input>
<test_output><![CDATA[STEP=4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【密码】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">网上流传一句话:&quot;常在网上飘啊，哪能不挨刀啊～&quot;。其实要想能安安心心地上网其实也不难，学点安全知识就可以。  <br />
首先，我们就要设置一个安全的密码。那什么样的密码才叫安全的呢？一般来说一个比较安全的密码至少应该满足下面两个条件：  <br />
(1).密码长度大于等于8，且不要超过16。  <br />
(2).密码中的字符应该来自下面&ldquo;字符类别&rdquo;中四组中的至少三组。  <br />
这四个字符类别分别为：  <br />
1.大写字母：A,B,C...Z;  <br />
2.小写字母：a,b,c...z;  <br />
3.数字：0,1,2...9;  <br />
4.特殊符号：~,!,@,#,$,%,^;  <br />
给你一个密码，你的任务就是判断它是不是一个安全的密码。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据第一行包含一个数M，接下有M行，每行一个密码（长度最大可能为50），密码仅包括上面的四类字符。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出YES，否则输出NO。</font></p>]]></output>
<sample_input><![CDATA[3
a1b2c3d4
Linle@ACM
^~^@^@!%]]></sample_input>
<sample_output><![CDATA[NO
YES
NO]]></sample_output>
<test_input><![CDATA[6
a1b2c3d4
Linle@ACM
^~^@^@!%
abcd2000
xiaoYX2001
www.163.com]]></test_input>
<test_output><![CDATA[NO
YES
NO
NO
YES
NO]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【排队买票】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有M个小孩到公园玩，门票是1元。其中N个小孩带的钱为1元，K个小孩带的钱为2元。售票员没有零钱，问这些小孩共有多少种排队方法，使得售票员总能找得开零钱。注意：两个拿一元零钱的小孩，他们的位置互换，也算是一种新的排法。（M&lt;=10） </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入一行，M,N,K(其中M=N+K,M&lt;=10).</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出一行，总的排队方案。</font></p>]]></output>
<sample_input><![CDATA[4 2 2]]></sample_input>
<sample_output><![CDATA[8]]></sample_output>
<test_input><![CDATA[7	3	4

]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[5	3	2

]]></test_input>
<test_output><![CDATA[60]]></test_output>
<test_input><![CDATA[1	1	0

]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[8	7	1

]]></test_input>
<test_output><![CDATA[35280]]></test_output>
<test_input><![CDATA[7	4	3

]]></test_input>
<test_output><![CDATA[2016]]></test_output>
<test_input><![CDATA[10	5	5
]]></test_input>
<test_output><![CDATA[604800]]></test_output>
<test_input><![CDATA[4	2	2

]]></test_input>
<test_output><![CDATA[8]]></test_output>
<test_input><![CDATA[10	6	4

]]></test_input>
<test_output><![CDATA[1555200]]></test_output>
<test_input><![CDATA[2	1	1

]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[8	4	4

]]></test_input>
<test_output><![CDATA[8064]]></test_output>
<test_input><![CDATA[1	0	1

]]></test_input>
<test_output><![CDATA[0]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院
]]></source>
</item>
<item>
<title><![CDATA[【数组的距离】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">已知元素从小到大排列的两个数组x[]和y[]，请写出一个程序算出两个数组彼此之间差的绝对值中最小的一个，这叫做数组的距离</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行为两个整数m, n(1&le;m, n&le;1000)，分别代表数组f[], g[]的长度。 <br />
第二行有m个元素，为数组f[]。 <br />
第三行有n个元素，为数组g[]。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">数组的最短距离</font></p>]]></output>
<sample_input><![CDATA[5 5
1 2 3 4 5
6 7 8 9 10
]]></sample_input>
<sample_output><![CDATA[1]]></sample_output>
<test_input><![CDATA[276 274
32 209 220 248 253 332 403 826 829 844 1388 1484 1534 1725 1868 1942 2171 2338 2359 2774 2974 3061 3103 3370 3467 3588 3776 4056 4108 4157 4378 4648 4660 4734 4864 4944 4954 4972 5041 5058 5071 5121 5273 5424 5425 5772 5861 5945 6096 6108 6170 6254 6376 6477 6554 6660 7041 7135 7664 7805 7914 7954 8043 8220 8282 8424 8482 8488 8591 8697 8724 8828 8997 9118 9202 9349 9420 9494 9498 9526 9594 9678 9861 9926 9995 10019 10294 10916 10935 10954 11256 11386 11421 11670 11712 11963 11972 12015 12049 12228 12239 12463 12474 12503 12670 12878 12981 13162 13723 13778 13780 13793 13967 13979 14103 14213 14222 14249 14404 14522 14600 14642 14674 14766 14943 15211 15330 15693 15742 15848 15853 16007 16018 16055 16092 16408 16530 16747 16902 17144 17362 17411 17466 17700 17712 17795 17890 17939 18058 18191 18192 18210 18449 18491 18597 18608 18974 18982 19082 19086 19118 19176 19219 19250 19676 19905 19976 20140 20154 20278 20286 20731 20875 20883 21015 21074 21145 21290 21312 21337 21468 21504 21595 21654 21752 21761 21827 22008 22197 22340 22502 22639 22837 23298 23641 23663 23722 23769 24173 24270 24361 24562 24584 24666 24722 24785 24790 24797 25008 25094 25333 25352 25485 25505 25700 25758 25818 25849 25974 26104 26125 26238 26277 26321 26372 26386 26473 26702 26824 27042 27053 27438 27552 27573 27633 27637 27926 28306 28343 28488 28835 28897 28925 29153 29161 29163 29191 29318 29393 29425 29498 29687 29697 29932 30017 30121 30392 30415 30416 30460 30504 30536 30599 30736 30910 31082 31149 31353 31708 31802 32021 32245 32321 32391 32625 32767
454 523 524 604 678 733 764 839 1193 1240 1308 1550 1696 1959 2016 2101 2574 2649 2838 2932 2997 3493 3549 3656 3819 4018 4210 4389 4929 5181 5233 5351 5400 5523 5746 5819 5854 5863 5891 6059 6128 6160 6220 6316 6341 6417 6477 6871 7134 7226 7234 7241 7291 7384 7694 7798 8005 8026 8233 8361 8538 8766 8844 9258 9457 9597 9838 9863 9918 9987 10071 10273 10367 10445 10527 10622 10765 10817 11250 11953 12343 12418 12437 12503 12839 12855 12919 12947 12978 12978 13034 13132 13165 13199 13384 13394 13415 13728 13734 13762 13823 13923 13979 14048 14117 14129 14350 14403 14680 15137 15212 15367 15582 15597 15664 15859 15945 15961 15989 16015 16221 16384 16480 16677 16765 16944 16971 17494 17569 17997 18047 18054 18272 18483 18582 18629 18641 18776 19053 19160 19312 19598 19631 19690 19728 19749 19749 19754 19951 20198 20221 20239 20275 20287 20319 20383 20441 20663 20896 21012 21071 21080 21232 21261 21265 21309 21340 21390 21663 21674 21876 21982 22095 22255 22258 22354 22359 22432 22511 22567 22606 22649 22932 22982 23032 23095 23244 23375 23413 23452 23698 23939 24031 24089 24234 24306 24326 24485 24688 25122 25243 25357 25517 25705 25723 25758 25816 26245 26367 26407 26424 26504 26618 26656 26805 26940 27170 27210 27215 27286 27358 27532 27591 27785 27876 28041 28043 28217 28248 28437 28443 28512 28531 28542 28760 28854 28938 29075 29107 29119 29133 29174 29219 29458 29651 29940 30118 30175 30287 30370 30389 30501 30620 30725 30749 30771 30832 30863 30866 30891 31278 31465 31501 31533 31544 31571 31685 32274 32324 32444 32458 32510 32687 32722
]]></test_input>
<test_output><![CDATA[0]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院
]]></source>
</item>
<item>
<title><![CDATA[【明明的随机数】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用 计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然 后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">有2行，第1行为1个正整数，表示所生成的随机数的个数：  <br />
N  <br />
第2行有N个用空格隔开的正整数，为所产生的随机数。  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>]]></output>
<sample_input><![CDATA[10
20 40 32 67 40 20 89 300 400 15]]></sample_input>
<sample_output><![CDATA[8
15 20 32 40 67 89 300 400]]></sample_output>
<test_input><![CDATA[10
20 40 321 67 40 20 89 301 407 15

]]></test_input>
<test_output><![CDATA[8
15 20 40 67 89 301 321 407 
]]></test_output>
<test_input><![CDATA[100 765]]></test_input>
<test_output><![CDATA[19485]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[【求[X,Y]内被除3余1并且被除5余3的整数的和】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">输入两个正整数X,Y,求出[X,Y]内被除3余1并且被除5余3的整数的和</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入两个正整数X,Y</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">求所有满足条件的数的和</font></p>]]></output>
<sample_input><![CDATA[200 800
]]></sample_input>
<sample_output><![CDATA[20020
]]></sample_output>
<test_input><![CDATA[400 1000]]></test_input>
<test_output><![CDATA[27820]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【矩阵】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">给一个n*n的矩阵A，它的每一个元素Ai,j都是整数( 0 &lt;= i &lt; n, 0 &lt;= j &lt; n )。在每一行i( 0 &lt;= i &lt; n )给一个右移操作，使第i行的整数整体向右移动一个位置，最右边的整数将会移动到最左端的那一列。<span class="Apple-converted-space">&nbsp;</span><br />
你可以在任意行做右移操作，这样你会得到一个新的矩阵，对于新的矩阵你当然也可以做右移操作。你的任务就是求列最小值ColMin,它是每个矩阵的列最大值，但同时又是所有矩阵中的列最小值。<span class="Apple-converted-space">&nbsp;</span><br />
max(0 &lt;= j &lt; n){Cj|Cj=&Sigma;0&lt;=i &lt; nAi,j}<span class="Apple-converted-space"> </span><br />
</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">可能包含多次输入。第一行是一个整数n，接下来n行每行包含n个整数，这些数据就是n*n的矩阵A的元素。如果输入仅含有-1的一行，就表示输入终止。其中1 &lt;= n &lt;= 7 而且 |Ai,j| &lt; 104 。</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">对于每组测试，打印一行包含一个数值，它在一个矩阵中是列最大值，但是在所有的变换矩阵中又是列最小值。</span></p>]]></output>
<sample_input><![CDATA[2 
4 6 
3 7 
3 
1 2 3 
4 5 6 
7 8 9 
-1
]]></sample_input>
<sample_output><![CDATA[11 
15]]></sample_output>
<test_input><![CDATA[1
41 
2
8467 6334 
6500 9169 
3
5724 1478 9358 
6962 4464 5705 
8145 3281 6827 
4
9961 491 2995 1942 
4827 5436 2391 4604 
3902 153 292 2382 
7421 8716 9718 9895 
5
5447 1726 4771 1538 1869 
9912 5667 6299 7035 9894 
8703 3811 1322 333 7673 
4664 5141 7711 8253 6868 
5547 7644 2662 2757 37 
6
2859 8723 9741 7529 778 2316 
3035 2190 1842 288 106 9040 
8942 9264 2648 7446 3805 5890 
6729 4370 5350 5006 1101 4393 
3548 9629 2623 4084 9954 8756 
1840 4966 7376 3931 6308 6944 
7
2439 4626 1323 5537 1538 6118 2082 
2929 6541 4833 1115 4639 9658 2704 
9930 3977 2306 1673 2386 5021 8745 
6924 9072 6270 5829 6777 5573 5097 
6512 3986 3290 9161 8636 2355 4767 
3655 5574 4031 2052 7350 1150 6941 
1724 3966 3430 1107 191 8007 1337 
-1
]]></test_input>
<test_output><![CDATA[41
15503
18256
21175
26504
31941
33252
]]></test_output>
<hint><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">例如：<span class="Apple-converted-space">&nbsp;</span><br />
2<span class="Apple-converted-space">&nbsp;</span><br />
4 6<span class="Apple-converted-space">&nbsp;</span><br />
3 7<span class="Apple-converted-space">&nbsp;</span><br />
列最大值是：13<span class="Apple-converted-space">&nbsp;</span><br />
右移操作：<span class="Apple-converted-space">&nbsp;</span><br />
6 4<span class="Apple-converted-space">&nbsp;</span><br />
3 7<span class="Apple-converted-space">&nbsp;</span><br />
列最大值是：11<span class="Apple-converted-space">&nbsp;</span><br />
右移操作：<span class="Apple-converted-space">&nbsp;</span><br />
4 6<span class="Apple-converted-space">&nbsp;</span><br />
7 3<span class="Apple-converted-space">&nbsp;</span><br />
列最大值是：11<span class="Apple-converted-space">&nbsp;</span><br />
右移操作：<span class="Apple-converted-space">&nbsp;</span><br />
6 4<span class="Apple-converted-space">&nbsp;</span><br />
7 3<span class="Apple-converted-space">&nbsp;</span><br />
列最大值是13<span class="Apple-converted-space">&nbsp;</span><br />
显然在所有的变换矩阵中列最大值是小是11<span class="Apple-converted-space"> </span><br />
</span></p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【简单计算】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">有一个n+2个元素a[0], a[1], ..., a[n+1] (n &lt;= 3000, -1000 &lt;= a[i] &lt;=1000)构成的数列. <br />
已知对i=1, 2, ..., n有a[i] = (a[i-1] + a[i+1])/2 - c[i]. <br />
<br />
给定a0, a[n+1], c[1], ... , c[n]. 写一个程序计算a[1]. </font><br />
</p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">第一行是整数n. 接下来两行是a[0]和a[n+1], 其小数点后有两位数字. 其后的n行为c[i](同样是两位小数), 每行一个数.</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">输出为a[1], 格式与a[0], a[n+1]相同.</font></p>]]></output>
<sample_input><![CDATA[1
50.50
25.50
10.15
]]></sample_input>
<sample_output><![CDATA[27.85
]]></sample_output>
<test_input><![CDATA[1471
1955.68
-1917.11
1728.99
596.14
-1086.39
202.45
-1382.91
1511.45
1466.65
529.12
-1967.77
1026.70
802.57
-616.16
-643.51
1958.73
-417.79
1450.66
540.48
448.92
1398.78
1897.21
239.44
-1942.38
-1004.97
223.21
767.90
-602.49
1863.88
-39.36
1501.44
-1569.81
1855.34
-1650.62
-1653.30
-1446.02
1418.31
115.54
-1090.54
1603.13
-901.45
-524.73
979.94
-1112.27
920.13
491.40
-34.11
-602.00
274.48
-94.66
894.49
296.21
-1057.46
-1428.44
610.43
-1176.73
-125.55
1618.51
-205.87
-1254.37
352.12
1459.57
-1575.67
-1536.36
159.85
-216.49
-1687.00
1911.98
1387.31
-1356.42
-1666.98
-628.98
-1509.75
774.98
1968.74
-679.15
-764.36
1263.03
-1190.77
-1544.54
-848.35
-1311.74
-385.08
-1010.83
-1886.83
-126.52
-1423.93
375.31
1684.07
-1644.03
-1605.09
-1435.28
-158.26
713.09
-189.51
-71.84
1710.44
862.88
-804.89
-1032.44
-1073.21
467.48
-153.99
-1058.56
263.86
-438.06
597.12
530.10
-1863.39
-464.43
-623.98
1663.19
1616.93
-1410.38
-668.29
1638.29
579.66
1795.77
-842.98
651.93
-391.55
1882.07
-768.15
-128.60
-1717.52
870.44
1211.52
1168.43
472.48
690.02
685.50
-356.15
1268.65
892.66
-1468.85
65.37
-1833.61
-405.10
-1411.11
-1655.38
-863.97
-228.70
1280.49
-821.61
-1801.38
1024.50
799.89
-1021.33
-864.22
-1043.42
-501.41
1217.01
1957.15
268.01
-909.26
1307.35
749.83
-293.89
-1696.03
154.24
-462.84
-1007.53
601.39
-511.42
-1231.17
1850.09
1596.78
-1881.46
-930.14
1257.91
-207.34
-1781.48
-1128.63
1056.97
261.66
783.53
550.12
32.65
-1100.80
-628.98
1700.67
599.32
871.42
-741.41
-1835.44
-1790.03
882.77
-861.04
-556.23
1619.61
-1110.08
-1519.76
-879.97
122.74
-1114.71
-325.26
909.26
-104.92
375.68
102.11
-1028.65
1559.43
-1817.98
-769.12
1105.31
1104.34
183.90
-114.56
1449.81
-1720.57
-1365.45
800.50
-681.84
-1408.06
670.85
-409.49
-1209.32
1029.51
1644.15
-742.02
1689.68
1635.24
-1103.97
1366.31
562.21
1058.56
1604.60
-999.84
296.09
-1791.49
-1674.18
641.92
-1006.92
-1866.69
1855.70
-1914.18
725.66
250.43
1036.59
1516.70
-1199.19
-945.28
-864.22
-1122.65
-1842.89
-572.22
417.55
-1348.97
-480.30
-1327.37
535.96
1181.12
1937.74
1402.32
-1626.08
1657.09
-1670.76
-597.85
951.62
1887.56
660.84
-1403.91
-969.57
1989.13
1382.06
1238.62
1037.20
1112.39
-254.95
1457.25
-1066.13
-1665.76
-368.35
-1726.43
1658.07
-1162.81
-488.35
224.79
1756.95
503.73
1161.47
1710.92
-1155.73
-1950.31
1762.93
1195.53
1500.47
-177.80
12.14
1381.32
-756.18
-1615.22
859.95
1488.50
-1802.72
-1980.59
1510.11
1758.90
75.13
264.83
-698.81
-1688.46
-1884.88
-1379.37
95.40
476.14
1580.91
-459.79
-199.28
726.27
-1540.51
837.12
1650.25
1340.43
-19.59
630.69
1865.59
-86.00
577.34
-43.51
-1673.45
1848.50
923.55
164.86
-1125.21
1941.28
-340.52
-1765.98
-125.43
-797.20
1443.34
1122.04
-343.21
-974.70
-1055.63
-1717.15
1470.68
-1172.70
409.25
1471.78
-1431.98
-699.66
420.97
-1035.61
45.83
1382.42
1480.33
1315.28
-1929.07
-917.69
31.43
1779.65
-886.56
281.07
558.18
525.58
-188.05
1634.99
-624.83
-241.15
-1902.58
1704.45
1740.34
-1111.78
199.53
-1564.56
1911.25
853.23
-1839.47
-882.90
1773.18
-1257.78
-1517.19
940.27
1661.61
1824.57
532.79
-1716.78
-994.84
-1879.75
1329.20
-1150.24
414.38
636.43
1338.60
781.94
-1160.00
-1610.33
-97.23
875.45
1427.22
-655.11
-1074.31
-1977.66
-310.37
-1607.53
-557.93
-1995.97
-370.43
1488.87
1693.59
-239.20
-572.71
-913.05
1338.84
1264.01
326.85
-19.47
420.60
1114.35
-1658.92
-1312.72
1715.56
1991.08
-1597.03
-503.49
1092.74
78.31
-1413.43
-1694.93
-1496.32
-1406.72
-1976.56
1368.26
-1768.42
1540.63
140.07
-1911.00
-977.87
1817.86
838.83
-1027.92
722.98
-201.84
1251.80
-133.73
55.11
-1485.09
-1312.47
-378.85
-1856.19
-428.17
-600.66
283.02
430.12
1905.27
-1201.02
954.80
-408.27
-477.12
740.19
-1555.40
-1903.80
344.30
1497.29
1829.58
1012.17
-1732.29
-1934.93
-1943.35
-297.43
588.57
-1596.66
-289.86
1026.94
-1105.68
1251.44
65.61
-1324.44
1561.14
-861.17
-1440.29
1262.18
-22.88
216.01
1798.94
1798.21
-1383.03
-1470.80
-769.24
-823.57
1093.23
368.23
-1393.78
286.81
-1691.03
306.46
355.05
1389.38
-1162.32
-1436.50
-0.18
1370.83
-346.50
1312.23
1735.34
1508.89
1339.45
-444.04
295.23
369.21
1895.74
201.60
-1765.12
-1540.02
1276.34
952.11
-248.48
1269.75
-1224.46
-1354.59
169.25
-687.33
-608.23
-1337.01
212.71
1807.00
-706.99
-966.03
195.62
-1389.75
-1490.95
858.85
-752.52
-960.41
-1025.72
-1320.16
-1295.51
-1802.97
48.28
-1579.57
-1209.57
-570.14
1636.95
521.07
-289.98
-452.95
-959.07
-106.26
282.66
1420.27
-344.67
324.28
1239.96
591.38
1646.10
-1057.95
-1688.22
-1487.16
727.25
-1612.17
227.36
1047.09
1165.86
-1700.30
753.62
-1153.17
1138.15
-254.70
-99.67
245.06
561.11
-1775.38
-588.33
1276.58
1527.93
-1132.29
-326.48
-542.19
1467.14
1452.37
-841.27
-50.23
1155.98
867.51
-462.35
728.11
-291.32
-1352.27
1576.64
1386.33
-1332.98
-798.66
-1049.04
-1803.33
-683.30
-1640.24
-902.55
-1945.06
-643.39
1873.16
-1770.13
1930.90
1043.06
1473.61
-355.66
-1546.86
936.73
-1862.78
-1561.14
-1748.16
1376.20
163.64
1771.47
1683.58
1801.75
1702.13
-217.96
-1436.14
-1942.86
1347.39
304.75
533.40
-206.73
-1567.97
-1507.30
681.47
-1904.53
-1362.28
-1516.83
1051.97
1466.90
-1447.73
-1774.77
-1342.02
283.88
797.08
-1401.34
-1371.31
1856.80
1350.19
-55.23
1113.86
214.30
689.16
-862.75
-1428.32
-1258.15
379.46
-1682.24
-1935.66
1794.18
733.35
-1580.91
1185.88
1411.48
1163.42
603.59
248.11
-738.97
-1142.79
739.70
-649.86
1930.66
-602.86
43.88
-1045.38
1698.84
-1050.14
1010.22
597.12
905.97
-348.21
-245.55
-1646.71
53.04
1814.81
-101.99
1689.68
-248.97
-1423.32
-885.21
320.62
647.05
623.00
1467.75
-300.11
-547.56
603.10
-1340.67
1768.91
1196.99
866.78
1321.26
-412.42
1835.07
-1853.02
-532.05
474.31
1327.73
811.97
1239.11
-1722.76
1327.61
312.81
1056.48
1404.76
-411.57
451.61
-1679.92
1237.28
-771.44
-1904.78
1767.69
-451.85
968.47
-1041.23
623.24
-442.82
471.75
-1915.89
1661.12
-759.11
-1087.86
640.09
1306.98
-473.22
891.81
666.21
-95.52
1995.11
-164.12
1388.28
-729.33
713.21
989.71
-1271.46
-1335.67
-1172.33
-1858.14
-364.08
-1704.70
-1460.18
-1801.26
862.26
1496.07
-911.95
1735.83
-191.83
683.55
-635.94
1650.13
-935.27
-1765.37
-213.93
40.46
275.70
-599.32
55.48
1437.97
943.81
385.93
-579.54
-1486.92
1808.70
715.41
73.79
385.69
-1580.30
-983.48
306.95
-340.28
528.88
1340.06
-1952.39
311.34
929.16
1144.74
-593.95
-1448.34
1363.38
71.47
852.01
-1206.88
1127.90
631.30
-348.33
840.66
-2.62
-68.17
1186.25
435.37
1094.21
-430.61
1778.80
-725.42
1327.98
808.67
-346.87
-1366.55
-968.35
176.45
651.81
713.21
-1583.60
-1404.03
-664.02
-159.61
472.73
-816.49
-1907.10
-356.27
-58.29
-1165.01
877.40
-1668.44
1981.44
726.76
209.54
-1803.58
-1846.30
854.33
-1943.11
1471.05
-643.51
-262.76
-776.81
660.35
1326.15
410.71
1869.99
1476.42
335.03
-167.30
-202.94
-1501.44
-1290.13
-1170.14
1104.83
1685.53
1794.91
1707.26
1864.61
1864.49
1985.83
-1353.00
-578.32
1321.14
-541.58
-1978.02
-43.03
1616.80
-781.70
1747.42
930.26
-1243.38
-1904.90
-1203.46
-967.86
1835.44
1308.08
-1993.16
268.37
1282.57
-1774.77
-701.37
-1197.85
-1162.93
945.28
433.05
1179.54
1371.07
-677.69
-1564.80
-1438.33
-1308.69
62.92
-1194.92
-408.64
-557.81
-483.10
-356.88
-1484.11
1235.20
1789.78
-185.00
-806.23
1129.49
-200.75
-1720.45
1608.99
-1410.38
-1096.53
1707.75
-482.86
1045.13
722.86
-487.25
-148.25
175.11
-1216.28
-577.71
510.08
1046.47
-393.26
-1287.45
1150.24
226.87
865.44
232.36
-382.15
-999.35
239.93
341.13
633.38
-189.39
-1408.30
1886.34
1360.33
51.08
-916.83
-656.33
481.88
-661.70
1867.42
1248.39
-589.55
-1617.78
-26.79
1038.66
-1744.86
1583.97
11.41
1439.31
-828.08
1486.19
1325.05
-491.16
-279.12
1198.70
1210.79
1476.54
857.63
927.21
-164.61
-1508.16
181.58
726.88
472.97
415.35
-932.46
1608.63
-1313.82
-1229.22
-1695.79
1121.55
79.65
-10.80
-1132.90
1537.09
247.01
64.63
-1552.72
-1240.21
-1460.55
1750.35
365.18
-1910.64
-721.27
1418.80
1489.60
959.31
41.19
-1289.65
-207.95
777.42
636.43
96.49
157.53
-7.26
406.93
1481.42
-921.96
-1486.19
1472.51
968.47
-1145.60
1603.99
1545.27
-1084.32
-69.03
1377.91
1939.81
404.24
1987.67
24.10
-1595.93
1247.29
-1585.19
880.82
394.84
662.19
-1202.97
-513.74
-1575.79
1732.04
27.64
732.01
1101.04
-1219.21
683.30
-1758.17
1492.41
788.41
-720.41
-1896.35
-1568.71
1968.87
-964.32
-924.03
393.87
638.14
-228.82
-602.37
1572.00
1495.95
-439.40
-1677.11
1766.35
-1553.45
-1228.61
-1490.34
-274.97
1083.71
1109.22
1382.18
-447.70
1964.11
295.96
1596.54
-187.93
-204.16
-994.10
733.35
952.84
-334.54
685.01
-1659.77
676.96
1429.05
876.55
452.58
880.58
1391.82
-1318.46
-285.47
-211.12
-1596.78
-1024.14
-772.17
912.19
1490.09
-1990.11
-1749.50
445.99
-1846.91
-983.12
-125.67
742.63
454.54
-1546.86
-1198.33
-522.29
17.51
1497.54
1350.68
-1863.03
1066.86
-568.31
-189.76
-551.34
-1368.75
-470.04
1273.65
1385.11
-962.98
81.11
1071.99
1361.43
1814.69
1168.06
934.90
-1746.94
144.10
-169.37
-1997.31
1859.49
-1035.00
235.78
815.63
1437.60
-123.96
-518.99
-1596.66
-1069.18
-53.04
-344.79
-1397.32
-1481.42
1571.52
-1217.50
1725.69
-1889.40
482.86
-725.42
1704.33
-1587.63
1059.41
-1486.31
837.97
-815.27
-1956.41
196.72
-1734.61
-1675.16
1800.40
-941.37
-1709.46
-607.62
-1760.73
1606.92
-1316.75
-795.37
526.68
-514.35
1081.88
1129.61
-289.98
-1899.16
-376.65
1696.15
-616.53
1125.33
1923.45
152.28
1516.09
1513.53
-1465.43
-1407.69
569.04
-351.63
-994.47
-1720.45
1028.53
-753.74
-1334.33
-211.00
-524.61
1644.27
-1736.44
596.27
-1679.31
1095.79
580.03
1736.32
329.17
1698.84
-1856.92
1156.83
-942.22
-1418.31
171.20
1393.29
-1667.95
-27.40
865.32
1187.84
-112.00
775.23
1179.66
-1320.04
301.46
279.00
-1807.00
-208.68
332.95
-1373.63
-1792.84
-568.68
-189.03
662.55
-303.78
1148.16
1178.80
1793.57
-1766.83
-1150.36
-1168.55
476.63
-482.25
-1779.41
1366.06
-30.21
630.32
1458.60
-128.72
-38.02
1638.53
956.38
1380.96
712.85
-320.62
1554.91
616.90
324.53
-356.39
990.44
1145.48
-228.21
1586.04
163.02
-926.48
313.91
-1012.17
849.45
408.39
-84.29
-4.33
-1512.68
1206.39
1300.88
1761.34
-345.89
1635.97
-1737.78
-1990.84
-134.22
-919.88
856.41
1954.71
-677.81
-597.85
-1895.13
698.81
222.11
-499.34
-1170.99
-774.62
-727.37
279.36
1241.79
-1876.58
-979.70
-845.17
-76.72
-837.12
-372.75
1229.34
803.43
-1155.36
-1283.30
-1748.40
777.79
54.50
915.12
-1506.57
-1419.04
1941.89
713.46
662.92
1543.44
-1849.23
274.84
-1016.32
-1145.35
-471.87
1811.63
563.18
1961.30
-568.55
158.26
-1827.02
-1278.90
1765.98
-835.65
-428.78
1941.03
1870.84
1533.18
486.03
-1077.73
382.88
-269.96
-1609.72
-1361.18
203.07
1586.65
-1810.66
-826.74
-1313.08
-1774.77
-1051.48
35.70
1188.94
-71.84
783.16
1990.35
82.21
-421.94
1039.88
-984.83
1380.23
1292.82
-1109.71
1019.25
-915.37
1881.22
1464.58
-57.67
-614.21
-1256.20
-1351.54
1863.27
-1162.20
-155.33
-329.90
1740.59
-1362.40
1376.81
-1400.12
-589.06
-871.66
749.83
1891.23
1471.05
655.84
-1478.25
1082.36
-334.66
-1098.84
901.57
-209.05
-1590.07
814.53
446.85
-1880.73
-1929.19
1275.97
-1418.07
-398.63
-1372.78
-1392.55
-438.79
-188.66
-1658.19
1062.10
-496.90
1763.90
64.27
-1586.29
118.59
1226.05
-208.68
-1225.31
-1239.23
-930.14
-1888.05
763.38
419.75
-211.24
1158.05
1149.99
-713.21
1301.85
-310.73
102.72
-484.20
-826.25
935.39
160.95
-1197.24
-1626.94
1821.16
1060.27
412.06
-305.61
-1800.77
-1466.90
1272.80
1969.48
-1283.54
1212.37
1770.01
-806.60
1936.39
1760.00
856.89
1688.95
1346.41
348.70
-1888.79
434.52
871.66
618.85
-1636.21
-317.08
1522.32
237.98
520.34
992.15
1797.60
186.10
-1795.15
-203.43
474.19
-1106.54
1848.01
1642.32
401.19
-646.56
1845.94
-790.24
1928.70
-661.21
-1586.04
1253.39
593.09
842.86
1761.58
-1422.83
1686.88
873.50
210.76
-1823.11
-1665.51
-277.41
-112.49
-1330.54
1702.87
838.34
1605.94
-1862.42
1966.91
-1577.37
-1425.76
-486.64
661.58
-1118.50
545.85
624.71
1038.54
250.80
39.97
-1967.40
1057.22
-276.07
-1741.32
-218.32
-366.52
1407.20
-1676.62
189.03
771.08
-1575.30
-542.55
-201.84
-1800.04
1501.44
-262.39
-378.12
1149.75
147.16
1042.93
799.03
-122.13
566.97
-177.80
-1210.18
-416.69
-1576.03
1307.47
-763.63
1326.88
]]></test_input>
<test_output><![CDATA[40210.06]]></test_output>
<test_input><![CDATA[680
1192.48
-1117.16
1973.99
1399.88
-531.44
-1107.27
1719.10
1972.41
928.43
1176.73
-1708.60
-258.61
-109.92
-694.41
-598.59
303.41
-621.66
-1237.89
-1068.45
1021.57
275.33
-12.14
293.64
-549.02
541.82
-780.60
-1580.18
1867.54
-1866.32
-1760.49
-988.98
21.66
1238.99
166.20
-331.36
-1755.36
-540.60
-1593.85
-467.11
-968.96
-436.23
-101.74
-1944.21
1222.63
-565.38
1769.40
1530.38
-1081.02
-162.66
-1469.46
-1997.07
-759.72
-367.25
-1062.95
-805.62
-934.65
-1938.96
1637.19
-1947.26
-1127.78
1721.18
734.94
564.40
1805.41
-130.55
-1607.53
447.95
93.56
1665.02
-403.75
-644.12
945.52
-1016.44
-1788.32
1208.96
-1954.10
429.39
1452.98
-711.38
779.25
164.12
1891.10
712.24
-696.61
-816.37
126.04
-1084.68
1602.40
-1335.91
-751.18
-1231.91
637.53
-996.67
-1783.68
948.82
-271.43
182.68
1266.21
-1800.53
-1716.78
1074.19
-1504.74
-1908.93
-1994.38
1317.97
-1272.68
919.52
-295.35
-605.30
1795.03
-639.11
-1169.77
-1480.33
-639.85
509.35
1860.34
1979.85
-600.66
922.08
-335.64
1543.32
-522.78
-702.59
-30.82
563.31
-65.24
1411.35
-949.67
-597.73
-1883.78
1936.27
-1224.09
801.59
-1239.72
1767.08
1126.56
-1178.68
1680.53
1481.55
-1683.21
976.28
1858.76
1556.74
-1356.42
-809.77
-920.49
1969.84
-1814.69
-801.96
226.87
-194.52
-1520.85
16.05
-629.71
1496.93
297.67
1109.10
-1233.86
324.04
1654.28
876.79
-103.21
-204.53
-1841.79
86.12
-326.24
1537.09
1848.38
1874.14
931.48
-1686.14
625.69
1944.57
332.95
-1189.42
-1584.70
587.11
-1184.17
793.66
-1822.01
-1859.85
1703.11
-718.46
-100.89
1524.88
1600.69
-1651.96
-321.23
-526.44
-788.53
1184.17
-1950.92
-1920.28
-813.19
-959.80
-357.73
-1707.63
142.88
1679.31
335.88
-1019.25
-34.24
1960.69
-0.79
-805.13
-469.19
1182.34
966.88
-753.99
1960.69
-193.91
-1637.44
-1767.20
-1452.13
190.86
-1598.25
-363.10
-1533.67
1957.64
-1206.88
-1385.11
1396.71
613.48
-631.18
-1389.99
-1809.56
-1942.13
1064.91
-1090.54
-1300.39
-402.78
1379.37
771.32
-106.38
-1909.42
430.86
1747.91
1391.09
-143.86
1744.37
1828.60
1530.62
957.36
1888.79
-972.13
1106.17
499.46
1089.81
-1955.32
-109.68
-443.31
946.50
1616.07
1072.72
359.20
1372.05
191.22
736.89
-1638.53
-1112.03
1551.62
1501.57
1819.08
-1606.31
0.67
-549.51
-502.15
538.52
-1250.83
-523.02
-858.24
819.29
1120.57
167.18
1322.73
-1469.46
201.97
-652.79
-702.10
-309.39
-1434.43
1420.14
1501.81
69.27
-315.01
1615.71
-706.62
442.70
-1328.22
280.22
588.57
198.43
1958.12
-1669.30
-1.77
1419.04
-451.24
-1003.38
-1898.80
1565.53
-530.96
-1022.91
473.95
-1112.27
33.14
-1863.03
1102.14
687.70
1556.99
-1133.88
802.33
-1443.34
1142.06
228.82
1274.51
717.49
154.72
-1973.63
1413.31
1589.46
25.57
-100.40
501.66
-1291.84
-6.77
-1405.74
-1087.13
1120.45
420.36
517.41
944.79
-620.19
1303.32
705.03
-1588.12
1271.21
-397.41
1331.76
-379.10
-615.68
-980.55
882.53
-1646.83
-1334.20
-158.75
-885.83
-518.87
-1928.58
-1516.58
930.99
-159.36
-1553.94
351.02
298.89
988.73
-1245.82
-353.83
-675.37
466.62
787.80
1745.47
-376.90
-1802.60
474.92
1772.08
1099.09
640.58
1915.89
-1009.97
1268.04
-670.73
270.21
641.43
-1758.90
-1583.36
1620.34
-1144.26
-1500.83
-146.79
1937.13
-1746.20
580.40
822.84
1271.58
1871.94
-192.57
62.31
-701.62
1031.34
1178.93
-312.44
336.25
778.77
1549.30
-847.01
1968.74
-1478.86
222.72
-30.82
-607.01
-518.50
-912.68
1802.60
-380.56
-1400.49
-588.33
583.45
1647.81
503.00
431.59
1247.04
744.95
-825.89
-1149.51
-268.37
949.43
936.73
-1620.83
-1139.86
1927.73
387.76
439.40
729.08
305.85
900.35
1156.10
230.65
-395.45
1321.02
1764.64
-1667.47
899.01
488.23
1556.38
-259.34
331.61
1195.53
488.84
1569.32
1600.81
1225.19
584.18
1644.27
1550.64
1077.36
1242.40
1064.42
988.73
19.22
1593.49
1645.00
-1146.09
-1920.16
1013.27
869.47
1861.69
-385.08
-1071.13
974.08
-249.58
66.95
1038.05
-1209.93
-1745.10
-453.81
1066.74
969.08
-68.91
856.16
1192.48
-784.99
956.75
-410.22
254.82
-1848.87
-1965.08
-78.67
882.04
-1556.99
1523.05
-281.92
654.13
-195.62
914.02
-1403.18
-1567.36
-1488.02
-1206.51
552.56
978.24
52.43
-600.54
779.74
981.53
1526.59
-92.71
316.72
-365.06
437.69
-1432.72
-1866.93
867.03
486.52
-181.58
289.13
-1633.53
-1000.57
-1496.56
-210.76
-1479.72
-1385.35
-688.80
-1243.26
390.33
-148.86
1569.93
-1447.00
-144.96
1185.15
1516.83
1468.12
-960.78
-740.56
-1829.95
1604.84
158.51
-148.62
-1072.72
585.77
902.67
221.99
-985.44
1703.36
-1517.44
1474.59
-1086.88
-1859.37
-533.03
-454.78
1886.95
889.12
-1466.78
1451.27
-262.88
1984.13
-743.85
-577.10
908.53
-1312.35
62.31
1542.10
1071.26
-1758.78
-1527.69
-485.67
-1694.81
812.58
757.65
199.16
1011.32
264.59
-1863.52
1522.08
-1327.49
368.35
633.62
-605.05
-406.44
-1913.32
1729.23
-1729.97
1740.95
-446.24
921.84
-49.98
809.53
373.48
1330.91
-717.61
1641.83
-135.07
1462.01
1361.18
1122.04
877.04
-1737.05
860.92
673.29
798.66
592.36
-1870.60
480.54
1389.38
-1771.96
662.92
1565.41
-944.91
1540.02
588.57
-162.78
-805.26
950.89
780.48
-1754.02
241.27
1312.11
232.97
1162.20
-976.28
318.43
-682.57
1106.54
-925.87
-1913.81
-454.29
1959.10
1505.35
-978.72
-1531.96
767.17
83.43
1100.92
-1673.20
281.19
121.03
1693.96
1095.06
-1657.46
-1184.78
-953.70
521.31
-1753.41
-1342.99
-1445.17
-192.08
-1791.86
-465.28
-1045.13
1547.22
53.77
1158.42
-452.10
-1459.57
-735.19
1429.54
-407.78
124.21
497.63
-1619.00
-1017.05
-1370.34
705.16
1312.60
-653.03
-1399.15
-15.19
-1254.24
-1324.44
1393.53
-1721.42
825.64
-1377.66
-216.25
-1950.80
-208.80
1589.09
-791.34
-942.22
-1857.90
726.40
264.83
1368.26
126.16
-26.42
-910.61
-1296.60
170.35
-737.87
249.70
-1722.52
-115.90
-1992.06
]]></test_input>
<test_output><![CDATA[11502.92]]></test_output>
<test_input><![CDATA[269
1230.32
-743.49
18.98
1886.22
-212.59
1675.03
939.90
-741.53
1272.92
-1612.04
1363.01
91.86
-902.31
39.24
-1273.65
1964.35
850.67
896.45
1127.41
1882.80
1614.36
-599.32
174.38
-1773.30
634.35
660.84
-1996.82
-1799.43
1464.09
519.11
1582.01
-582.35
1711.05
810.75
-569.65
242.25
510.45
-555.61
1878.29
-484.81
1849.72
929.04
-12.26
286.56
1869.62
-1031.22
264.59
-1818.72
-1732.65
755.69
-1716.17
1023.16
1925.90
580.52
354.44
340.40
894.49
390.33
347.84
1380.47
847.01
916.34
815.14
256.78
140.20
995.69
1519.76
-1146.21
-399.97
715.53
507.40
-1886.22
1158.54
-1999.51
-1158.66
333.44
-532.67
-1727.77
-1873.53
1091.15
613.72
-1197.24
1946.89
1433.08
61.58
-610.79
-1657.09
942.83
1945.79
973.11
-1546.98
-1682.85
-158.63
-169.62
442.94
76.35
1136.20
-1043.06
1850.45
30.21
-872.28
274.23
1468.85
-1870.47
-1026.21
-720.78
1893.79
1323.58
1618.64
1766.96
1860.10
-950.04
-179.87
245.91
1492.41
-15.32
-1594.83
1675.64
1593.98
-1328.10
874.96
148.25
101.13
-1335.55
-1512.55
-1858.88
-1174.53
795.12
-57.92
1965.20
-388.98
-793.90
1789.66
-968.35
-970.91
1762.81
1695.05
-1433.08
739.46
1472.64
-1324.19
-604.81
-1361.91
-460.40
-1557.48
-1582.01
1921.38
-1325.17
-34.36
-586.74
-813.56
-709.67
1394.14
-219.91
699.42
1200.53
1450.30
-1146.21
-51.45
-542.92
-1573.96
1415.63
1614.85
941.25
-1092.98
24.10
1079.92
-1661.73
-1653.55
1790.39
-1401.83
121.28
1616.56
-775.47
1258.64
1166.35
1661.48
-1222.99
-140.32
625.81
376.65
-1299.29
1824.82
-314.40
1840.32
1858.14
-720.17
1828.60
-1980.46
-902.18
1422.10
231.26
1081.27
828.94
-1699.57
-1080.17
-1573.71
412.67
1137.91
306.58
577.59
-998.74
-1685.17
1735.70
-1956.78
-552.81
144.10
1661.61
1282.57
-1093.96
-441.48
-1915.40
-102.96
-238.22
1837.88
-129.33
-825.03
496.16
-1499.98
1576.89
-1889.40
-1871.57
-1518.41
-1588.36
-974.08
-149.35
-268.50
-48.15
918.79
-516.67
-1655.50
-757.16
-1337.13
376.53
-1640.98
-93.56
183.66
380.56
-657.30
1881.83
-263.61
513.01
893.76
423.41
-589.43
945.03
1179.78
-1016.93
985.56
1933.95
641.92
-1401.10
263.49
1325.29
-12.51
417.06
-1996.94
-1748.89
-403.88
-28.50
-419.38
-1352.64
1466.53
1847.16
1501.69
217.71
825.52
1349.46
890.22
467.11
527.17
]]></test_input>
<test_output><![CDATA[-40672.36]]></test_output>
<test_input><![CDATA[32
-461.62
-1919.55
-1164.28
-29.60
-1269.26
860.80
-1475.81
1511.82
-1801.26
437.20
-920.13
-1689.32
-556.23
659.38
1893.06
1377.30
1890.74
-112.49
-20.81
1377.54
-1597.88
-1050.63
-1393.41
1251.68
1925.53
-299.87
118.35
245.06
1897.94
-1692.86
576.00
-1520.00
-966.88
-611.65]]></test_input>
<test_output><![CDATA[2656.77]]></test_output>
<test_input><![CDATA[1732
797.32
611.04
-1416.48
-76.60
1637.07
-1220.55
54.87
1461.77
1516.46
-1396.83
-638.26
-285.59
715.53
-294.62
-1753.53
1620.34
-80.87
1525.62
-92.83
-967.61
1227.02
-1210.42
-909.87
940.27
-15.19
517.89
1564.92
1545.15
1059.29
-302.80
-392.89
310.98
-814.66
-1257.54
114.20
117.86
1006.92
1872.67
-20.81
-359.69
438.91
-475.90
1346.65
-1920.77
974.21
-69.15
1377.17
369.33
561.84
990.69
1144.01
987.39
678.54
1548.08
288.27
-1511.33
-776.94
1213.96
-1943.72
-1105.68
853.48
-148.25
-654.86
54.13
396.55
1850.21
-1619.37
-887.17
951.50
312.08
-1346.53
-798.42
-1685.53
-1719.22
1738.51
1481.55
1348.00
-1868.16
-379.71
-1336.52
-79.28
252.87
-845.91
130.19
-1956.90
-1862.42
1281.83
783.89
-176.82
-980.31
-367.13
-253.85
1866.57
1169.77
1131.93
1034.39
-251.89
981.90
1239.23
-1660.87
-1821.28
973.84
450.02
29.48
492.01
-172.67
-1325.29
507.76
-924.16
-409.37
-1870.72
-1957.27
-1624.50
-827.84
-643.51
1204.07
91.37
1246.92
1005.34
21.79
-1803.58
1701.77
-5.31
-0.18
1400.37
746.05
-1317.11
-895.96
-1317.60
810.38
-328.56
1852.53
1521.71
-1641.10
-1134.49
-1367.29
-1555.16
-1257.30
1418.43
370.06
-477.85
1214.33
-817.34
672.32
-1568.71
-765.83
-1704.94
-423.04
1718.61
-810.75
-481.64
1023.89
878.74
-1348.49
-33.02
-1820.06
881.55
-699.78
-1160.86
-1259.13
767.17
-366.52
-216.37
333.44
-61.70
-1406.72
522.29
145.20
1771.96
-768.88
-1643.17
905.36
176.21
-464.79
-1816.64
1342.14
717.85
-450.88
-361.15
1242.28
1945.31
-96.62
-1994.38
1236.30
531.44
885.83
-500.07
-564.16
1861.93
1177.09
1566.63
1047.45
-305.73
1374.12
-1192.60
-912.32
-1488.38
-571.97
1167.33
-1674.42
-1803.33
-878.38
1003.14
575.39
-1347.88
-1289.52
-339.91
-532.79
-9.94
852.50
-1818.35
-1181.98
-82.82
-1047.45
-1223.48
-1269.50
-59.51
1046.23
1668.81
-458.08
-1981.68
-1653.67
-44.12
-248.84
-718.46
-419.99
1099.09
-1954.10
-1550.52
-1761.22
1672.84
-442.33
1567.85
1868.52
-5.31
467.36
689.41
-1477.64
1265.96
-912.32
1127.90
1504.37
-157.41
-452.46
-1095.55
-474.68
1265.72
202.70
17.02
1399.27
673.66
897.67
-847.49
-1597.27
222.72
1204.56
1471.17
1424.29
-1859.85
-236.27
1085.29
26.91
35.58
-1149.75
-141.05
550.73
1094.21
292.91
152.16
-1621.81
1779.16
868.49
-863.97
1490.34
1665.51
1298.92
-1697.01
435.25
-1967.28
974.21
-202.70
1836.66
1839.96
527.42
-808.92
565.99
1708.24
385.32
-1669.66
-295.35
537.18
1421.85
-123.35
1418.31
-622.15
-162.78
-831.38
1872.31
1189.55
-1610.95
-970.42
1310.15
1103.24
-1900.38
-855.43
-1579.33
-180.60
565.26
1633.04
120.67
-1237.89
991.30
442.45
-125.30
1617.54
-1919.55
185.97
-319.16
878.01
895.84
51.82
843.83
-1978.63
-1174.16
406.81
-1336.40
-53.16
-1222.75
-279.36
-1837.64
293.28
-282.17
-563.92
1975.34
266.42
696.37
408.27
-469.19
1598.13
464.67
540.23
645.10
-1736.44
825.28
1238.50
-1344.70
-418.28
-168.40
313.79
-1783.07
-677.08
-1036.34
-1047.21
889.85
-550.61
-1593.49
383.61
-360.78
-885.58
554.27
-136.41
-624.83
1543.19
-133.97
-389.23
-1344.09
1422.10
-801.47
307.07
1681.02
1420.63
-1259.62
-1205.05
-302.92
471.51
1672.47
-403.39
-1054.90
-1567.12
-1320.16
1876.58
-1730.94
-241.27
-558.67
1475.69
1515.48
802.57
1219.45
1640.24
-153.99
-622.39
-1323.09
70.98
1089.81
-798.18
1045.62
1918.08
1259.49
-151.55
771.32
-1654.28
-643.51
831.01
-239.32
292.79
-1410.01
-1554.42
1353.98
-947.11
-864.58
-3.96
-1850.21
-699.42
1556.99
-1973.63
-193.42
187.68
-1981.44
1187.35
-1054.65
-1865.59
-1590.31
358.71
-721.03
-1058.56
510.20
-1342.99
93.32
847.13
-682.08
-51.08
1204.68
154.36
667.92
498.00
-1481.42
1054.29
-1737.66
-1629.62
-1683.82
1268.65
-756.92
1221.53
390.82
-862.02
1425.39
-908.29
-1838.25
1781.60
-678.06
-1164.89
1889.88
-50.47
-1918.45
-1195.41
1119.35
1198.82
465.52
421.46
471.26
-987.88
1988.76
-748.25
913.54
1487.77
-649.73
215.76
632.40
1224.95
-722.25
-444.53
-369.45
-1970.33
909.75
-1815.79
-1822.62
65.49
-1156.10
1045.50
1234.47
-925.74
-26.30
-897.54
-1016.44
1293.31
1237.52
587.48
-418.28
1691.64
1409.89
132.75
266.30
-847.62
-1946.16
410.35
938.07
225.65
-1235.69
-1096.89
-1655.01
1075.16
1824.45
-1564.68
993.25
-752.52
-598.34
-1915.28
-1091.15
884.85
-1592.51
-896.45
377.14
-991.42
146.30
-1529.28
1782.34
498.85
1878.53
704.30
-1325.05
1393.41
1422.46
553.66
190.37
132.26
-79.28
-797.08
-1056.73
372.99
-104.92
-1396.09
-1475.20
1000.57
1716.17
569.65
-1274.51
958.09
-389.23
-751.91
609.69
522.65
335.76
1606.67
-432.56
-1348.36
1637.92
546.58
466.50
24.23
1630.48
-722.86
-967.25
-597.12
207.22
-428.05
-419.75
941.00
-378.61
532.91
1219.33
59.87
1353.12
487.38
-1335.06
1521.59
-1608.99
642.90
1773.67
1322.48
53.52
-875.57
-70.61
-1969.35
473.34
-1979.49
-592.24
1195.89
-128.84
61.09
-157.90
-1547.71
1744.37
1553.20
1914.18
943.69
-906.70
-1799.92
398.14
692.70
813.31
-1571.39
-1319.07
-459.18
-626.42
847.25
-1116.42
-716.26
-1087.13
-1535.38
-290.96
626.78
871.66
-1711.05
142.03
585.89
-1710.07
-1063.81
1125.94
-41.32
-106.02
-1129.12
-660.48
-1508.89
-903.89
1904.41
1202.61
1364.48
1035.00
576.12
-769.37
-1373.27
-1221.53
43.27
-1131.44
1196.14
-182.92
-897.54
1923.94
-942.35
1970.09
-1030.48
-1272.19
1282.44
-168.40
441.96
-852.62
-510.08
880.58
69.52
-1425.88
-1617.54
379.34
1957.64
1014.61
-1026.09
-1813.10
-172.18
-592.97
-1861.20
-1388.89
1962.40
-710.16
-1892.57
424.26
1655.26
1947.01
1530.25
-1831.29
1797.11
1153.90
1738.76
1876.09
217.10
1651.47
-174.87
325.02
408.52
1469.71
-1830.56
-1035.37
-1739.00
-1769.89
-1965.45
1624.98
1427.35
1547.95
-1141.57
-857.38
-54.38
-338.69
-1134.61
-1974.12
746.78
-1587.38
-1376.20
282.90
667.92
706.25
-826.62
-461.01
-1400.12
566.97
347.36
569.17
1391.94
-74.03
-1083.59
-631.55
138.85
-1741.56
176.45
-1113.01
-523.14
-803.55
-1392.55
1553.69
511.79
245.18
1227.75
1714.34
4.82
1724.11
1267.92
-891.44
-1558.21
1061.00
-209.54
511.55
-390.57
561.47
-1119.72
-1336.89
-1695.05
-1218.97
29.23
-386.91
-1196.38
1623.03
-657.79
-396.31
708.21
-711.99
1187.47
-1382.54
-1192.48
1200.65
1918.45
-286.56
1567.36
-963.10
1289.89
1277.68
-1122.40
1979.36
1194.79
-686.97
-314.52
-1678.45
1346.41
-1107.63
-1866.69
-447.46
-469.06
-98.33
831.38
1039.52
-1945.18
196.35
1886.71
-561.47
13.61
1297.21
-1683.33
957.85
1004.36
-249.33
469.19
595.04
-90.15
1277.07
-1924.80
-1520.98
-1622.30
833.94
560.86
1435.65
619.70
1718.49
240.30
-93.44
-844.08
832.85
1017.91
344.79
-1869.99
1239.84
1222.75
-789.63
-180.36
-867.88
1200.65
-1306.00
1966.91
-1659.41
289.62
-1707.87
-446.24
-493.72
1802.48
-1642.56
-1350.93
1042.32
-1357.76
1752.06
-50.47
-990.93
-1823.23
1726.92
-358.47
-971.03
-1006.19
-1847.28
1208.34
-635.09
-1833.85
-1772.08
1807.61
-1712.02
1648.18
-213.20
-1155.85
859.21
430.24
1335.79
363.10
-1749.62
1077.24
940.76
887.66
-1270.85
1273.17
90.27
-1671.37
-567.94
-1000.33
-1338.48
1588.24
-1946.16
1972.41
1111.91
483.71
1573.71
1959.10
22.15
-382.15
-854.09
606.89
1117.28
-181.46
281.44
-598.46
-112.97
774.01
1441.02
384.83
1935.05
488.35
-1831.53
-1745.59
1177.70
1182.71
1888.91
-1528.06
21.05
1265.96
-1505.72
-1996.09
1638.41
-998.38
-155.46
-680.25
-1525.62
-505.20
1306.61
-1726.55
-898.40
-1376.32
458.20
493.11
1552.72
-457.47
-1919.43
-1097.99
-745.68
-620.56
565.75
-1000.82
-311.96
1753.89
861.17
521.80
1902.58
740.56
1080.41
-1885.00
1002.41
-96.86
1901.85
1636.58
1738.02
23.01
1882.07
-1284.15
1323.22
-851.40
-193.18
199.89
-396.92
-1409.77
-791.34
-896.81
699.30
-1515.24
170.96
-306.71
256.66
556.10
1547.22
-667.19
-1583.97
1695.66
-1279.88
-295.84
639.72
-12.02
23.13
-1957.02
-1488.38
807.82
-1047.57
-996.18
641.31
610.18
1292.09
1783.07
1792.10
43.76
278.63
-874.11
363.35
6.65
-1070.03
-1159.52
346.99
274.97
662.55
444.53
-112.85
-1675.52
-676.22
1570.29
-1434.55
-25.08
1761.95
-1248.02
1538.68
-523.02
-1937.98
1221.77
651.69
672.20
569.04
-1662.70
-1346.29
846.27
-1174.16
-731.89
639.85
903.77
-449.04
1564.31
-1155.61
-512.77
-1221.04
-766.68
-1088.96
-1332.13
-709.06
-1050.50
1764.27
-1169.77
458.81
-979.09
1207.61
-1622.30
1628.40
-259.71
-626.30
-116.03
-1833.24
-258.00
149.72
-1686.26
-700.64
-1006.56
-1293.92
939.17
-1140.72
-956.75
-749.71
-1422.83
78.06
1152.80
-866.78
1771.35
1538.19
935.02
-568.68
1543.68
1416.60
127.14
130.80
343.69
-859.09
-1880.36
38.63
815.39
-414.25
-130.55
-455.76
-1989.01
-1067.84
-1180.27
-1641.59
-1325.17
1316.38
-546.34
-1645.98
1222.02
1393.53
-1894.52
-367.74
38.02
1938.96
-1346.17
-58.29
-277.04
1614.61
1723.86
1572.98
-1092.98
-1975.58
21.54
-144.71
1260.47
1183.56
-1574.08
1379.98
1323.95
-1474.10
-535.47
-1925.29
-1215.30
-1422.34
795.61
1255.47
822.96
-1582.14
1324.56
1778.19
-1847.28
-1945.79
-1423.07
419.50
-1615.46
-1162.45
1955.44
-1393.29
-1668.44
1040.49
503.25
1625.96
-1112.15
1725.33
1801.62
430.61
100.89
25.20
624.34
177.67
64.39
-1034.51
1975.82
1614.73
-743.24
-1051.72
1135.47
-556.84
1950.31
26.79
1337.26
-215.76
314.40
92.59
-295.35
870.69
840.54
-1896.84
-1930.05
-909.87
-1288.67
1473.25
1301.37
505.20
-258.85
-1245.82
-238.83
-24.96
-489.33
729.20
-1475.69
3.35
-677.08
-954.19
1978.27
-561.60
604.08
1513.77
430.12
149.11
1374.37
1190.89
-651.69
1802.85
414.99
-1615.58
1860.71
869.71
754.60
690.02
1135.59
-21.05
-1898.43
194.89
1271.58
-248.97
1846.67
971.77
-680.74
-768.39
-1739.73
-15.68
-939.42
1053.07
-489.21
-1466.29
1172.33
-554.64
128.36
-631.55
395.58
-774.13
537.55
-1416.97
-1660.63
-110.41
-712.60
-569.04
-1457.99
925.38
1600.32
1176.97
414.50
-1514.99
1866.57
-1887.20
-1307.71
1528.30
-290.71
1863.15
1019.86
1568.83
-754.84
-1896.35
-1707.26
148.13
-835.90
-1179.29
383.12
159.85
-743.73
1232.52
-127.62
1151.09
-992.88
-1498.88
416.69
725.30
1889.88
1358.01
370.92
-1828.60
976.40
-231.87
294.74
-1554.67
-504.59
-240.91
966.76
627.03
1959.10
538.65
531.81
979.46
1485.82
-973.96
1405.25
-1265.23
-1056.00
-1076.50
-439.03
-1268.65
-460.28
-549.51
-1173.43
-972.86
-1524.39
868.00
-1188.20
1615.58
1305.15
1916.62
-905.60
-1633.28
-1393.53
-1707.26
288.76
-1678.21
602.61
1291.11
623.37
462.35
-649.37
1733.75
649.12
-1918.21
127.75
-1685.29
-1292.45
-1115.45
1636.58
-516.55
1780.87
-1065.64
-1344.70
1992.06
-1651.23
-1418.31
-1239.72
-768.51
1881.22
-1509.14
-1258.64
-1517.56
-415.60
-105.04
339.18
204.90
-965.54
-798.79
-1072.84
-1509.01
-684.77
1074.19
764.00
-191.22
-709.31
119.20
-1558.45
-841.76
1634.63
-706.50
152.77
-1232.64
1243.01
-831.75
-1595.08
451.97
655.11
-1832.75
1803.70
764.48
1106.05
1907.34
-468.33
56.94
-161.93
1765.00
-1851.92
-1416.48
-1705.55
795.61
333.44
-1234.10
-179.02
-872.28
1204.07
-1250.95
1500.59
959.68
-177.31
370.18
-1254.49
-717.00
1529.03
666.95
-727.37
457.47
715.29
-1949.94
1086.15
761.31
-327.09
-1735.34
-906.94
1045.13
1133.88
-734.09
-1022.43
-389.47
-1868.16
132.87
-1043.54
1441.99
-1189.30
1148.28
-1956.29
-87.09
1800.77
164.98
-552.32
1096.28
-208.31
388.86
-274.72
-1200.65
-1073.70
-1301.49
320.01
-1548.81
-361.88
1630.97
107.73
1966.42
-1439.43
-1844.84
1573.71
-289.86
1130.95
360.17
1249.85
1690.54
514.23
1182.10
1033.17
-1898.06
473.34
295.11
-988.12
1344.82
1808.83
-708.09
425.85
-352.61
1994.01
1277.80
-616.90
-1586.16
-369.21
3.84
-39.61
-575.76
1350.32
1664.41
-689.41
-1989.98
-1215.91
483.71
1404.27
333.07
1231.17
-784.14
27.03
888.63
-356.27
-314.88
-337.96
-1637.44
-439.52
-1511.21
878.74
1963.49
-1391.82
990.20
-1145.97
-1644.03
-1799.92
725.54
1653.92
-677.20
1053.55
1349.46
893.76
275.70
153.38
245.06
1410.87
1744.98
-1214.33
-1076.99
-1433.82
-30.57
-732.87
-665.97
1806.26
-1286.35
-6.04
-778.77
1106.17
435.98
-1563.82
1636.58
-1077.60
933.92
-296.09
-254.82
276.43
1590.44
305.73
45.47
-403.14
-652.66
-1269.14
1127.04
945.52
530.10
-1525.86
-907.19
-1750.96
-1351.54
-867.15
771.08
166.08
-1699.94
1197.36
-159.61
-1790.76
1299.41
163.51
994.47
-1246.92
1158.78
-409.86
-729.57
1546.61
-1953.97
-1274.39
-332.95
1361.79
343.69
331.12
176.09
-603.10
933.92
-1676.25
-646.93
1065.64
-1663.19
-1135.34
-447.70
-1208.83
-1176.85
-1482.16
-1049.28
435.25
1630.60
1104.34
-513.87
1983.64
-595.41
876.18
-166.20
1115.45
-7.01
1636.34
547.80
-1720.57
1715.20
-571.73
-1508.65
1903.92
233.95
-1578.11
1681.02
363.47
-846.27
-381.66
1669.30
1329.56
-1529.77
1.28
-1406.84
1128.02
996.67
1758.29
9.82
730.18
-1108.49
1196.50
647.17
-998.99
413.15
980.55
193.42
-169.13
-974.45
-686.11
-1749.13
-225.77
981.29
-308.17
-421.58
821.98
1504.62
-1151.46
748.37
-1068.94
1703.23
525.83
-657.91
937.34
330.02
686.11
810.26
475.29
521.43
-203.80
121.28
1532.33
1638.78
-193.42
1324.56
258.73
333.81
1450.17
152.53
1662.22
-1031.58
-512.52
786.95
1809.32
1509.26
-478.83
-86.36
159.85
-976.53
-1993.40
1192.11
659.38
903.53
1082.36
1263.40
-1785.88
1940.30
-154.36
-1576.76
1174.04
1375.10
1699.33
1082.73
-1551.86
52.67
-607.37
-855.92
1878.78
-199.77
1383.77
-584.91
497.02
-841.51
1145.97
188.17
1287.94
1589.09
1046.11
-1892.81
1086.39
-1716.05
416.57
-1549.79
232.85
1700.91
-551.10
1949.70
-1389.87
-49.50
531.69
-723.10
689.77
160.10
-1340.18
-1682.85
-1791.00
-1060.76
-1462.14
-643.14
1108.12
71.47
-1995.23
-689.65
1348.24
1557.60
-596.14
111.63
238.47
136.05
521.56
-1605.45
-104.31
-595.78
-1276.10
-413.40
1461.16
1666.85
-88.32
1542.34
-1299.29
1635.24
1921.14
-1159.15
1613.51
-1896.11
-4.82
872.64
-1328.59
1728.99
-49.98
-1161.22
318.91
-968.96
-1337.87
-1207.86
353.22
-1247.41
1500.22
-160.22
1814.44
690.02
327.34
-1363.87
6.65
1127.41
1699.20
-710.53
1278.78
-1002.65
881.92
1808.22
-1814.08
893.64
-684.40
210.02
-338.93
1059.41
1147.67
-578.44
816.98
-1522.56
-1537.82
-1909.05
-991.79
-812.09
829.43
-1560.16
774.98
1955.68
-1200.53
-1720.20
-1706.28
-583.94
968.47
-1682.97
-36.80
821.49
-1762.19
-127.62
1745.35
513.99
-1104.34
-1861.32
-108.95
-1749.62
141.91
-1896.11
-326.85
-496.29
-315.25
-1737.90
751.79
1865.59
1032.56
1239.35
1798.21
-324.16
105.04
457.59
1000.94
1003.50
-1209.20
1963.86
-919.88
1104.34
1074.67
-1452.00
1434.30
-1520.24
1360.57
-726.15
-1954.58
1662.83
614.21
-449.29
1766.22
854.82
-48.15
-1132.66
-384.22
539.62
-701.13
-682.82
1707.63
-801.23
-1256.08
34.85
]]></test_input>
<test_output><![CDATA[58052.25]]></test_output>
<test_input><![CDATA[1
50.50
25.50
10.15]]></test_input>
<test_output><![CDATA[27.85]]></test_output>
<test_input><![CDATA[415
-629.59
1153.17
-734.94
-320.74
794.76
551.71
-562.45
-90.51
-1694.20
77.45
691.00
633.01
-1246.07
-1334.33
1761.22
1019.50
499.71
-372.75
-462.35
-67.32
351.87
-1665.27
506.30
-1894.89
1544.41
-1208.59
1542.10
257.88
1877.43
1707.87
179.02
790.00
-852.38
711.38
482.37
-1336.03
992.88
1313.45
-1353.49
1111.66
274.23
-740.31
-1555.52
1784.78
-875.20
887.66
654.25
976.04
-1214.81
-1882.07
586.62
1535.87
-1645.49
702.23
1839.96
109.31
-420.36
-1645.13
405.59
-682.21
808.92
-607.62
-749.47
511.91
1234.71
-1495.22
-498.12
-1281.10
-1449.56
285.71
357.00
-588.94
1146.33
-854.82
1846.06
-1281.22
1968.74
-1770.50
-1429.54
-1285.50
-830.16
-24.84
-1456.40
-608.60
-1329.56
-1080.78
-742.51
-1036.95
-238.71
1393.65
-898.89
107.85
-1129.85
-1273.41
255.92
1783.92
616.53
-1422.58
1191.62
-1760.36
-718.95
1028.04
-1109.83
843.95
-186.59
59.02
-1079.92
362.13
1505.47
1032.07
1487.53
1302.59
1451.64
-1194.67
1589.46
1957.51
925.38
-892.05
-607.13
-234.80
-206.73
-204.65
-1034.15
-382.76
-1906.61
-1386.08
-514.96
736.04
1903.80
98.08
1044.77
-253.36
623.12
224.92
1192.35
1571.27
792.56
1451.64
315.98
-233.58
-420.36
761.07
7.75
1932.49
-946.86
-659.99
529.49
1816.88
370.55
515.45
1504.74
1739.24
-995.33
572.58
-38.51
-1039.52
136.05
-917.56
1853.26
-377.14
-668.41
1360.94
1179.54
1885.49
-359.81
-314.03
-1165.13
-120.79
-1775.13
1898.06
-691.97
-1891.72
1661.12
-1992.67
1358.74
-78.55
-977.50
1435.77
794.76
-322.33
-118.35
-486.28
1476.91
-1766.22
-1650.25
1863.15
675.13
-623.37
-1719.96
1285.62
900.23
-1175.38
760.58
-215.27
-1661.00
-573.56
1020.72
-1654.28
13.97
178.89
-122.62
-901.57
-204.04
689.77
844.56
-1513.04
1393.04
711.99
-1967.77
73.67
-1559.43
372.87
1959.95
1599.96
-181.82
722.73
407.54
929.77
-1681.63
-1770.13
1432.84
-498.24
-1208.71
845.91
-324.16
-86.48
-108.58
-734.70
1078.21
263.98
1551.01
1006.56
-858.60
1878.17
303.90
937.34
1849.72
1040.49
588.21
-128.48
-1619.49
1360.57
147.77
860.56
731.16
1396.09
1662.46
-1195.65
1382.06
-1840.08
728.35
1009.73
-1873.53
1134.12
-1683.70
-1683.21
-812.21
1416.24
-169.98
422.55
-249.09
-1375.10
892.05
-976.89
-966.27
-1812.86
1981.56
402.78
1021.21
1633.89
46.81
-907.55
-9.82
-1472.51
-777.91
-1776.48
1946.40
-1350.68
768.39
202.45
-897.54
1066.74
-1633.04
1330.17
518.38
-1288.91
-1109.71
1992.18
31.80
-913.29
-1227.27
-1956.54
602.61
-261.66
108.70
1014.98
195.74
-899.13
602.98
763.14
-1671.13
1357.76
1496.44
-1807.97
408.76
-68.66
-405.83
1670.15
-1018.40
-1768.42
-480.30
-1234.35
1022.91
287.54
321.23
930.63
390.57
1885.98
553.54
751.79
568.31
-1155.85
-37.04
-601.15
-1178.31
-961.14
1897.09
-106.99
894.37
-1180.63
-1432.23
-180.12
1367.53
-1571.88
-710.53
-887.17
-1190.64
1053.31
-180.48
533.03
837.85
-1859.98
925.38
-1532.33
222.35
1585.07
-1697.25
1675.40
1150.48
1437.11
-29.11
1600.57
782.55
1732.29
1268.65
-116.03
1221.53
1085.90
1578.47
-1306.49
1020.84
-1332.01
900.35
-500.19
1356.66
185.85
403.51
1922.23
-10.19
499.83
1078.95
270.45
140.93
1496.93
619.09
1407.20
-594.92
1847.16
-1351.29
1553.57
1830.19
1267.79
-1567.73
1668.32
-1715.07
-80.01
-816.85
-980.55
-1759.39
-435.86
-900.84
-1422.34
-1908.07
-903.28
-749.83
1854.85
1141.20
-903.40
441.11
812.34
-1627.06
2.25
-821.98
-1534.65
1142.06
548.90
-1140.35
-192.57
-1100.07
1086.39
-1679.06
-1320.53
1086.88
-1593.73
1853.02
210.15
310.73
]]></test_input>
<test_output><![CDATA[-15930.62]]></test_output>
<test_input><![CDATA[1208
-1921.14
1430.89
-633.74
-1861.07
425.97
-1276.10
-570.39
-714.43
1483.74
535.35
-387.15
173.03
-356.88
193.42
425.00
-208.44
-1619.00
-74.03
-791.95
38.63
233.10
1440.90
895.47
1944.82
618.36
951.75
-566.11
1905.51
1640.49
274.23
-1004.60
547.92
-9.46
-382.15
-1897.82
-1146.33
1077.24
-302.80
1791.74
-1834.22
1506.33
-1210.30
945.03
-1297.58
39.49
362.62
-95.40
1203.95
-847.13
895.71
-494.33
-1662.34
1322.61
1525.00
647.90
485.79
-1837.64
1130.22
-470.90
-1459.70
536.82
-1505.84
-329.78
331.73
-222.84
1156.83
-147.64
-685.50
122.86
588.57
-905.11
136.53
515.33
-688.55
1795.77
-284.49
1867.79
1587.75
161.56
448.31
1936.76
1305.88
1052.58
-1821.77
1920.40
-1314.31
-1634.63
1545.64
-1091.89
-570.02
-1919.30
1344.95
306.95
-55.48
1099.45
-1483.74
-1630.84
255.68
-1007.04
1393.53
946.86
246.65
-206.48
835.41
597.73
839.80
-1052.94
1865.59
-1832.02
1748.77
556.23
443.55
-1024.14
1426.86
37.04
-5.06
1722.76
-1165.62
1314.79
324.16
-1744.86
-1347.27
-316.35
1535.01
303.41
-432.56
-544.14
-416.94
-677.57
-752.40
1524.76
87.71
-442.09
-355.05
1966.55
-974.82
-1534.65
-1761.22
806.36
930.99
-1395.00
850.55
-1926.14
-766.56
1138.40
1654.28
272.65
1347.27
1050.99
-1992.91
-1612.65
-853.11
-1772.33
1725.45
557.32
-548.66
503.73
-1569.56
537.55
-861.53
817.46
590.65
1073.82
-480.78
589.80
1882.32
1317.97
593.46
1455.30
-1502.18
-594.31
1814.93
1469.22
1022.91
-674.88
1987.30
1917.47
-1491.56
1197.85
919.76
851.28
-1635.12
99.91
-536.08
-524.73
-300.48
546.83
560.01
1510.48
-273.99
-232.85
-85.87
-339.91
-1132.41
-1108.98
935.14
1301.49
182.19
-823.08
-1447.12
-470.90
731.40
-1597.52
-1454.32
1675.40
-1479.23
545.24
998.74
1431.25
635.21
1876.21
-1478.01
-1304.91
193.91
-1405.98
1850.45
1272.31
-247.99
-878.50
-548.53
550.98
771.32
-1807.48
-233.83
-719.19
786.58
-147.40
-1292.58
-423.53
1893.18
-1502.30
1041.47
1274.02
178.41
1078.95
-1723.25
-1236.54
-275.94
-405.71
-313.18
-1577.13
804.89
996.06
-911.34
778.64
1905.51
-363.84
-1993.53
1518.05
1184.66
-623.61
-158.26
-521.92
1008.75
-1513.29
-323.67
1735.46
1180.76
459.18
333.32
1923.82
489.08
-140.69
-678.54
1901.85
203.19
-1657.94
1286.59
898.77
1137.66
-42.05
595.53
-1739.49
-87.09
871.05
679.28
1923.21
35.34
-1381.81
-1242.53
737.14
-576.00
31.06
-1428.32
769.12
-1994.14
947.47
-249.21
-295.48
-992.27
837.12
-1565.29
-522.90
-431.59
1465.80
-219.06
-750.57
295.11
724.44
978.11
871.18
1391.46
-1253.63
1393.78
937.46
-1020.23
-560.50
-1521.71
1574.93
1245.09
556.47
-1946.53
-1921.26
-1978.02
-569.78
1607.04
-473.34
-545.12
-502.51
-778.77
493.85
1351.05
737.02
-1241.18
-4.82
854.94
-853.72
-67.69
1778.92
68.30
-1617.05
-120.05
95.76
1240.21
-1305.03
-1124.60
1071.87
-848.84
-1735.09
795.61
-194.64
-1679.55
92.71
969.81
-682.45
655.35
-456.25
38.63
-521.80
-826.62
1684.92
443.92
-1966.18
-581.74
-464.91
177.80
-138.00
197.08
-1645.13
413.52
576.86
-737.87
1100.07
1645.37
612.62
-436.23
164.25
959.56
-93.44
1697.62
-1464.21
1065.40
1310.64
-1827.26
1493.51
-293.52
852.87
-874.23
1966.30
-1917.72
976.53
1103.48
682.33
900.47
880.45
542.55
232.24
-1311.62
86.12
-431.34
-1829.34
987.15
1355.57
1740.95
-1717.15
-947.59
1086.64
1367.29
1139.37
-1309.91
1310.15
14.34
1065.76
1847.40
-587.96
1838.25
-1349.71
1588.97
1709.09
1360.08
-82.58
1078.82
998.87
-687.21
-712.36
1197.24
214.30
181.95
1454.45
-586.99
-1698.59
-931.85
-702.23
540.84
451.61
-506.30
-1036.34
-1995.23
808.06
1780.51
1230.81
-1764.15
-224.43
-377.88
-1707.02
-1173.80
55.97
477.85
-920.01
1067.11
-464.55
-590.04
-1758.04
-505.93
1147.92
1993.65
1923.94
1065.64
1840.93
1919.55
1452.74
598.46
766.80
919.40
65.37
1087.37
827.11
634.96
-200.38
1530.74
-308.29
-1941.89
1673.69
890.95
420.97
-1833.61
-1718.86
811.36
1813.71
-622.27
-75.99
-283.76
-1393.41
1452.37
1409.89
918.91
-348.82
-536.82
-1361.43
-637.89
-1809.19
1463.11
-1897.09
1617.05
-1634.26
1470.80
427.44
-235.78
68.78
1403.79
1072.96
1783.44
-1722.28
1580.43
1328.59
-925.74
-1010.46
1417.58
718.83
1737.54
-118.59
1949.21
-51.08
-1763.29
1822.01
-211.24
1515.61
-1931.02
-638.75
164.12
1105.07
-1931.88
320.13
-1354.22
906.21
-1034.51
-1392.55
-803.91
1963.25
834.43
-1611.19
-1835.56
-1309.06
41.19
1731.19
1851.92
680.86
329.66
1849.60
-728.72
919.27
664.14
-1919.67
1728.14
-453.56
453.56
-1294.16
-1153.90
-1721.06
785.36
-244.33
-1336.28
-1379.37
-1709.83
1909.17
1425.64
-1011.56
-1733.75
1625.47
-1306.00
-123.35
-314.52
-1376.07
-593.58
185.85
-1292.58
-157.90
-1497.42
1840.69
-673.78
1994.14
1748.03
1821.03
1775.87
857.02
-1624.25
733.11
1317.11
1407.81
-823.93
-955.29
33.63
936.85
-345.65
-1891.47
259.71
-736.28
1885.61
1100.55
-1733.75
178.53
-1311.99
-1003.14
-1169.77
-1763.90
1743.76
714.92
1310.52
-974.57
1287.57
543.53
1857.78
-958.70
-1006.80
1987.54
-1618.03
1282.57
1678.33
-849.57
-1097.62
702.10
1455.54
-1217.50
-95.27
-367.62
1953.48
116.51
-666.95
-685.62
233.58
-381.29
-1162.45
-349.43
26.91
1778.06
-93.81
1312.35
1915.64
-939.78
503.61
-1678.70
-1913.69
-1850.21
843.34
-765.70
1277.44
-392.65
917.56
1053.31
-453.19
65.24
-1590.44
1988.15
-1514.02
87.09
1614.49
1195.04
-1496.68
-1182.71
1991.82
-383.25
802.81
-1456.40
977.26
-1949.70
1684.19
299.26
-323.92
-1435.65
786.46
1629.13
-1934.93
1394.87
-1095.91
1644.76
326.85
-558.67
-1003.87
493.97
941.86
-1509.50
-1982.54
-1631.09
164.12
1290.38
-805.50
1178.31
-496.41
-398.14
371.28
-1991.08
1842.28
351.75
51.21
1501.57
-1192.72
-1988.40
758.50
264.59
-1972.41
-670.73
-654.49
-1546.37
898.40
535.96
-129.45
-361.27
-522.78
-844.44
-1330.17
-1914.18
-860.56
540.48
1251.44
-1421.85
-383.98
1258.27
632.64
-99.30
1038.17
1455.91
749.96
-885.83
-383.98
324.90
-1438.33
-256.78
-425.12
-1206.88
473.46
1003.26
1973.75
-431.22
-1293.06
-808.67
1031.70
659.74
-759.36
-1632.92
588.33
495.19
-1055.87
1446.51
1320.04
-1225.44
-465.40
-1165.37
-659.50
-833.82
-22.64
1724.23
-1191.38
1984.49
-1043.54
1181.00
-830.65
966.76
1042.45
144.84
-347.97
278.75
-1822.26
-530.96
1651.72
1869.99
110.17
1124.24
-381.54
-693.92
1394.26
1690.42
1079.31
203.31
-1410.62
-735.80
-1582.01
1389.01
1278.54
-1095.30
1037.81
-1086.39
-1469.95
-256.78
-1468.97
1040.00
433.42
881.92
-516.06
-1666.98
326.24
1207.12
535.84
-1022.79
1345.07
-1758.65
-1675.52
-555.37
919.40
1159.52
-1063.20
-1359.84
836.26
-906.33
1494.00
1648.06
501.29
-147.40
-1506.82
1205.05
1018.89
180.36
1533.06
-975.18
1717.88
-1322.24
-953.70
-899.86
748.00
515.09
-1334.08
-895.47
1371.31
1056.36
848.35
22.40
-425.97
1524.39
379.71
129.82
-1376.44
-170.47
-1609.72
1452.13
-1803.58
1687.49
1501.32
-1177.34
-299.75
-849.81
-1270.11
-331.12
-582.84
1677.84
776.45
649.49
-907.68
-1127.41
320.01
1267.55
1592.63
3.35
1947.14
586.87
1260.47
1443.22
336.74
1173.07
588.09
-853.23
-669.88
-1612.65
-1162.57
1291.48
-1493.02
-843.22
229.92
-1793.08
-104.67
345.28
-668.29
720.41
1437.84
-1147.92
-740.68
38.88
1843.25
-438.30
330.27
297.18
-556.84
1269.63
-1215.18
894.37
1683.58
-1289.52
1201.87
-256.17
-127.14
812.82
-1764.03
-1436.99
1813.34
-695.88
-700.03
1327.49
940.51
-205.63
-183.53
-987.27
-1405.25
1459.08
-1333.71
-248.35
-1948.48
1450.78
1456.52
1530.13
-1066.49
-1839.10
-766.56
-1453.59
-1368.51
1458.84
-1733.14
-1638.90
1357.03
31.31
-1471.54
959.19
1453.96
1950.68
491.53
852.13
1592.15
-1407.81
1875.60
-655.11
468.94
29.72
-39.12
90.02
-1356.30
32.16
1099.45
-942.47
1130.58
-1213.84
1044.89
-1957.02
1372.66
1471.90
1728.75
840.05
1225.80
812.95
106.14
1201.51
-426.22
1730.09
-1301.73
1715.20
202.09
220.28
1453.10
718.22
-445.87
-1411.72
553.30
-1624.13
995.57
1153.05
1793.20
-950.77
211.12
557.69
-1848.38
1076.50
359.56
-1195.28
-814.41
-905.60
1610.82
1143.77
1867.67
-1977.29
-308.05
-1065.76
-1504.98
-161.68
-1934.69
-388.01
-705.77
-1737.17
364.20
-119.44
1344.46
-1509.75
-287.91
254.46
1447.61
1077.73
-451.12
1079.31
568.07
-874.47
-1409.03
-1846.06
1468.48
-128.11
-1452.13
-1922.36
-835.29
-174.26
-777.06
-549.15
1827.02
564.28
-379.22
50.47
1751.09
-1680.65
1688.22
108.21
-1975.58
-1521.83
-687.45
1815.30
-1485.82
122.50
1203.71
-822.59
-1202.49
1732.65
-1717.88
-1651.47
1665.63
1179.54
202.09
-1436.01
-1179.66
1132.41
-369.57
1801.38
-1606.55
1003.75
909.63
1292.82
-91.37
-1440.77
-271.91
1014.00
316.35
-1682.48
-1576.40
274.23
722.00
1862.17
-455.88
-466.87
1436.01
1194.06
-1708.48
1569.44
-1032.44
-1752.43
473.70
125.91
590.53
-303.53
-1411.48
-1843.98
-1897.09
-1828.73
666.46
-203.19
407.91
1019.74
495.68
-1806.14
-1460.67
1727.65
-145.32
-697.47
-1241.67
-869.35
-621.78
-209.41
1344.70
-459.42
680.86
-832.11
708.33
-1091.28
363.47
267.03
446.85
155.33
-1473.25
-1798.69
-1027.19
-1213.47
-1580.91
-76.84
-663.41
-72.81
-159.24
-1489.48
-1130.83
-109.43
-1068.45
303.65
270.82
-586.26
966.39
1018.52
-230.29
1681.75
-1216.65
963.10
1975.70
-1735.34
-529.98
-521.56
1055.02
96.01
-67.93
-1267.55
1849.72
612.62
1969.84
989.83
567.46
185.36
-512.03
1483.74
-1333.10
-1036.46
462.84
1013.88
1563.46
-742.27
292.30
396.31
-220.16
587.84
1154.02
889.61
167.42
518.38
1995.60
722.37
822.96
410.47
1783.68
-151.43
1324.68
1209.93
635.09
-947.72
1915.40
401.92
1456.03
1531.47
-745.93
-746.91
713.95
-919.27
364.32
-531.20
-1032.80
-997.03
-1598.25
-1612.04
-221.74
1871.57
-131.90
1844.23
-366.64
-1731.92
-1105.80
-186.34
1496.20
-1375.95
219.42
-21.42
-1381.32
287.05
-1509.26
329.41
1235.20
1938.84
-492.01
-69.64
763.75
1491.31
-962.37
975.31
140.81
-417.67
824.42
1256.44
913.54
799.27
1420.51
-1827.26
-285.47
-1246.55
-537.55
-597.24
745.32
1131.80
1017.30
1365.21
891.68
848.96
-1376.93
-1404.76
-1902.70
1427.59
-347.84
1158.66
-379.83
-1271.34
1617.05
-769.85
796.47
-840.66
-1951.78
-37.90
-1062.22
481.76
567.58
-235.17
986.29
-651.20
780.48
1128.75
1551.37
-308.29
1614.73
]]></test_input>
<test_output><![CDATA[-71625.89]]></test_output>
<test_input><![CDATA[2911
85.75
888.02
1647.69
-1921.26
-1972.16
334.54
-689.53
1622.30
184.27
356.51
1216.89
1650.86
-135.92
-1002.89
1324.68
-1973.50
-1728.01
269.11
-1284.40
-1852.65
1286.72
320.74
1595.08
1445.78
464.06
922.69
1332.01
1770.01
394.23
-99.18
-337.47
-1726.92
533.52
-1862.30
-1817.74
-564.53
1638.78
771.32
1253.88
-1156.22
928.06
212.10
1451.64
-645.58
-1907.71
-1392.92
-1327.61
263.13
285.22
1373.51
-1965.81
108.82
212.10
-572.71
1689.19
1734.36
-551.83
-266.91
-324.90
230.29
-893.88
1798.33
-1067.35
386.91
1981.44
-261.54
-390.45
278.38
298.89
-462.84
1780.26
-394.97
1186.01
-873.13
-295.84
1418.56
-2.86
914.51
-1251.93
1855.09
1615.46
378.00
97.59
500.44
-144.84
357.61
382.51
-1985.96
-908.53
-1332.49
-658.65
1635.73
241.03
-1346.53
-1349.95
1198.33
-780.48
-1680.04
1039.76
276.43
1.28
-347.36
828.33
1090.30
-1595.81
1761.95
-1008.88
-206.73
-1272.43
-528.88
1896.48
-1232.15
-634.72
-1024.87
828.57
553.42
1521.59
194.52
-573.80
-1967.77
1152.80
1449.69
-1840.44
1498.64
-1739.37
80.75
-1028.16
1235.45
-336.98
637.16
-791.83
-1776.48
1364.23
263.13
1961.54
1609.24
-1345.68
-1096.65
-45.71
1553.94
-1941.77
-46.32
87.22
92.71
-737.63
982.26
1774.77
624.46
1141.81
146.18
195.98
-1339.33
15.68
1928.34
-415.84
-1543.07
-1747.79
-180.85
-319.77
-1848.26
-648.15
-430.24
475.41
38.75
-369.21
639.24
368.23
596.51
632.40
-537.67
860.07
900.72
388.62
164.00
915.12
45.22
-340.89
341.74
-1890.86
194.89
1271.82
1545.51
-306.95
1896.60
-1310.89
76.72
694.17
-1726.67
-72.57
-267.03
182.56
-1274.39
-1049.04
-1877.19
826.62
-1233.98
669.27
176.33
-1137.91
-1388.53
-340.28
-1525.00
1600.20
-841.39
-1257.05
-1971.31
-400.21
1966.18
-466.87
1120.94
-1370.34
1871.08
-908.04
1850.58
-1456.64
-1138.03
806.97
1994.01
193.42
1835.44
1623.27
1811.76
-489.08
-1139.86
-249.45
1426.37
1872.31
-1425.88
972.74
-1604.96
-118.47
1339.09
-317.33
1102.63
-309.03
778.03
770.71
-400.21
-1013.88
-1678.57
-1512.92
1512.31
1759.26
-615.43
-1591.90
-1355.69
997.77
1803.94
-1372.17
-96.62
-1588.73
1155.98
301.58
169.25
322.58
-416.08
-334.42
734.94
-1152.56
-1242.89
-340.76
-1059.17
1489.97
-411.57
1272.56
-1368.99
-1725.69
1334.20
746.29
-946.13
1543.80
-1298.07
748.37
1833.24
-454.54
1591.90
1650.99
1634.87
-1067.72
94.54
1035.73
153.63
1301.85
-627.39
-450.63
1045.25
899.74
-949.91
1236.18
1428.69
612.87
1734.12
-1527.93
1584.33
1375.95
1294.53
1625.59
471.63
-1883.17
-472.97
-430.73
-1307.35
1367.41
1823.48
-830.65
525.95
1661.36
474.31
1875.97
655.11
-151.92
230.90
1539.17
-781.57
444.16
-1251.93
1578.47
-1196.38
-850.30
537.06
-372.75
-987.64
1653.79
1048.67
1779.53
-1779.16
852.87
-483.35
-1437.11
-1839.71
1609.97
1182.10
763.75
943.08
176.70
-473.34
-772.05
-1842.03
-595.29
-861.65
-1236.06
1663.07
-1129.24
1834.95
-1727.89
-303.53
1042.32
670.12
-774.13
-66.22
604.69
448.07
-1371.19
-884.24
-1919.79
1370.09
574.54
871.05
859.21
439.40
-1468.97
1358.50
770.34
-750.81
-1520.61
356.63
-683.43
777.55
-973.60
1421.73
1698.35
-184.51
-1379.49
-1258.27
-1248.39
1653.92
1993.40
-1688.83
1925.41
1651.35
-46.57
-950.04
-1578.11
311.47
-1343.85
1494.12
-372.02
-1508.04
475.41
1680.28
1958.49
-627.52
601.27
1852.04
1239.72
1803.94
1490.70
-389.72
-243.35
-333.20
1292.58
-865.56
-909.87
-137.88
-1623.64
-1900.75
1866.57
1559.80
86.61
1911.37
-452.58
1329.56
1848.13
-1108.49
1383.64
-1219.45
749.10
26.91
1657.33
-666.34
1725.21
919.27
339.18
750.45
469.80
1552.23
-1715.68
46.20
1196.75
1505.72
-1908.32
-589.67
1378.64
-1761.46
-246.89
-240.18
1587.26
-1931.51
-1783.56
549.63
560.74
-529.37
-12.26
-1532.82
1621.81
-1677.48
1896.96
-366.28
-1427.35
-1280.73
1153.29
1938.96
-807.94
-1016.81
-185.12
-1867.30
-1542.10
495.19
796.22
301.21
-377.88
969.69
-1458.72
348.94
-737.75
-198.43
1484.96
-885.21
-1566.51
1107.51
1427.47
-1254.49
49.37
-1912.59
-1049.77
-1047.82
-1388.77
332.34
-5.92
-225.65
-1582.99
-299.02
726.52
-523.39
-1630.72
393.01
-176.21
-1796.01
-488.11
842.00
-708.33
19.34
1416.36
1053.92
950.52
-51.45
-454.05
-984.34
-291.57
658.65
1721.30
1799.31
750.32
1394.63
-188.54
-1014.25
1764.15
-202.82
-1221.28
35.34
-667.56
1230.56
-802.94
-773.03
612.26
240.79
-624.95
1793.93
-570.39
773.88
1203.22
-1121.18
1912.59
-224.31
1853.75
935.27
788.65
799.76
-542.55
1198.46
-528.51
-1752.18
-1119.23
-1148.16
1061.12
-1131.19
1730.94
1514.02
-616.53
1139.98
-1289.16
670.61
-805.87
-844.32
453.07
-322.94
-1329.08
-349.68
952.48
-43.64
1320.78
-1223.24
1727.89
1016.81
-1574.81
-729.57
-1166.35
-84.53
1150.73
-1381.57
849.08
1792.22
-552.93
863.73
-32.04
-901.82
-1139.13
-1334.69
316.23
-854.33
387.40
-1757.07
1619.73
1602.40
-1513.65
1828.36
-1650.25
1556.26
-1612.17
249.21
469.55
-223.94
-189.39
-1727.65
-92.71
-207.95
221.38
1328.83
880.58
1421.24
756.30
-1754.38
-1801.62
-1635.85
-67.07
612.87
1663.44
1496.44
-1724.47
1406.23
-1298.80
-520.34
-1020.11
1494.24
1342.14
-1680.04
-258.49
-1348.61
1677.48
-505.81
873.37
-293.64
1919.79
-1726.55
837.85
-1554.67
-812.34
1865.71
317.57
-99.06
-856.04
1004.36
1950.19
1646.96
-1391.94
-1393.04
-1148.16
726.52
-727.25
1129.36
-943.81
838.58
644.97
239.57
-1009.73
406.20
-1660.14
-1562.36
1116.67
153.63
-148.99
-1754.02
862.75
-1184.30
-79.04
594.07
1965.81
-394.97
-359.44
23.86
1355.57
62.07
-601.88
-1658.55
-1297.95
-86.73
1805.65
337.83
-248.11
-438.67
-1273.41
1205.17
578.56
-165.71
-1468.97
1273.90
1872.55
-383.49
-299.75
1694.81
393.99
1988.03
-1089.57
691.61
-1283.54
1496.32
-283.51
8.23
383.00
-813.92
1962.03
1177.70
-398.26
-1987.67
-1957.64
1234.59
606.76
1260.35
143.37
-500.80
-194.28
-1401.34
580.88
1056.85
1843.86
-1609.36
1368.26
556.35
-1294.41
-1111.91
-865.19
-44.49
-1019.13
933.07
1521.10
-164.37
419.87
-1208.10
1174.41
1911.86
902.79
-251.77
-526.68
-1636.70
947.96
1077.24
-1898.55
1610.21
883.87
-970.91
-1400.86
-1841.54
1811.27
-1555.16
15.93
142.27
1478.01
1629.62
-1209.69
-1814.56
-1806.14
1108.61
980.68
1209.08
1909.54
-1108.00
-1027.43
-1191.86
1583.36
871.66
-1212.01
-174.99
-36.19
975.79
-1879.14
-1258.03
910.48
-293.52
1224.70
-479.81
378.12
-314.64
-1224.70
508.01
-1808.83
-1168.43
-1162.45
-1955.56
1731.80
-201.72
1056.24
385.08
-1333.71
290.59
199.65
1569.81
1837.03
-1106.78
-819.78
-1136.08
-558.06
1029.51
1675.40
-606.64
1629.62
-321.48
476.02
-400.34
631.18
-524.49
-313.79
-858.60
-440.62
-1180.15
-1100.55
865.07
-1006.31
-1384.86
1476.54
-1528.30
481.39
268.62
-950.52
-496.41
76.96
1571.88
-1621.32
1276.83
-954.43
1089.93
-1316.01
-617.02
856.41
-315.86
1579.69
-1612.53
1588.36
1790.88
1734.97
347.60
-1123.38
1084.68
385.69
775.47
-1477.76
1148.53
1824.21
-327.82
-108.58
-222.96
-1011.81
1256.69
-772.30
-462.11
279.24
-1985.22
4.94
1215.06
-270.21
694.54
1442.73
-1239.47
-1351.05
1870.11
-1688.10
379.83
869.10
-1297.21
-846.27
-1627.55
1718.86
-1478.25
38.27
358.83
847.49
849.20
986.66
512.03
-973.23
-503.25
-1817.74
-576.37
1053.68
-1642.44
-903.16
-771.93
878.99
517.41
1654.53
-1392.19
-910.36
312.20
560.50
-1691.64
865.07
1955.19
1918.82
1785.27
536.82
-1640.00
1264.25
1608.02
874.11
1783.56
-1867.18
248.48
1221.04
-85.75
-1702.99
-123.72
-1389.87
1031.09
789.14
1786.49
-21.79
1857.29
839.68
-1913.93
1607.65
1734.85
1854.60
263.00
1920.40
743.98
-444.04
-738.24
-252.51
1393.16
-587.60
1694.57
200.99
-495.68
-1516.70
806.84
272.04
-81.24
802.08
-1171.36
280.58
-1352.51
1423.32
-667.92
1301.61
-907.43
259.71
-1778.19
-1307.35
-36.07
832.11
-15.68
-151.06
-1484.23
-940.64
-181.82
308.78
-1270.97
1211.64
-1725.94
-1663.93
63.78
153.14
1026.58
-1895.38
406.44
999.48
-1596.42
1608.99
838.83
1312.23
1299.53
-574.17
1850.70
960.05
95.27
453.68
-1376.44
-1233.13
-788.53
-1247.29
1010.46
-924.77
1919.67
1611.80
1833.97
1347.88
-1963.98
966.88
-868.12
-65.49
1123.50
296.09
-28.01
-873.62
-174.87
-883.75
-538.16
-1374.00
1958.00
-793.90
-1420.27
-1444.92
-13.61
-1319.07
-1549.54
-872.89
506.66
-1956.05
-1308.45
108.70
-1638.53
338.93
1454.81
-805.01
-1985.96
1529.89
787.92
-1575.79
-1195.65
1231.42
-1058.32
1756.95
-1286.72
1917.35
1247.90
942.47
1259.49
-1271.34
-808.92
801.59
154.36
9.70
1302.71
1047.33
-1660.63
695.51
1498.76
1769.28
32.04
675.00
488.96
1707.87
403.51
-1742.91
1880.24
442.33
-485.18
-1138.15
-1398.78
1617.78
1135.95
1064.54
-727.37
336.13
-928.06
115.05
-1854.12
-163.39
-376.65
-939.90
-1760.61
589.67
-1197.60
-408.76
-706.25
-1069.55
-1066.25
-1256.20
172.30
-1643.91
-737.63
-425.61
-667.07
-1387.92
1194.06
1937.86
-1005.70
1693.22
-1206.15
1491.80
622.76
-117.74
-831.87
-947.11
1364.11
954.31
-647.17
429.15
-953.58
-330.63
335.76
853.96
-622.27
-1321.39
836.75
-1853.26
964.07
-28.87
-530.35
725.30
-227.36
1982.42
-86.73
-1405.49
665.97
-505.44
-285.71
-563.31
1630.48
1448.71
1348.36
1928.34
-1674.06
-203.07
-1836.05
408.64
-1419.78
518.63
1834.10
1024.87
-1546.00
1925.90
-59.38
-521.80
1501.32
-617.87
-1683.21
497.75
849.81
1560.89
772.30
1164.52
1726.79
1367.90
825.76
-1786.98
55.48
-1347.14
-1929.07
1434.55
-1253.51
1834.71
1800.40
1305.27
1309.54
1565.90
-1489.12
968.59
410.22
-438.55
1919.18
691.97
998.62
1716.78
-1893.18
925.99
-369.45
-1361.55
427.32
90.27
-388.01
-1283.79
-1208.22
1210.66
-413.64
857.38
1965.45
-467.48
-806.11
9.94
1495.34
1236.91
-574.41
602.13
-103.21
1381.45
1296.97
-981.78
-278.14
-805.38
468.58
-1760.12
136.17
-1154.51
1435.16
-222.96
1628.52
1815.54
911.34
11.16
1477.88
-1004.11
36.92
79.04
603.47
638.26
-971.89
420.36
423.29
280.46
1898.67
1113.74
-1656.11
-1225.68
875.57
-872.89
509.84
540.48
137.15
-392.04
434.40
173.65
494.33
336.25
-1861.32
-474.19
643.51
-1532.70
424.39
1389.99
613.72
-1311.38
902.79
-89.29
-964.44
-84.29
407.42
1846.79
1853.99
-348.21
-1585.07
-1190.64
-1888.30
1136.93
98.20
602.86
429.39
-1589.46
1636.70
1791.37
1803.46
414.50
-1588.97
-382.39
-1648.18
1257.78
-1295.14
-602.25
1628.52
1772.94
-461.37
1517.56
-1866.45
1484.60
-738.24
-1843.98
-355.78
-1882.07
-471.02
1860.59
1990.60
1771.47
-718.46
-1903.31
-98.94
877.40
1364.48
-97.23
-454.78
-921.47
-1600.93
767.78
394.72
141.54
-1460.18
-136.53
30.33
36.56
1738.27
-248.72
1520.00
-696.00
-860.07
-1308.81
991.18
-1162.81
-1760.49
1678.33
-976.04
202.21
-1581.89
328.92
1489.60
1623.76
-511.30
1745.23
1458.72
-1241.92
-125.67
479.93
-193.91
1381.81
-955.53
1728.62
134.34
-881.55
833.33
1873.16
-355.90
-670.12
266.91
-1498.51
-426.95
-1703.84
-1477.64
29.48
832.23
810.14
645.46
-951.38
460.89
1310.28
650.22
-473.46
-1472.27
1678.70
627.27
1982.29
-898.03
-1173.19
484.20
764.85
-1080.17
1196.50
944.66
1557.60
-628.74
-700.76
429.15
1233.49
-567.70
1420.14
444.28
-1811.51
1167.45
-390.33
105.04
-724.81
1427.10
1091.89
-1585.80
-536.57
1366.19
-1791.37
925.50
352.61
-592.97
30.82
1413.06
-339.54
-726.52
-1243.62
-824.54
1813.47
-1280.37
-1976.56
-1403.18
1763.42
-1421.12
263.13
-409.98
156.43
1759.39
214.30
1548.69
1977.29
1807.97
1729.85
1431.62
796.71
-1328.83
995.81
605.42
743.85
1275.85
1288.91
1068.94
-1668.44
-1445.90
-1599.96
1686.88
257.27
-1459.45
1844.72
-945.40
-693.92
1163.42
-1011.07
-376.90
480.05
355.90
-785.97
-296.33
-521.19
1114.35
1244.72
-16.66
1657.94
-875.45
767.05
-828.82
-412.91
585.28
1460.43
1403.54
1336.28
1851.19
-1432.35
-1969.11
-387.15
-1479.35
-1869.01
-1585.55
1875.48
-404.49
1014.61
-1646.96
-451.24
334.17
-1156.34
770.34
466.13
1426.12
-1018.89
1282.81
-1337.38
111.63
1668.56
1276.71
1645.37
872.15
-1543.44
1117.77
1264.50
-685.26
-950.89
117.98
311.96
-1121.92
-313.30
-113.46
971.03
1983.64
193.42
1686.88
-757.77
-744.22
-1186.13
-1572.74
-528.15
-1560.16
-36.31
-89.17
1105.56
637.77
18.49
-34.97
-205.14
1490.58
-1731.92
81.97
-1020.35
930.63
-1841.18
-1810.05
-1927.85
-869.96
1950.68
1183.69
1367.29
-1732.04
-87.71
1836.17
1805.29
-255.56
1181.98
-1280.37
-289.62
463.69
-584.42
-241.15
-1368.99
1813.71
350.04
41.56
-1593.00
-1035.12
405.34
-1486.92
-412.67
115.17
-549.39
177.55
-674.03
-695.15
859.34
432.20
878.26
426.83
1978.27
-1840.08
823.45
56.94
136.29
-1795.28
140.20
-1269.87
1316.50
1853.87
-742.63
286.69
617.26
1953.97
-792.80
913.54
1628.65
1284.64
1004.36
-494.21
-154.36
-1185.15
1377.05
-1025.11
1248.26
-1533.31
974.33
-1875.36
1168.18
1013.15
-824.18
-274.60
-1429.54
1731.55
-373.36
-1594.10
-1124.85
-1557.35
625.08
1992.55
441.60
555.13
-1514.26
1917.23
1842.03
-255.92
-1994.14
-1677.72
1050.38
887.05
-1843.74
-515.57
-331.49
1882.80
-874.35
1183.93
-681.72
977.99
-1160.37
1645.13
-679.28
226.75
1083.22
1671.49
-1209.20
-292.18
-651.57
1601.30
270.69
-874.96
-1465.80
708.09
-1973.02
1414.53
-1377.05
-1327.61
137.63
-1014.13
-1542.34
748.25
-508.74
1220.92
-253.12
-1750.84
-1171.84
-145.45
1420.39
1981.56
942.96
-1135.71
461.98
245.79
1177.46
1492.04
1343.48
-964.56
1327.73
1023.52
-1815.17
53.89
-1910.76
-47.91
-232.61
-1821.40
1167.69
147.52
1521.83
1994.99
-1823.23
660.60
-1381.69
-975.92
1452.49
1783.44
284.61
1273.78
1903.68
-6.89
-527.05
731.89
1029.51
404.37
-1993.65
-1568.22
-1776.36
-647.17
1324.68
712.85
494.58
-261.78
-1042.69
-1699.94
-277.41
-251.04
848.84
1831.17
583.08
1595.32
1659.53
1452.00
257.63
874.84
-831.50
108.09
-940.27
-803.67
-1096.77
156.80
-901.08
685.99
-879.60
924.40
-1890.13
-998.87
263.00
-1166.96
-430.24
-521.80
1020.11
-275.94
-1770.01
-963.71
1112.03
-999.11
-1812.86
465.89
927.82
-782.79
-1382.06
-276.68
-1861.32
735.92
302.92
-1140.23
-586.13
-916.95
64.14
-793.05
-638.14
622.02
-1756.70
-554.27
824.67
-1826.77
-1658.31
1183.32
646.80
-1795.77
-48.89
-1337.99
-952.11
1214.81
97.47
-772.54
720.41
-1057.46
124.82
-821.98
1778.92
-1986.44
1242.28
1622.79
-1313.08
1664.41
1860.34
972.25
1285.01
-842.86
-158.26
687.33
-1955.93
-1482.16
790.85
910.36
-327.58
217.71
-492.87
-1396.22
1197.85
-574.66
-272.04
823.32
651.32
-1544.54
-714.68
1746.45
-1521.46
1036.10
1801.99
85.63
-198.55
-1977.90
-1949.58
-490.92
-343.08
179.50
-1897.21
693.44
1337.62
-336.74
1393.41
-365.42
-41.32
-181.82
1820.55
842.37
1375.95
-1078.09
-986.90
41.32
581.01
-498.61
885.70
1005.95
1698.47
841.63
607.25
1152.43
-292.06
-1682.36
1110.32
-1486.19
-1980.22
-830.40
-1737.66
-1276.58
-1974.12
-1651.35
-171.69
-1370.34
-1247.53
59.51
-654.98
1170.62
-1260.59
621.41
-1963.49
-1870.72
-1728.26
-1724.72
1892.20
-601.03
-1913.44
1561.99
-965.42
1379.00
682.45
1893.79
501.54
1130.34
-1645.25
1948.60
1566.27
913.05
-1916.37
1507.67
-1277.19
1731.55
-603.35
364.45
-540.36
-1487.28
-664.87
-71.10
-52.18
-457.35
645.22
-848.71
-232.00
-1215.79
1322.12
-1607.89
801.35
-294.99
1629.50
-1137.91
-589.80
-763.87
-1278.66
-742.63
-968.35
-1510.60
990.44
1214.69
311.71
858.11
267.15
1212.98
-98.57
124.08
1996.70
544.14
-955.41
-801.11
-483.84
-1020.72
1077.60
-1877.43
559.64
-243.59
-1031.09
-55.36
113.58
-488.35
23.01
1113.01
-250.31
-1218.23
872.76
-1003.50
-441.48
-1297.09
-113.71
-835.41
-1188.94
-472.73
112.97
-950.65
-530.22
-1412.57
1892.94
-1383.03
678.42
-670.00
-1744.01
-1330.42
-1648.54
1043.91
235.29
1407.81
1991.82
910.48
1218.48
1873.28
-1141.57
1997.92
-535.72
901.08
1612.29
-1174.16
-92.47
204.16
1562.12
-1874.14
-1621.32
-1784.90
-362.01
-1577.62
1361.91
-687.82
1216.04
-1942.13
416.94
-949.06
-1080.53
-710.53
-1608.26
-1968.74
1521.59
-1919.55
-1452.98
-979.94
1075.16
-787.92
1720.81
-42.29
393.38
-1659.65
-1342.63
1472.64
1007.41
-1375.95
-1374.98
1527.81
1725.21
-453.07
1447.49
-174.13
-82.46
1561.38
-1925.16
596.63
1655.26
175.96
-1181.61
392.16
822.35
1115.20
-1625.23
1515.48
1332.25
-1827.75
763.75
1706.65
-1431.37
1384.86
1304.91
710.77
-1819.69
1153.29
759.60
-1644.15
349.92
-68.66
760.58
761.55
-334.05
1111.54
-343.94
1306.25
721.03
-1269.99
1893.67
977.75
-438.18
1618.51
66.95
-1269.02
-885.46
-375.92
-1247.16
478.59
713.95
1527.32
-738.73
1339.45
-143.86
277.41
-1575.06
1770.13
306.34
-824.30
553.17
204.29
-1320.04
-1372.41
-325.63
-1175.75
1627.55
1090.06
-807.09
1090.79
-255.31
1839.83
-1915.40
1655.99
335.15
-812.95
-1242.65
-716.51
-851.28
-241.03
1698.96
1401.95
1222.38
478.34
-1959.22
-1084.56
-1053.68
-1136.69
1160.13
-101.50
1483.26
1272.31
445.26
796.22
-337.35
717.85
-1648.06
-240.18
478.10
1878.17
1871.57
-1260.96
-690.14
926.72
1539.78
-1043.67
-0.30
1808.70
1109.34
390.45
-1097.62
586.99
-989.34
1892.08
-961.63
-516.55
728.11
557.08
-1526.96
-1758.65
-785.72
-1016.57
-952.11
431.83
-1531.84
-965.30
-412.06
-1668.32
1403.66
-1262.67
-289.13
1996.21
1130.34
-1064.30
-1637.31
151.79
775.47
329.17
1204.93
-1465.07
967.49
1517.68
978.11
-699.54
111.02
-1319.68
967.49
-874.23
-1425.64
1511.21
1695.05
1635.12
-83.31
-1962.27
962.24
1769.03
279.00
-1051.72
-629.10
1724.35
-935.39
-1949.33
1444.07
89.78
-1967.16
-509.72
474.80
1801.38
1933.22
349.43
1225.19
-1457.38
-198.43
-743.98
603.22
-783.04
47.79
-376.53
440.50
113.34
-1544.66
-1850.09
496.04
-1606.92
221.50
-800.74
1813.22
-1477.40
-839.93
1690.42
551.46
-724.69
-804.65
-881.19
-1579.33
-1070.52
1267.67
-662.67
1842.15
-1713.73
779.74
717.61
-40.10
-866.54
-1293.55
-678.79
1630.60
1778.92
-506.05
-297.43
1512.92
-721.03
-1127.78
-29.72
-615.07
-10.80
-1292.33
-269.60
-1187.35
57.43
18.73
1539.04
1294.77
1489.85
-718.71
-1514.38
-1991.08
1410.74
-851.89
-1463.60
-713.95
143.00
-1293.43
-1741.32
-66.59
1734.36
-1598.25
554.15
537.43
-1446.63
747.27
1024.38
-1134.61
1580.91
1950.92
1594.34
-504.47
21.79
-420.60
19.10
-202.33
-137.63
-613.11
1897.70
390.82
997.52
-1567.36
-179.87
-1797.84
-1446.15
-387.40
-1727.77
-1747.18
32.41
-1269.50
923.06
-1704.82
-103.09
-767.78
-1079.31
-1573.59
-766.93
-269.47
820.03
1803.70
101.87
1442.24
-1230.93
-1413.43
-1785.51
665.85
-422.19
-769.98
-448.31
1422.10
-705.28
1254.73
553.54
1384.99
1916.25
-381.66
1504.74
-1775.13
854.21
814.05
740.80
1492.90
-214.17
-1180.15
-702.10
1167.69
-488.35
1025.23
-364.81
1991.82
-553.78
-1741.56
50.11
-1277.68
366.89
-958.22
416.33
1421.00
1044.52
-1803.46
864.83
1906.49
-616.53
-73.54
1037.44
-1501.81
-1307.10
1500.71
1533.67
-1826.89
1716.91
1665.63
-820.88
1260.47
1047.09
-93.56
1739.24
-197.33
542.68
-1313.94
1702.26
-1296.48
384.35
-1214.69
-1241.43
-1207.86
384.47
-129.94
-1399.63
-1076.14
-1818.35
409.49
1666.00
247.01
942.10
1071.01
1454.32
1758.29
-805.99
1717.39
-1963.98
-1728.99
1420.02
128.97
-1616.32
1924.92
-1968.01
-1420.39
1147.55
-1643.05
1354.83
-1613.26
1501.44
-1335.91
-1759.26
565.01
1685.29
-1722.40
1944.09
705.16
-1134.25
-121.28
-122.86
205.38
-55.72
-523.75
-125.91
1978.51
-1066.01
774.98
-411.45
761.43
-1467.39
956.99
1647.93
150.45
-484.32
1002.65
-809.04
-1511.21
-425.48
-324.65
-1586.29
-270.08
1225.31
295.96
-1253.15
-596.88
-1587.02
1429.91
1292.82
1805.90
1435.77
614.70
-1856.56
-1453.71
1814.20
-1748.64
1207.73
563.92
731.40
-1216.04
-829.55
1751.21
-1331.15
294.38
1210.42
-1698.72
1861.07
1635.36
99.18
1908.32
-803.06
-1772.45
1310.40
-1057.22
1191.25
-352.85
-1240.69
1730.46
-1349.83
124.69
-197.33
55.97
659.26
-914.27
118.35
-980.92
1514.75
-1145.60
-903.77
-632.64
226.38
645.58
358.83
-1570.17
-1784.90
1971.92
41.81
-222.11
-1169.04
589.55
-543.41
1737.54
-1683.33
108.46
760.33
878.01
-158.51
-1609.60
-1740.59
602.49
229.43
1863.15
-29.35
964.20
1009.73
-1128.87
64.63
-164.12
1410.38
-807.21
818.07
1553.94
923.79
845.05
697.34
-834.55
1066.98
-697.34
-798.05
-1598.74
1961.66
257.02
-911.34
1500.96
-639.48
-962.61
604.69
-986.78
1743.64
-176.21
353.70
-300.11
1109.10
1771.23
1419.04
-1335.55
1085.78
1174.90
-630.08
1833.36
-9.82
798.66
-1223.60
-1086.64
453.56
-507.15
855.18
-1048.92
-755.08
1225.68
875.33
617.99
914.15
654.25
-54.62
-652.05
880.09
359.44
1809.19
-549.15
1589.83
869.96
-726.52
1328.47
-628.25
-1400.25
894.74
-84.53
1611.31
826.01
-1452.98
473.46
-131.41
829.30
-1500.35
-138.85
-1429.42
-1675.77
626.17
-594.80
894.61
303.90
371.41
1499.25
-525.46
-577.22
-1897.94
52.91
1552.23
1044.16
-1535.38
918.66
197.57
76.72
375.43
-1581.28
1225.92
-1275.12
269.84
101.01
1434.55
-1721.42
1233.49
1843.25
-215.15
66.71
-1358.86
1436.99
1154.75
699.66
-1070.89
770.71
-1713.73
726.15
-1875.24
741.29
-445.87
-170.72
758.99
-984.58
178.53
1686.39
1786.85
-1231.17
509.23
1617.05
140.69
-1473.49
1004.24
147.64
-1458.60
-770.10
1529.52
-388.01
-1808.09
-1345.56
-1396.95
-1081.63
-1020.84
1306.00
210.88
-395.70
1808.34
1916.01
-184.27
-1694.32
-304.87
-1334.57
1189.06
-1234.59
-1758.90
-1740.34
-314.03
-1494.49
116.51
979.21
-407.78
-711.26
-1824.21
-167.54
1164.76
493.72
-168.40
1935.91
994.47
530.10
-689.77
-1755.85
-687.33
1416.60
417.06
1758.29
1868.89
1648.79
-1567.61
333.93
-1996.82
481.27
-233.10
217.96
-1459.82
-1252.17
-1.28
-1564.80
-873.74
-653.27
-1080.41
152.04
638.87
514.72
1212.37
-857.99
290.71
1014.49
1387.43
1477.88
1053.43
-1637.92
1601.18
-1425.88
1027.80
-781.70
983.24
1708.73
-1616.44
-931.73
1095.55
142.88
1494.49
-1683.95
-1850.33
-1029.75
-106.02
-82.09
-1392.92
-1183.56
1676.13
-320.38
786.95
1515.24
966.64
-1657.33
-893.27
-113.83
1089.81
-1414.53
1580.91
-260.56
1054.78
61.95
1202.12
231.39
-1012.29
-394.11
-169.25
697.59
134.95
1723.13
1216.52
85.87
-940.27
-1501.32
-221.86
1118.50
-338.69
42.42
1766.47
1302.71
-1362.89
-1401.34
1434.43
-1079.07
17.88
-554.27
840.29
120.30
-1604.72
1708.12
-90.88
-770.47
-1527.93
-1791.13
1376.07
-1572.25
556.71
1486.55
1238.13
-1110.32
-372.14
1098.72
1339.33
1531.35
-405.22
-657.42
-1288.30
1483.99
-1621.57
-1487.16
301.82
-1581.53
1436.50
-1176.12
1702.62
-1153.05
-640.09
121.52
-1480.45
525.22
-835.04
-1492.04
994.23
-918.05
904.26
-992.88
510.45
-999.72
1224.09
-607.50
-1391.33
1075.28
-507.88
-1694.69
-867.15
472.12
120.05
-1213.72
-1864.98
-487.13
-1293.55
346.01
163.51
1313.21
1625.47
-1300.02
-442.45
395.82
-1314.79
-1707.14
-624.10
406.44
-1517.92
736.28
-1416.85
-944.66
-1925.29
-1714.59
118.22
-1589.22
604.08
-518.99
-1529.40
669.27
482.74
78.55
-608.84
-473.46
1780.99
-1606.79
-1642.20
-723.22
1431.62
183.17
-1573.35
-238.83
-1118.86
196.47
-1910.15
-705.03
-188.90
1507.91
1765.98
1694.93
-445.50
-231.02
-451.73
-466.26
1832.27
1498.27
836.87
-253.85
-1564.19
-465.77
477.49
-288.39
1479.59
-1221.65
-1966.91
-62.19
1848.13
-648.15
814.41
1471.78
1464.82
-1708.85
-708.33
-1838.12
1005.09
908.29
1515.73
-103.09
-1320.04
-1060.88
-829.06
946.01
1715.20
-1393.04
-113.71
1525.74
-1849.72
-275.58
-1570.78
718.46
-1416.36
959.56
1407.45
867.64
-512.64
390.45
-1897.33
1574.08
1716.91
-1524.27
64.39
-580.88
-157.65
561.72
-1916.62
-460.15
-75.74
-1944.94
-824.42
-820.64
1359.23
1384.62
197.45
1340.55
422.19
-123.72
719.56
-1334.94
-872.40
1668.32
-216.98
1664.41
1037.07
788.90
-836.39
-572.95
1636.21
525.10
1769.03
-1071.74
-1092.13
203.31
-207.46
-934.78
-274.60
-1488.87
1252.29
1544.29
-309.76
481.52
1535.50
-1255.34
41.19
1267.18
576.73
684.16
-741.41
1827.99
294.86
1210.79
-1012.17
1658.80
-1089.20
1546.00
1909.90
-320.13
774.74
-694.90
1180.76
417.55
-1674.42
1118.99
-933.43
597.97
808.19
-1018.64
-1600.08
1281.22
-1626.57
449.78
479.81
657.42
185.97
820.52
1043.42
634.47
-834.55
-592.48
1932.37
-1662.22
1984.61
46.32
-1920.52
-350.04
950.40
1950.19
1441.75
1914.42
-1606.18
1041.84
1501.08
-1071.87
191.71
-111.02
-36.43
-651.69
1046.11
-1636.21
-722.73
-361.64
-1853.02
-844.44
-1405.25
-1322.61
-156.80
259.34
808.06
-840.29
1945.06
566.36
276.43
-1093.11
-1714.59
-1319.19
-1123.63
1221.16
-1835.68
-911.34
-3.35
-600.17
1299.41
1802.24
101.87
542.31
-1088.71
1606.67
-505.69
-232.24
-434.27
1033.78
-106.63
1974.48
398.38
-813.80
-1538.07
-1738.63
-1652.21
538.65
1902.70
-1859.61
-1978.27
1841.18
-1751.21
661.33
-1180.15
1247.90
1977.17
1576.15
1940.54
-201.36
-1936.15
-331.61
-105.41
-623.85
]]></test_input>
<test_output><![CDATA[-98945.87]]></test_output>
<test_input><![CDATA[1138
824.54
450.75
-57.31
1283.05
-969.45
-1168.55
-750.69
-319.16
-108.46
1061.49
-809.28
751.18
-370.18
100.65
-1993.40
417.31
547.56
825.76
-283.02
668.41
530.96
17.51
661.45
-1559.55
906.46
-707.60
1202.85
-993.98
772.91
-1394.39
-279.61
-1504.62
-64.02
-51.57
15.80
-1822.74
-1431.13
866.17
1259.49
-879.36
-276.07
-578.20
1600.08
-134.46
-1177.83
-1770.37
563.67
1726.31
-1756.95
1184.66
-633.25
352.36
-858.48
-1489.24
268.25
172.18
616.90
1756.70
85.39
-1654.89
-1643.05
360.05
-1000.70
-1154.14
885.70
1408.06
-226.26
-693.68
-464.67
217.71
-1485.94
-758.87
-1728.26
-637.77
-1911.25
280.46
-504.22
-233.22
1341.89
-964.44
-54.75
1499.98
-782.55
-777.30
825.52
1885.98
-1075.28
-330.88
-1710.56
561.47
-733.35
827.23
-1604.48
-897.06
-1742.42
-1578.11
-1333.23
849.94
154.97
-1145.11
376.29
-1452.62
-970.30
992.76
1684.56
-565.26
-1998.16
-1038.30
-247.01
-595.78
1264.25
-1423.32
-40.22
-145.20
-1980.10
-1973.26
341.38
-1133.27
-540.11
1444.07
1385.96
-1679.06
-96.01
-19.47
1303.44
-1410.74
-769.12
1017.42
-1102.51
-1580.43
1722.76
132.51
163.02
-358.71
447.95
450.51
-1263.52
-1683.95
-1691.15
-1999.87
-1678.57
1959.59
-1121.55
1706.28
-782.67
-1542.83
-1849.84
-1363.50
1073.09
301.58
-1672.10
1134.61
-6.77
1774.52
-1220.55
-1541.85
120.67
699.05
1279.51
1551.13
1820.91
-1612.17
665.73
-426.34
-1408.18
1410.62
-1964.59
814.53
827.11
-1191.99
-395.33
611.77
-1446.27
-1625.11
-1642.44
905.36
1273.65
-359.93
1609.24
49.01
-970.67
-835.77
1607.77
1503.64
-1176.85
1786.37
300.36
38.63
512.40
1437.11
1388.53
-1932.85
-1694.93
1149.87
797.32
-1262.06
-15.93
-108.58
683.79
410.22
1980.83
-162.78
-1891.23
-863.00
427.44
1718.00
1499.37
-219.42
309.27
1861.44
-1977.05
-1613.75
-1156.10
-1446.63
1003.63
438.55
1212.98
1345.80
498.85
1625.23
768.63
-1066.86
-1831.53
-265.44
1843.62
-773.64
1556.13
310.00
1285.86
1244.85
-1090.54
687.70
-1153.05
455.39
1666.12
-958.09
544.99
-819.05
-273.50
1063.44
1129.85
-295.72
642.53
-1104.58
1775.87
-307.32
1844.72
-1047.82
1124.24
-433.05
-967.74
1246.19
-195.62
1442.36
-145.20
-1152.92
554.03
1262.79
-1994.62
99.30
68.66
1757.07
854.21
-1777.94
-1299.90
-160.58
1746.20
-1082.73
133.85
81.24
-1913.08
-1389.62
-833.94
-123.23
-1656.23
-51.45
1708.60
1930.66
-915.25
1182.47
-855.92
-310.73
-817.22
-1945.06
1159.64
-655.72
307.80
-1176.24
1180.02
29.48
833.82
-959.56
-1471.41
-160.95
284.61
713.70
-560.38
1291.11
1443.95
-1520.98
1046.84
-138.85
-746.29
1402.81
473.70
1211.76
-372.26
1042.69
1151.09
-1259.25
1303.32
-1608.38
-1515.73
1076.99
-142.39
329.78
999.48
1144.13
-987.27
-1791.49
1089.57
422.19
354.68
-806.97
-512.89
27.16
592.24
-1012.42
1589.83
237.00
-521.07
-1432.23
1761.22
88.32
-475.53
1547.22
1733.39
-1332.74
620.31
-1200.17
-762.90
1722.03
-1295.75
967.86
981.90
-780.96
-410.96
1474.10
113.95
1471.66
1080.05
-1329.69
275.70
-538.65
-1493.39
-258.24
-1609.72
982.39
-1206.27
-1005.95
300.11
229.07
-1804.07
1149.63
1379.61
454.78
822.10
-1725.21
-1749.38
-673.66
1072.48
-1032.68
-274.60
597.85
-883.38
-1576.64
-901.45
1730.21
534.25
15.93
-81.85
1081.63
1244.97
1003.14
1356.79
-1707.63
853.11
995.94
-690.26
-509.10
1530.74
1808.34
1345.07
943.93
-435.13
1315.04
-370.55
-1221.77
-1305.52
1942.50
-43.64
-1603.01
360.30
416.94
-1000.09
-783.16
-5.31
-603.71
-78.43
349.31
475.41
-391.06
-1547.95
-1146.09
-132.02
1125.82
1575.91
-1814.08
582.47
390.20
-1058.56
-1536.24
1069.67
-369.57
1123.99
-1816.64
1180.27
-719.93
863.61
-999.11
-1685.65
-1968.74
-594.07
-787.68
1484.72
-854.09
-1930.78
-447.21
417.55
-350.90
1162.57
-1059.17
819.91
1031.34
-1619.37
-206.36
-1065.64
-1917.72
801.23
537.43
-1491.68
484.32
-1393.16
-1062.71
-697.83
-214.30
-1338.72
-125.79
261.78
385.57
-1940.79
-809.90
-1520.12
-852.13
-219.79
1230.20
-928.43
276.19
-1432.72
1704.21
1089.08
-1930.53
-841.51
1494.00
-1400.25
-1813.83
-1005.82
-969.45
-1945.55
-1958.25
1525.86
-1132.66
-930.87
962.61
252.26
72.57
-254.95
724.44
-393.62
-1931.88
1654.40
-902.92
819.17
-461.62
-386.42
1023.52
-1115.20
33.50
-627.88
-1945.06
-1247.16
-105.28
338.57
670.12
871.42
122.98
-1527.69
-1897.82
207.46
1819.57
-1536.24
-1702.13
868.12
-1178.80
-1671.74
-1365.21
-1551.13
-844.44
-460.28
21.54
233.83
942.10
1827.50
-994.23
-629.23
-1637.07
-236.51
-1485.21
1150.48
-669.39
262.15
-145.81
1509.62
-1527.08
-1880.00
588.82
-111.88
-932.95
719.93
932.58
-1439.43
-459.54
-977.50
-730.18
-1429.05
-1830.43
-25.57
-564.65
393.13
-402.41
1452.86
-1622.54
-557.20
797.57
876.18
827.35
566.72
106.50
-1397.68
1603.25
1632.67
-1045.86
-757.40
-1828.97
-1653.55
-87.34
12.75
-1911.86
420.48
-1309.42
1249.61
-44.49
-781.45
1698.35
216.01
501.29
1002.77
-1191.99
-679.15
-1576.03
1906.12
-1065.40
1876.09
-382.76
-1242.16
-1938.71
-1480.20
-1597.52
-115.54
-664.02
1428.20
-604.93
-1987.79
-1137.54
1439.68
-1372.41
1397.19
812.46
1220.67
555.98
1305.64
-517.28
-406.44
1574.44
-28.38
-77.21
154.72
661.45
1156.59
-1243.14
-693.92
-214.78
-565.87
827.96
-1174.16
-1308.81
-1671.62
1285.50
-1896.60
-1302.83
1426.49
744.10
-836.39
122.01
-1405.25
-861.65
-395.94
-29.23
-579.54
-104.19
-1427.22
-1495.22
5.18
-1942.25
-1090.91
1317.60
-765.46
-31.18
-1426.12
1544.05
-1349.58
161.68
-1506.33
828.57
-1951.41
-936.49
-56.09
1674.42
928.80
-853.72
-1403.42
1802.24
1920.40
-851.89
356.63
-859.82
-1689.07
-10.19
-1888.18
-1927.24
1800.28
-1988.52
-1476.66
1572.61
606.28
-844.93
1978.63
-161.68
47.54
1716.42
833.94
68.17
-272.16
1293.19
-928.06
-11.41
-554.15
1552.72
-1503.15
1767.20
-41.44
445.99
-1405.86
933.31
-1281.35
-509.47
-820.03
-1068.81
-1283.54
1749.99
964.07
1930.78
-1454.81
-1866.93
1151.58
-1478.37
1820.79
-361.27
-790.97
-1085.05
-1924.43
-829.67
1920.28
277.77
1256.69
546.46
-1145.35
824.91
1947.14
-1668.56
1376.32
-705.40
-558.06
-1889.03
315.62
-1568.59
1799.06
838.58
-568.31
1101.53
-7.99
876.79
-213.32
1666.61
289.25
1359.35
161.32
1239.96
985.44
498.12
632.77
1451.03
1608.87
460.52
-1556.99
1341.65
-1269.87
442.45
-720.05
22.03
498.48
1561.02
1098.72
1707.02
-1971.55
1193.21
1605.94
1762.32
1763.90
384.59
-1465.55
-1617.41
943.08
1953.24
1830.68
527.42
-1709.09
-1086.39
-1118.25
740.19
-1937.62
-1152.68
-92.95
-525.58
-437.81
-158.14
637.77
1553.94
-1733.51
-373.60
1411.60
-610.43
-1328.47
1527.45
-194.28
-420.60
992.64
-1130.71
-65.24
-483.35
1840.81
1446.15
-463.82
-1369.24
-999.60
1687.24
1972.04
-1114.71
434.27
144.84
-1732.90
-840.17
-361.52
-74.15
-1686.02
-1861.32
1475.69
1694.20
364.81
-1666.61
608.84
868.86
1937.86
1862.17
662.43
-1358.25
1264.13
-1387.92
233.58
441.23
396.80
1410.62
1882.19
1465.55
-890.22
827.60
-1780.26
912.07
-1288.43
-1762.68
-772.05
526.56
896.45
1761.83
-1074.43
1097.75
761.07
-277.65
1514.38
522.41
-890.71
224.18
1125.46
-934.65
1172.33
-500.80
-707.60
-559.64
-1134.73
-369.70
-1723.99
-664.51
-288.27
-1715.44
-1634.38
10.07
-446.97
-920.49
1281.83
585.40
-1824.57
1205.78
-194.15
1657.33
-1026.33
933.80
-239.32
-147.64
-219.91
-371.65
-1531.72
956.38
-18.00
-1104.95
1809.32
1236.54
-946.74
1485.45
7.75
584.18
-373.97
-1415.87
269.23
1104.09
-1775.74
-1895.26
393.87
-1227.75
788.78
-1382.06
1492.17
1790.64
-1885.49
-462.72
-73.30
-739.34
-1671.86
188.42
605.54
1804.07
-471.38
-1614.73
-247.38
1751.09
-282.17
1140.11
-721.39
-1472.39
-855.55
-1869.62
879.97
859.46
187.81
-1451.15
1987.67
-576.49
-95.76
1961.79
1694.32
1569.44
364.94
-200.75
-1218.72
1735.46
-95.03
-1895.87
1974.24
-814.53
-1586.16
-1836.78
-1452.74
691.85
-211.12
1646.35
1407.33
-213.69
677.44
878.26
776.69
-1790.76
634.35
868.61
605.05
1177.22
-1182.83
1724.72
1830.68
95.76
346.38
71.47
619.34
-1656.11
1454.32
-1895.01
-294.74
1752.92
547.56
-1096.40
957.24
1405.37
309.88
621.29
1297.70
-1619.98
-32.16
189.88
97.23
-1933.10
-1154.02
-846.76
171.57
-322.82
-1663.93
-1740.47
-1495.59
573.68
-594.19
1436.75
822.71
1047.45
-1229.59
-225.28
146.67
1163.18
854.70
141.66
1444.44
-698.93
668.29
1057.46
509.59
18.73
-1279.64
450.02
-806.36
858.11
-902.06
1919.30
1112.64
1723.01
-166.08
134.22
1956.54
-1548.44
-1311.50
-11.90
-1475.56
210.02
-529.61
-1864.74
-1386.94
330.39
-1979.12
1537.21
-121.03
219.55
989.10
-359.44
-195.50
-36.92
518.26
812.95
890.10
-750.57
1974.48
1662.22
1197.24
-1759.88
-163.64
-137.27
-1631.58
-1990.96
-1123.38
-884.85
1249.48
-1822.01
-244.94
863.49
1236.42
-627.76
-1847.65
-604.57
1476.42
121.40
567.82
-1050.14
43.51
-169.49
1905.14
1458.11
1216.28
1446.76
-26.67
-458.08
-1017.54
1446.15
26.06
-604.57
-1104.83
765.58
465.40
173.52
-1595.20
305.36
834.43
-1485.21
-206.24
-1372.90
-776.08
820.52
-163.51
-528.39
218.45
-82.58
-1687.97
-1277.93
505.69
-1271.46
1492.90
-1561.75
1275.97
1575.91
-1264.87
1585.19
-1465.55
-258.24
295.48
-917.81
454.42
-87.46
-1500.59
-1201.75
-1107.88
-1869.86
386.79
116.51
192.57
-122.62
1957.64
-305.73
-1591.17
918.66
145.93
44.12
60.24
1526.59
644.36
-1440.77
-445.63
714.07
1704.82
610.30
-1600.93
-899.74
42.17
-1663.80
-672.20
1034.39
-1036.95
-1243.62
463.69
601.15
847.13
-1172.09
648.88
-1864.13
104.31
-927.45
1061.61
-128.48
-1265.96
1400.25
-1751.82
-657.55
611.16
-1249.00
1694.32
1172.94
-1377.42
-1815.17
-941.49
1872.18
-1218.48
1039.15
-1802.36
262.88
-557.32
1783.19
1104.22
166.69
]]></test_input>
<test_output><![CDATA[121602.40]]></test_output>
<test_input><![CDATA[143
1189.67
1118.25
-875.57
767.41
-257.63
440.26
-524.24
-1012.42
579.66
-526.44
1623.15
-844.93
-806.72
1447.98
761.92
-970.18
-1733.63
425.61
-1628.52
1175.14
-896.57
-489.70
-1912.47
1842.64
1474.71
-184.88
1299.66
677.81
999.60
812.34
601.03
871.91
-806.36
-1309.06
-784.99
-618.73
-694.54
-651.93
-1477.03
845.91
-933.07
637.16
1818.35
-1175.51
1482.89
498.97
412.79
1977.78
-1216.04
1601.67
-1781.36
820.15
-1328.95
1111.66
933.56
668.29
-29.96
224.18
1949.82
408.15
-1171.23
-1924.06
-881.92
-1290.50
576.86
664.87
-1514.99
-691.36
-1625.96
1403.91
-865.44
987.88
1773.79
-68.42
-746.29
-125.18
324.77
-193.42
1552.11
1687.00
1337.74
-291.45
-1844.11
-453.44
-1060.15
-1226.78
1105.92
-1009.12
1544.66
-1315.53
-1421.12
1803.21
-1140.47
-850.67
-1036.22
-1712.39
-440.87
1380.71
-1087.98
-383.37
745.81
213.81
1491.07
-128.48
325.87
-521.07
563.18
-595.29
1423.44
-741.78
1516.58
-853.11
-40.22
1649.76
-1526.71
1484.23
520.34
-335.64
-1902.09
-668.78
-362.98
-119.32
-1866.81
1023.89
1608.38
-517.53
-1212.37
657.91
1985.22
304.39
-901.45
1497.66
-156.31
509.47
398.26
-1920.28
1974.36
-1473.73
1005.34
637.77
107.85
1866.81
268.37
-528.27
307.32
]]></test_input>
<test_output><![CDATA[1600.60]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院
]]></source>
</item>
<item>
<title><![CDATA[【绝对值排序】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行</font></p>]]></output>
<sample_input><![CDATA[3 3 -4 2
4 0 1 2 -3
0]]></sample_input>
<sample_output><![CDATA[-4 3 2
-3 2 1 0]]></sample_output>
<test_input><![CDATA[3 3 -4 2]]></test_input>
<test_output><![CDATA[-4 3 2 ]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【能量项链】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 <br />
需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 <br />
例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为： <br />
(4◎1)=10*2*3=60。 <br />
这一串项链可以得到最优值的一个聚合顺序所释放的总能量为 <br />
((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。 <br />
至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量。</font></p>]]></output>
<sample_input><![CDATA[4
2  3  5  10

]]></sample_input>
<sample_output><![CDATA[710
]]></sample_output>
<test_input><![CDATA[80
2 3 5 192 3 5 992 493 95 102 3 5 102 83 455 102 33 45 102 23 45 302 3 15 102 113 115 102 3 35 102 3 45 102 3 55 112 3 5 102 3 785 202 93 5 102 3 85 102 3 5 102 3 5 102 3 5 102 3 5 102 3 85 102 3 5 102 3 5 102 3 5 102 3 17 112 13 5 102 23 35 
]]></test_input>
<test_output><![CDATA[1940277798
]]></test_output>
<test_input><![CDATA[40
205 204 202 93 5 102 43 85 102 73 85 102 83 15 102 13 45 102 23 5 102 3 85 102 3 5 102 3 5 102 3 5 102 3 17 112 13 5 102 23 
]]></test_input>
<test_output><![CDATA[56015150
]]></test_output>
<test_input><![CDATA[50
202 23 45 102 43 55 112 63 65 102 3 385 202 93 5 102 3 85 102 73 85 102 83 15 102 13 45 102 23 5 102 3 85 102 3 5 102 3 5 102 3 5 102 3 17 112 13 5 102 23 
]]></test_input>
<test_output><![CDATA[129341576
]]></test_output>
<test_input><![CDATA[7
23 17 212 113 71 301 33 ]]></test_input>
<test_output><![CDATA[31182687]]></test_output>
<test_input><![CDATA[4
2 4 5 10
]]></test_input>
<test_output><![CDATA[780
]]></test_output>
<test_input><![CDATA[20
402 33 85 102 63 5 102 3 75 102 3 5 102 3 17 112 113 65 102 23 
]]></test_input>
<test_output><![CDATA[54922956
]]></test_output>
<test_input><![CDATA[70
23 35 102 83 455 102 33 145 102 23 45 302 3 15 102 113 115 102 3 35 102 3 45 102 3 55 112 3 5 102 3 385 202 93 5 102 3 85 102 3 5 102 3 15 102 13 5 102 3 5 102 3 85 102 3 5 102 3 5 102 3 5 102 3 17 112 13 5 102 23 
]]></test_input>
<test_output><![CDATA[328479464
]]></test_output>
<test_input><![CDATA[15
55 102 3 75 102 13 5 102 23 17 112 113 65 102 23 
]]></test_input>
<test_output><![CDATA[8950112
]]></test_output>
<test_input><![CDATA[30
185 102 83 15 102 13 45 102 23 5 102 3 85 102 63 5 102 3 5 102 3 5 102 3 17 112 13 65 102 23 
]]></test_input>
<test_output><![CDATA[27221274
]]></test_output>
<test_input><![CDATA[10
113 45 102 23 17 112 113 75 101 23 
]]></test_input>
<test_output><![CDATA[7397294
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【蟠桃记】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，你们一定都觉得这猴子太闹腾了，其实你们是有所不知：悟空是在研究一个数学问题！  <br />
什么问题？他研究的问题是蟠桃一共有多少个！  <br />
不过，到最后，他还是没能解决这个难题，呵呵^-^  <br />
当时的情况是这样的：  <br />
第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第n天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，包含一个正整数n（1＜n＜30），表示只剩下一个桃子的时候是在第n天发生的</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman"> 对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。</font></p>
<p align="left"><b><font size="5" color="#333399"><br />
</font> </b></p>]]></output>
<sample_input><![CDATA[2
4]]></sample_input>
<sample_output><![CDATA[4
22]]></sample_output>
<test_input><![CDATA[6]]></test_input>
<test_output><![CDATA[94]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【计算两点间的距离】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，由4个实数组成，分别表示x1,y1,x2,y2,数据之间用空格隔开。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出一行，结果保留两位小数。</font></p>]]></output>
<sample_input><![CDATA[0 0 0 1
0 1 1 0]]></sample_input>
<sample_output><![CDATA[1.00
1.41]]></sample_output>
<test_input><![CDATA[1 2 3 4]]></test_input>
<test_output><![CDATA[2.83]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【计算球体积】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">根据输入的半径值，计算球的体积。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。 </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。</font></p>]]></output>
<sample_input><![CDATA[1
1.5]]></sample_input>
<sample_output><![CDATA[4.189
14.137]]></sample_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[4.189]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【计算直线的交点数】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。  <br />
比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包含多个测试实例,每个测试实例占一行,每行包含一个正整数n（n&lt;=20）,n表示直线的数量.</font></p>]]></input> 
<output><![CDATA[<p align="left"><b><font size="5" color="#333399">Output</font> </b></p>
<p><font size="3" face="Times New Roman"> 每个测试实例对应一行输出，从小到大列出所有相交方案，其中每个数为可能的交点数,每行的整数之间用一个空格隔开。 </font></p>]]></output>
<sample_input><![CDATA[2
3]]></sample_input>
<sample_output><![CDATA[0 1
0 2 3]]></sample_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[0 4 6 7 8 9 10]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[【金明的预算方案】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用 的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做预 算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />
<br />
主件 	附件  <br />
电脑 	打印机，扫描仪  <br />
书柜 	图书  <br />
书桌 	台灯，文具  <br />
工作椅 	无  <br />
<br />
如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />
设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />
v[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />
请你帮助金明设计一个满足要求的购物单。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行，为两个正整数，用一个空格隔开：  <br />
N m  <br />
（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />
从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />
v p q  <br />
（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>]]></output>
<sample_input><![CDATA[1000 5
800 2 0
400 5 1
300 5 1
400 3 0
500 2 0
]]></sample_input>
<sample_output><![CDATA[2200]]></sample_output>
<test_input><![CDATA[1500 7
500 1 0
400 4 0
300 5 1
400 5 1
200 5 0
500 4 0
400 4 0
2000 10
500 1 0
400 4 0
300 5 1
400 5 1
200 5 0
500 4 5
400 4 0
320 2 0
410 3 0
400 3 5
4500 12
100 3 0
400 5 0
300 5 0
1400 2 0
500 2 0
800 2 4
1400 5 4
300 5 0
1400 3 8
500 2 0
1800 4 0
440 5 10
]]></test_input>
<test_output><![CDATA[6200
7430
16700]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[【魔板】]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">在魔方风靡全球之后不久，Rubik先生发明了它的简化版――魔板。魔板 由8个同样大小的方块组成，每个方块颜色均不相同，可用数字1-8分别表示。任一时刻魔板的状态可用方块的颜色序列表示：从魔板的左上角开始，按顺时针方 向依次写下各方块的颜色代号，所得到的数字序列即可表示此时魔板的状态。例如，序列(1,2,3,4,5,6,7,8)表示魔板状态为：  <br />
1 2 3 4  <br />
8 7 6 5  <br />
对于魔板，可施加三种不同的操作，具体操作方法如下：  <br />
A: 上下两行互换,如上图可变换为状态87654321  <br />
B: 每行同时循环右移一格,如上图可变换为41236785  <br />
C: 中间4个方块顺时针旋转一格,如上图可变换为17245368  <br />
给你魔板的初始状态与目标状态，请给出由初态到目态变换数最少的变换步骤，若有多种变换方案则取字典序最小的那种。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">每组测试数据包括两行，分别代表魔板的初态与目态。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对每组测试数据输出满足题意的变换步骤。</font></p>]]></output>
<sample_input><![CDATA[12345678
17245368
12345678
82754631]]></sample_input>
<sample_output><![CDATA[C
AC]]></sample_output>
<test_input><![CDATA[81657234
71264853]]></test_input>
<test_output><![CDATA[BCBCBCBCBCABCBB]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[三角形]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">7<span class="Apple-converted-space">&nbsp;</span><br />
3 8<span class="Apple-converted-space">&nbsp;</span><br />
<br />
8 1 0<span class="Apple-converted-space">&nbsp;</span><br />
<br />
2 7 4 4<span class="Apple-converted-space">&nbsp;</span><br />
<br />
4 5 2 6 5<span class="Apple-converted-space">&nbsp;</span><br />
<br />
(图一)<span class="Apple-converted-space">&nbsp;</span><br />
<br />
图一表示一个5行的数字三角形。假设给定一个n行数字三角形,计算出从三角形顶至底的一条路径，使该路径经过的数字总和最大。<span class="Apple-converted-space">&nbsp;</span><br />
每一步只能由当前位置向左下或右下。<span class="Apple-converted-space"> </span><br />
</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">你的程序要能接受标准输入。第一行包含一个整数T，表示总的测试次数。<span class="Apple-converted-space">&nbsp;</span><br />
对于每一种情况：第一行包含一个整数N,其中1 &lt; N &lt; 100,表示三角形的行数。<span class="Apple-converted-space">&nbsp;</span><br />
接下来的N行输入表示三角形的每一行的元素Ai,j，其中0 &lt; Ai,j &lt; 100。</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输出每次测试的最大值并且占一行。</span></p>]]></output>
<sample_input><![CDATA[1 
5 
7 
3 8 
8 1 0  
2 7 4 4 
4 5 2 6 5]]></sample_input>
<sample_output><![CDATA[30]]></sample_output>
<test_input><![CDATA[10
2
41 
67 34 
7
10 
69 24 
78 58 62 
64 5 45 81 
27 61 91 95 42 
27 36 91 4 2 53 
92 82 21 16 18 95 47 
12
26 
71 38 
69 12 67 
99 35 94 3 
11 22 33 73 64 
41 11 53 68 47 44 
62 57 37 59 23 41 29 
78 16 35 90 42 88 6 40 
42 64 48 46 5 90 29 70 50 
6 1 93 48 29 23 84 54 56 40 
66 76 31 8 44 39 26 23 37 38 18 
82 29 41 33 15 39 58 4 30 77 6 73 
17
86 
21 45 
24 72 70 
29 77 73 97 
12 86 90 61 36 
55 67 55 74 31 52 
50 50 41 24 66 30 7 
91 7 37 57 87 53 83 45 
9 9 58 21 88 22 46 6 30 
13 68 10 91 62 55 10 59 24 37 
48 83 95 41 2 50 91 36 74 20 96 
21 48 99 68 84 81 34 53 99 18 38 10 
88 27 67 28 93 48 83 7 21 10 17 13 14 
9 16 35 51 10 49 19 56 98 3 24 8 44 9 
89 2 95 85 93 43 23 87 14 3 48 10 58 18 80 
96 98 81 89 98 9 57 72 22 38 92 38 79 90 57 58 
91 15 88 56 11 2 34 72 55 28 46 62 86 75 33 69 42 
22
44 
16 81 
98 22 51 
21 99 57 76 
92 89 75 12 10 
10 3 69 61 88 1 
89 55 23 2 85 82 85 
88 26 17 57 32 32 69 54 
21 89 76 29 68 92 25 55 34 
49 41 12 45 60 18 53 39 23 79 
96 87 29 49 37 66 49 93 95 97 16 
86 5 88 82 55 34 14 1 16 71 86 63 
13 55 85 53 12 8 32 45 13 56 21 58 46 
82 81 44 96 22 29 61 35 50 73 66 44 59 92 
39 53 24 54 10 45 49 86 13 74 22 68 18 87 5 
58 91 2 25 77 14 14 24 34 74 72 59 33 70 87 97 
18 77 73 70 63 68 92 85 2 80 13 27 2 99 27 25 43 
24 23 72 61 81 3 32 5 93 25 31 92 42 22 86 64 10 87 
60 13 74 70 70 35 33 11 60 96 67 85 50 40 94 95 24 19 25 
76 94 58 2 71 66 78 93 51 84 18 64 19 52 10 87 60 26 10 57 
70 15 76 27 43 58 64 9 82 86 65 87 77 74 25 27 29 28 23 20 2 
62 23 96 37 61 95 25 64 60 2 16 30 26 11 71 11 47 53 20 90 24 88 
27
63 
40 51 
62 29 10 
13 58 78 65 
7 77 10 58 39 
3 60 57 24 77 8 
13 87 1 50 60 28 93 
84 5 40 11 4 35 56 72 
50 23 85 56 16 26 57 26 57 
37 71 69 61 96 22 17 12 17 96 
85 41 23 29 29 65 59 32 96 55 53 
62 84 34 54 72 57 69 32 63 7 83 11 
35 67 48 75 38 23 42 54 11 41 75 59 25 
21 70 26 34 5 83 50 98 79 1 93 34 37 34 
56 93 76 5 62 48 81 10 13 41 55 55 42 62 11 
77 24 78 52 43 96 73 40 13 75 72 18 10 17 32 12 
95 69 31 40 88 85 90 97 89 90 45 53 14 51 40 44 58 
35 59 92 5 64 81 3 29 75 8 92 97 49 56 61 27 67 41 
29 40 13 74 1 77 15 83 13 92 24 1 92 59 70 28 27 84 75 
86 98 70 87 47 4 3 21 63 6 63 10 71 89 40 64 42 19 13 91 
4 18 32 50 5 75 39 3 22 98 47 84 48 71 64 13 75 45 12 46 78 
69 62 19 85 89 44 65 40 45 8 18 70 1 23 32 72 52 87 70 63 1 3 
23 27 10 69 15 65 28 43 47 88 43 37 9 63 49 81 88 42 8 60 21 58 54 
88 46 90 49 43 30 20 48 67 36 83 35 26 85 38 53 29 24 48 23 59 57 66 44 
55 18 26 11 25 55 1 49 96 84 15 64 42 75 13 42 96 48 72 26 6 73 29 4 5 
26 12 75 93 65 36 36 41 14 94 56 52 36 38 82 55 15 31 30 41 25 11 37 86 90 50 
62 34 93 53 16 52 8 62 33 54 3 34 3 56 48 24 17 13 9 28 10 80 18 58 50 55 61 
32
64 
3 76 
43 9 2 
61 89 48 82 
53 74 20 2 23 
31 69 78 59 8 19 
71 3 45 81 4 92 85 
13 98 89 22 38 37 10 61 
34 8 61 59 93 15 69 37 69 
58 10 71 64 17 15 55 15 30 39 
12 88 82 54 85 10 84 74 80 15 51 
41 15 79 10 98 73 88 77 32 56 89 13 
8 41 90 23 63 28 84 78 10 71 85 74 71 
33 67 53 95 68 25 76 29 50 98 9 93 86 80 
16 49 67 28 79 64 21 5 26 16 16 26 66 87 81 
64 40 86 21 62 21 64 9 15 2 73 24 41 45 62 23 
31 6 68 18 2 7 7 81 12 36 30 14 9 84 56 90 93 
96 52 54 45 8 48 91 12 31 14 39 58 22 4 95 52 69 79 
38 23 18 66 59 98 86 96 62 33 58 22 46 92 37 25 47 58 2 
7 98 30 92 10 78 99 52 48 82 40 15 75 62 67 36 97 18 97 28 
51 16 30 49 25 58 29 20 40 60 47 62 55 75 92 61 54 98 46 14 46 
88 69 38 63 75 15 21 75 15 28 34 70 5 64 57 62 61 24 49 69 30 23 
50 33 25 10 37 36 37 78 93 36 14 64 91 49 35 5 37 4 37 23 64 70 8 
68 81 85 52 73 52 94 76 26 96 72 49 40 74 19 43 11 41 89 19 65 5 85 16 
50 15 9 64 66 93 74 9 10 95 73 89 61 72 68 58 31 68 26 10 22 74 79 10 52 
82 91 95 64 74 64 2 55 60 74 72 21 22 47 77 89 5 95 94 50 43 54 81 12 72 39 
28 12 62 67 8 15 8 23 59 34 4 86 19 58 45 6 66 10 67 92 87 32 56 74 47 21 83 
22 31 76 83 48 23 82 18 76 20 11 82 56 90 25 24 86 77 69 43 34 77 68 68 91 96 83 28 
27 26 71 97 12 3 27 8 45 8 85 38 37 43 13 1 50 28 11 50 49 92 54 69 81 65 67 13 93 
34 72 72 30 1 42 77 77 70 2 64 81 90 23 37 23 79 95 69 27 42 10 82 58 26 87 70 28 51 58 
13 60 83 86 42 10 72 28 34 41 18 3 67 65 38 81 57 50 14 98 58 61 63 56 7 78 89 35 65 75 86 
86 33 60 30 48 28 92 33 40 66 35 10 99 37 92 82 28 52 69 44 94 8 52 47 32 35 8 64 97 43 49 15 
37
41 
89 10 
12 48 23 
51 74 33 91 
10 54 90 97 19 
80 78 31 44 40 87 
99 25 83 38 92 93 52 
11 60 34 40 97 85 29 40 
5 91 92 10 49 78 79 71 77 
73 93 20 97 26 76 90 82 78 59 
18 89 59 49 24 72 80 8 67 8 77 
3 70 7 96 74 22 11 19 61 56 90 63 
83 16 32 52 41 54 13 62 96 60 15 4 99 
36 80 98 32 87 84 40 17 6 70 41 82 49 23 
58 5 21 95 96 16 78 78 79 58 77 50 7 29 81 
95 78 76 53 99 84 65 93 8 72 43 29 14 68 55 91 
73 22 48 51 86 44 46 77 17 29 16 74 91 69 12 46 93 
91 15 49 57 40 52 36 51 87 26 62 55 83 94 80 97 65 65 
13 61 78 78 78 40 11 47 45 70 75 89 50 49 33 65 14 82 7 
32 96 67 22 82 10 41 31 87 5 79 21 38 51 47 8 46 76 59 89 
22 66 86 55 28 14 60 53 77 48 3 61 31 82 55 97 6 52 21 96 81 
21 55 47 24 18 35 76 74 59 98 74 53 22 35 43 88 53 32 47 80 26 78 
50 1 61 99 55 63 16 73 61 45 73 74 50 53 81 87 99 10 43 65 72 29 81 
12 76 81 47 90 71 5 72 32 89 20 65 31 58 93 6 78 48 6 71 66 96 97 20 
94 29 88 9 84 69 78 17 15 26 84 68 6 28 97 18 90 99 85 86 99 20 10 71 13 
15 85 18 80 31 67 87 44 86 7 60 27 74 31 52 71 68 93 85 37 11 4 77 6 68 22 
13 10 42 37 38 88 55 89 47 81 93 84 87 61 93 17 1 82 47 65 53 4 84 95 25 21 64 
81 72 6 56 43 93 80 80 68 11 13 68 51 16 79 68 40 31 33 79 63 59 53 36 95 65 74 20 
35 80 76 55 25 71 8 59 56 2 32 5 40 75 62 85 62 80 36 97 2 8 80 40 76 58 93 40 46 
74 73 97 80 35 72 10 7 55 66 41 88 81 68 15 96 25 9 12 36 55 62 43 42 21 22 12 48 18 68 
17 14 50 90 35 59 69 95 3 40 79 99 5 91 61 81 52 53 33 29 87 42 53 83 20 14 18 44 63 29 52 
64 69 70 5 47 94 87 26 76 23 40 79 90 88 10 71 45 21 70 83 89 55 78 79 6 62 35 87 96 33 88 35 
79 93 90 62 65 1 5 7 67 69 34 71 57 98 45 97 18 38 44 72 63 28 64 1 23 90 4 1 27 97 92 71 63 
1 63 21 65 21 45 10 95 41 22 12 51 15 55 93 38 79 82 8 54 22 7 45 38 44 90 39 54 4 23 25 78 24 81 
30 33 23 94 30 46 87 45 5 16 50 89 38 63 35 97 9 30 24 8 37 74 20 72 93 55 34 61 56 6 84 75 82 19 41 
32 84 79 79 83 67 36 25 18 37 28 19 77 37 91 56 95 60 1 93 32 36 80 75 7 84 74 19 90 76 41 51 29 90 74 72 
91 89 87 90 39 93 53 63 81 3 5 76 79 95 39 68 98 83 39 15 21 93 26 22 38 28 81 99 78 91 23 43 34 43 49 2 7 
42
2 
41 87 
46 91 37 
13 10 16 90 
62 35 26 10 77 
82 60 89 5 74 63 
22 95 66 60 38 88 11 
45 67 25 67 89 42 63 47 
2 17 99 23 26 3 48 51 70 
36 58 67 56 5 31 62 19 75 56 
31 95 44 91 3 88 15 50 19 72 91 
83 33 75 42 69 10 54 78 85 57 33 93 
90 3 50 33 22 71 11 90 38 41 58 47 52 
58 79 2 83 90 2 68 22 95 35 8 61 42 94 
99 88 78 42 57 41 47 69 45 80 13 64 10 61 85 
73 4 62 3 2 69 54 29 52 74 49 30 44 44 49 18 
65 63 52 73 70 31 47 11 69 98 98 3 52 79 53 43 22 
88 63 34 50 22 40 11 92 51 80 77 16 76 78 20 15 48 98 
79 35 57 83 62 2 62 20 70 22 73 41 86 88 17 17 92 98 67 
49 65 89 32 19 81 3 30 28 31 89 52 30 72 64 7 95 28 81 90 
10 77 71 36 59 43 40 33 37 93 30 74 93 82 3 61 90 62 7 97 51 
23 90 17 40 3 66 83 61 59 45 86 51 65 1 40 9 97 83 50 58 21 75 
81 87 71 87 99 4 79 38 10 30 61 18 5 40 28 59 22 98 60 98 35 81 14 
67 93 96 61 46 38 70 38 76 55 17 71 60 52 58 33 55 65 26 1 34 59 93 48 
73 92 93 33 37 3 90 11 94 68 27 98 89 48 79 47 49 31 69 75 98 49 36 99 23 
43 31 54 61 34 85 67 16 93 4 66 53 8 23 84 92 67 48 69 30 11 14 90 27 43 4 
99 74 95 6 58 89 58 9 89 47 40 18 64 75 26 89 3 66 12 40 70 76 95 41 86 51 9 
87 83 85 90 50 86 55 81 28 2 77 62 24 65 72 32 85 28 46 89 78 83 25 65 60 45 78 21 
55 20 27 73 34 51 75 36 34 1 37 10 74 90 56 71 80 35 45 82 25 18 73 12 37 98 5 62 17 
92 39 47 46 3 31 15 39 58 29 45 94 99 45 72 75 62 72 73 80 38 97 42 8 3 77 25 34 1 78 
82 69 36 78 39 38 21 26 63 77 75 24 81 10 61 62 2 48 95 84 16 37 7 93 84 44 59 21 58 43 68 
77 19 57 41 91 64 23 15 72 29 41 15 15 36 57 59 10 52 93 41 29 48 27 98 24 24 74 33 85 38 70 62 
29 84 9 78 23 85 10 24 93 5 12 65 67 7 77 84 4 90 34 91 21 85 34 90 42 98 86 18 21 24 97 76 54 
69 8 27 93 68 66 2 38 10 19 18 90 84 39 56 8 32 78 14 87 39 74 20 27 54 88 41 98 42 2 21 4 46 56 
9 33 8 61 33 86 4 85 42 42 60 61 20 43 78 87 13 63 91 34 15 56 61 12 11 59 51 38 70 24 7 7 84 51 1 
89 58 41 90 13 12 55 60 93 72 2 76 43 73 66 51 75 28 32 61 69 3 29 7 92 51 53 92 70 19 72 7 94 5 40 83 
62 9 7 38 60 71 71 54 47 14 23 29 89 66 87 56 32 70 39 66 22 83 60 53 5 91 59 86 87 29 42 17 45 56 88 52 54 
66 33 60 19 31 38 67 76 98 14 20 53 7 69 16 22 42 7 63 60 47 93 30 17 43 76 14 26 17 34 20 71 92 64 54 66 93 64 
75 10 12 10 51 76 79 43 77 89 61 85 72 34 44 61 63 4 46 88 8 57 30 23 64 74 46 37 81 18 11 92 91 32 23 61 91 61 30 
98 69 91 10 79 17 17 14 95 41 36 67 28 53 9 73 81 3 69 16 83 67 85 2 30 57 81 67 10 66 87 71 77 45 64 38 71 47 15 92 
11 57 5 53 71 80 40 30 75 20 90 77 98 86 4 89 31 44 88 10 18 19 59 27 9 19 79 16 10 96 53 58 30 93 6 49 54 72 60 94 54 
33 46 29 71 28 59 41 21 88 66 33 85 70 29 61 60 8 82 62 6 78 79 97 87 38 69 83 40 95 66 33 9 57 17 34 53 35 58 93 43 93 66 
47
51 
40 94 
37 74 12 
97 51 95 17 
92 92 37 30 13 
96 10 89 28 9 86 
44 40 82 69 20 93 92 
62 14 27 7 94 5 13 11 
13 93 64 3 95 62 81 46 9 
48 68 24 11 54 35 27 33 40 62 
27 77 17 40 42 10 10 58 76 54 35 
30 31 95 37 23 22 27 29 11 11 54 80 
53 93 21 85 28 43 10 55 71 70 52 75 31 
40 34 40 86 34 48 39 65 96 12 62 52 31 87 
64 57 48 56 70 50 82 1 93 99 32 44 31 75 4 
50 26 66 38 1 23 43 41 80 95 18 59 63 28 29 88 
54 13 79 69 66 79 77 37 2 15 92 23 72 48 23 53 48 
95 97 8 8 11 93 65 81 2 10 28 56 5 65 23 69 15 53 
5 84 78 45 40 33 85 10 68 94 33 85 48 81 32 56 10 72 82 
1 6 35 60 71 27 37 43 68 33 95 71 3 42 11 79 34 12 93 30 
61 34 58 26 6 91 43 88 27 19 84 24 93 35 24 94 82 67 27 5 46 
86 89 40 37 50 59 78 56 77 3 42 10 11 25 43 95 16 15 4 6 68 41 
35 98 25 13 23 12 18 57 96 39 86 94 46 43 22 11 80 55 58 47 70 90 73 
27 13 54 96 72 50 41 41 46 25 13 24 29 95 3 94 93 67 87 40 79 41 25 34 
60 10 7 21 92 93 17 17 3 43 93 39 11 25 28 78 48 50 92 44 54 23 53 36 47 
46 26 61 4 38 71 86 5 99 56 28 67 51 19 91 66 17 46 93 87 21 12 67 99 44 97 
1 28 42 4 68 68 41 96 62 20 44 18 25 19 84 74 84 59 49 14 95 3 32 51 37 14 63 
51 19 90 17 83 18 84 52 86 69 48 37 97 24 68 27 48 93 82 71 69 93 77 14 4 84 43 95 
11 93 92 98 90 99 90 93 74 49 74 14 73 69 18 65 33 38 11 52 63 8 49 88 45 31 20 6 71 
68 21 58 57 47 82 38 22 23 6 6 89 56 45 51 23 18 50 97 36 91 6 10 13 51 80 44 43 41 45 
78 49 5 14 85 27 24 4 56 17 27 55 2 86 68 98 79 11 89 58 90 75 10 32 89 96 50 12 22 29 72 
36 77 53 76 70 85 52 51 97 51 1 35 93 72 16 16 28 11 25 38 96 39 44 56 26 2 58 88 21 86 8 77 
28 79 47 49 80 45 28 62 26 19 77 91 47 85 31 6 84 54 69 9 56 21 45 65 16 60 97 35 90 77 49 5 86 
88 75 43 77 30 87 55 82 53 10 54 89 88 15 8 10 40 99 97 7 54 4 37 85 99 92 13 12 82 83 51 29 37 33 
10 64 83 57 68 10 68 8 41 32 37 84 99 1 69 83 56 92 40 87 12 10 20 35 63 15 97 77 74 34 53 33 78 86 24 
34 75 49 12 84 24 92 4 22 55 13 62 73 84 60 22 53 97 22 50 37 17 6 31 97 5 36 57 99 90 98 85 47 84 92 25 
96 55 28 38 42 28 95 42 37 6 67 53 93 5 46 9 24 54 65 39 6 9 92 99 75 36 61 47 18 13 27 12 96 9 41 30 90 
34 15 86 23 66 44 36 37 16 93 49 71 44 77 85 10 90 85 25 18 68 6 29 8 41 25 36 80 16 70 84 47 28 36 4 10 23 64 
11 40 50 4 83 66 41 70 45 6 88 56 7 66 57 78 99 74 55 91 90 32 58 96 17 90 67 7 34 46 62 2 39 26 95 6 14 50 86 
79 76 22 79 1 12 76 64 57 70 38 12 44 61 80 10 43 56 61 47 39 8 90 52 79 18 19 7 84 47 77 75 13 9 71 42 39 36 21 1 
34 29 58 36 69 97 4 98 2 5 38 32 65 16 81 79 23 27 71 13 82 40 16 88 19 89 13 59 51 71 83 64 38 12 84 59 1 74 33 59 14 
49 95 22 41 16 77 52 65 91 38 10 67 55 87 24 22 39 41 48 4 34 68 41 72 68 74 76 37 33 41 45 18 15 74 52 46 56 24 66 81 44 40 
34 96 76 27 5 18 91 41 65 91 71 59 10 17 16 43 24 64 5 57 2 66 75 46 32 89 46 45 3 52 1 26 53 84 49 50 5 46 25 70 36 95 93 
23 32 56 96 10 76 92 50 90 95 52 50 15 36 61 60 84 29 34 50 82 6 36 84 90 17 82 66 16 88 25 1 10 50 82 21 93 38 54 93 95 80 38 67 
20 45 83 65 96 33 90 32 89 39 83 17 29 53 79 13 10 52 45 61 51 18 63 13 7 54 76 17 11 29 64 66 31 42 98 22 55 87 57 58 64 62 10 46 65 
80 65 46 40 97 42 64 94 84 70 15 10 6 6 2 96 33 11 67 15 45 75 54 48 19 79 88 21 92 97 97 9 52 71 58 22 59 97 99 99 20 20 36 84 12 15 
53 85 41 99 67 8 44 69 81 79 8 7 59 6 49 75 26 24 7 74 84 28 46 45 81 14 49 68 38 7 93 4 5 97 17 55 41 43 33 97 79 36 55 33 54 30 52 
]]></test_input>
<test_output><![CDATA[108
400
735
1248
1513
1801
2348
2824
3112
3385
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[三进制小数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">你的任务呢，是将一个有理数转换成三进制小数。&ldquo;什么是三进制小数呢？&rdquo;你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。 </font><br />
</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。 <br />
<br />
</font></p>]]></output>
<sample_input><![CDATA[1/3
1/4
1/6
7/8]]></sample_input>
<sample_output><![CDATA[.1000000000
.0202020202
.0111111111
.2121212122
]]></sample_output>
<test_input><![CDATA[1/3
1/4
1/6
7/8
1/9
2/3
4/9]]></test_input>
<test_output><![CDATA[.1000000000
.0202020202
.0111111111
.2121212122
.0100000000
.2000000000
.1100000000]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[上车人数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">公共汽车从始发站(称为第1站)开出,在始发站上车的人数为a,然后到达 第2站,在第2站有人上、下车,但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下 车的人数有一定的规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的 条件是：共有n个车站，始发站上车的人数为a,最后一站下车的人数是m（全部下车）。试问从x站开出时车上的人数是多少？</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">只有一行，四个整数a,n,m和x </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">x站开出时车上的人数</font></p>]]></output>
<sample_input><![CDATA[5 7 32 4]]></sample_input>
<sample_output><![CDATA[13]]></sample_output>
<test_input><![CDATA[8 12 550 6]]></test_input>
<test_output><![CDATA[52]]></test_output>
<test_input><![CDATA[0 12 324 9]]></test_input>
<test_output><![CDATA[120]]></test_output>
<test_input><![CDATA[5 7 32 4]]></test_input>
<test_output><![CDATA[13]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院
]]></source>
</item>
<item>
<title><![CDATA[不容易系列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">你活的不容易，我活的不容易，他活的也不容易。不过，如果你看了下面的故事，就会知道，有位老汉比你还不容易。 <br />
重庆市郊黄泥板村的徐老汉（大号徐东海，简称XDH）这两年辛辛苦苦养了不少羊，到了今年夏天，由于众所周知的高温干旱，实在没办法解决牲畜的饮水问题，就决定把这些羊都赶到集市去卖。从黄泥板村到交易地点要经过N个收费站，按说这收费站和徐老汉没什么关系，但是事实却令徐老汉欲哭无泪： <br />
（镜头回放） <br />
近景：老汉，一群羊 <br />
远景：公路，收费站 <br />
...... <br />
收费员（彬彬有礼+职业微笑）：&ldquo;老同志，请交过路费！&rdquo; <br />
徐老汉（愕然，反应迟钝状）：&ldquo;锅，锅，锅，锅-炉-费？我家不烧锅炉呀？&rdquo; <br />
收费员（职业微笑依然）：&ldquo;老同志，我说的是过-路-费，就是你的羊要过这个路口必须交费，understand?&rdquo; <br />
徐老汉（近镜头10秒，嘴巴张开）：&ldquo;我-我-我知道汽车过路要收费，这羊也要收费呀？&rdquo; <br />
收费员（居高临下+不解状）：&ldquo;老同志，你怎么就不明白呢，那么我问你，汽车几个轮子？&rdquo; <br />
徐老汉（稍放松）：&ldquo;这个我知道，今天在家里我孙子还问我这个问题，4个！&rdquo; <br />
收费员（生气，站起）：&ldquo;嘿！老头，你还骂人不带脏字，既然知道汽车四个轮子，难道就不知道这羊有几条腿吗？！&rdquo; <br />
徐老汉（尴尬，依然不解状）：&ldquo;也，也，也是4个呀，这有关系吗？&rdquo; <br />
收费员（生气，站起）：&ldquo;怎么没关系！我们头说了，只要是4条腿的都要收费！&rdquo; <br />
...... <br />
(画外音) <br />
由于徐老汉没钱，收费员就将他的羊拿走一半，看到老汉泪水涟涟，犹豫了一下，又还给老汉一只。巧合的是，后面每过一个收费站，都是拿走当时羊的一半，然后退还一只，等到老汉到达市场，就只剩下3只羊了。 <br />
你,当代有良知的青年，能帮忙算一下老汉最初有多少只羊吗？ </font><br />
</p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据第一行是一个整数N，下面由N行组成， <br />
每行包含一个整数a(0＜a＜=30),表示收费站的数量。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。</font></p>]]></output>
<sample_input><![CDATA[2
1
2

]]></sample_input>
<sample_output><![CDATA[4
6

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[不容易系列2]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">大家常常感慨，要做好一件事情真的不容易，确实，失败比成功容易多了！ <br />
做好&ldquo;一件&rdquo;事情尚且不易，若想永远成功而总从不失败，那更是难上加难了，就像花钱总是比挣钱容易的道理一样。 <br />
话虽这样说，我还是要告诉大家，要想失败到一定程度也是不容易的。比如，我高中的时候，就有一个神奇的女生，在英语考试的时候，竟然把40个单项选择题全部做错了！大家都学过概率论，应该知道出现这种情况的概率，所以至今我都觉得这是一件神奇的事情。如果套用一句经典的评语，我们可以这样总结：一个人做错一道选择题并不难，难的是全部做错，一个不对。 <br />
不幸的是，这种小概率事件又发生了，而且就在我们身边： <br />
事情是这样的――HDU有个网名叫做8006的男性同学，结交网友无数，最近该同学玩起了浪漫，同时给n个网友每人写了一封信，这都没什么，要命的是，他竟然把所有的信都装错了信封！注意了，是全部装错哟！ <br />
现在的问题是：请大家帮可怜的8006同学计算一下，一共有多少种可能的错误方式呢？ <br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包含多个多个测试实例，每个测试实例占用一行，每行包含一个正整数n（２＜n＜=20），n表示8006的网友的人数。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每行输入请输出可能的错误方式的数量，每个实例的输出占用一行。</font></p>]]></output>
<sample_input><![CDATA[2
3

]]></sample_input>
<sample_output><![CDATA[1
2

]]></sample_output>
<hint><![CDATA[<p><font face="Times New Roman">装错信封问题 <br />
这个问题是由 18 世纪初的法国数学家蒙摩提出来的。 <br />
<br />
某人给五个朋友写信，邀请他们来家中聚会。请柬和信封交由助手去处理。粗心的助手却把请柬全装错了信封。请问：助手会有多少种装错的可能呢？ <br />
<br />
<br />
-------------------------------------------------------------------------------- <br />
<br />
<br />
瑞士数学家欧拉按一般情况给出了一个递推公式： <br />
<br />
用Ａ、Ｂ、Ｃ&hellip;&hellip;表示写着ｎ位友人名字的信封，ａ、ｂ、ｃ&hellip;&hellip;表示ｎ份相应的写好的信纸。把错装的总数为记作 f(n) 。假设把ａ错装进Ｂ里了，包含着这个错误的一切错装法分两类： <br />
<br />
（１）ｂ装入Ａ里，这时每种错装的其余部分都与Ａ、Ｂ、ａ、ｂ无关，应有 f(n-2) 种错装法。　　　　 <br />
<br />
（２）ｂ装入Ａ、Ｂ之外的一个信封，这时的装信工作实际是把（除ａ之外的）　　份信纸ｂ、ｃ&hellip;&hellip;装入（除Ｂ以外的）ｎ－１个信封Ａ、Ｃ&hellip;&hellip;，显然这时装错的方法有 f(n-1) 种。 <br />
<br />
总之在ａ装入Ｂ的错误之下，共有错装法 f(n-2)+f(n-1) 种。ａ装入Ｃ，装入Ｄ&hellip;&hellip;的ｎ－２种错误之下，同样都有 f(n-2)+f(n-1) 种错装法，因此 : <br />
<br />
f(n)=(n-1) {f(n-1)+f(n-2)} <br />
<br />
这是递推公式，令ｎ＝１、２、３、４、５逐个推算就能解答蒙摩的问题。 <br />
<br />
f(1)= 0， f (2)= 1， f (3)= 2， f (4)= 9， f (5)=44。 </font><br />
<br />
</p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[人民币问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">给出任意的人民币(&gt;10元)的整币兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入任意的人民币(&gt;10元)的整币100,50,20,10</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">计算出兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种</font></p>]]></output>
<sample_input><![CDATA[50
]]></sample_input>
<sample_output><![CDATA[106
]]></sample_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[461]]></test_output>
<test_input><![CDATA[50]]></test_input>
<test_output><![CDATA[106]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[13]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[人见人爱A+B]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 北大的acm上面已经有10来道A+B的题目了，相信这些题目曾经是大家的最爱，希望今天的这个A+B能给大家带来好运，也希望这个题目能唤起大家对ACM曾经的热爱。 <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个题目的A和B不是简单的整数，而是两个时间，A和B 都是由3个整数组成，分别表示时分秒，比如，假设A为34 45 56，就表示A所表示的时间是34小时 45分钟 56秒。 <br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多行组成，首先是一个整数N，表示测试实例的个数，然后是N行数据，每行有6个整数AH,AM,AS,BH,BM,BS，分别表示时间A和B所对应的时分秒。题目保证所有的数据合法。 </font></p>]]></input> 
<output><![CDATA[<p>对于每个测试实例，输出A+B，每个输出结果也是由时分秒3部分组成，同时也要满足时间的规则（即：分和秒的取值范围在0~59），每个输出占一行，并且所有的部分都可以用32位整数表示。</p>]]></output>
<sample_input><![CDATA[1
1 2 3 4 5 6
]]></sample_input>
<sample_output><![CDATA[5 7 9
]]></sample_output>
<test_input><![CDATA[5
1 2 3 4 5 6
34 45 56 12 23 34
12 25 35 26 25 47
23 36 24 12 23 36
33 45 22 23 57 30]]></test_input>
<test_output><![CDATA[5 7 9
47 9 30
38 51 22
36 0 0
57 42 52
]]></test_output>
<test_input><![CDATA[5
1 2 3 4 5 6
34 45 56 12 23 34
12 25 35 26 25 47
23 36 24 12 23 36
33 45 22 23 57 30]]></test_input>
<test_output><![CDATA[5 7 9
47 9 30
38 51 22
36 0 0
57 42 52
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[软件学院]]></source>
</item>
<item>
<title><![CDATA[众数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">问题描述： <br />
给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。 <br />
例如，S={1，2，2，2，3，5}。多重集S的众数是2，其重数为3。 <br />
编程任务： <br />
对于给定的由n 个自然数组成的多重集S，编程计算S 的众数及其重数。 </font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">第1行多重集S中元素个数n(n&lt;=50000)；接下来的n 行中，每行有一个自然数。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">输出文件有2 行，第1 行给出众数，第2 行是重数。(如果有多个众数，只输出最小的)</font></p>]]></output>
<sample_input><![CDATA[6
1
2
2
2
3
5
]]></sample_input>
<sample_output><![CDATA[2
3]]></sample_output>
<test_input><![CDATA[10
2
1
3
2
1
2
1
1
2
1
]]></test_input>
<test_output><![CDATA[1
5]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[作业调度方案]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />
每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />
例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />
一方面，每个操作的安排都要满足以下的两个约束条件。  <br />
(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />
(2) 同一时刻每一台机器至多只能加工一个工件。  <br />
另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />
由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />
还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />
例如，取n=3,m=2，已知数据如下：  <br />
<br />
则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />
<br />
当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />
显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行为两个正整数，用一个空格隔开：  <br />
m n  <br />
（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />
第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />
接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />
其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />
后n行依次表示每个工件的每个工序的加工时间。  <br />
可以保证，以上各数据都是正确的，不必检验。  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一个正整数，为最少的加工时间。</font></p>]]></output>
<sample_input><![CDATA[2 3
1 1 2 3 3 2
1 2 
1 2 
2 1
3 2 
2 5 
2 4]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
<test_input><![CDATA[3 3
1 1 1 2 3 3 2 2 3
1 2 3
2 1 3 
2 3 1
7 2 4 
3 2 5 
3 2 3
]]></test_input>
<test_output><![CDATA[18
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[倒杨辉三角形]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Fans喜欢图形，而且喜欢把图形倒过来欣赏。有一次，他看见杨辉三角形 了，觉得很新鲜，于是就把它们大大小小地摆布出来。输入一些整数n（1&le;n&le;10），读入其每个整数，以该整数为行数，其画出来的倒杨辉三角形（每个数据 占三个字符）就是fans所喜欢欣赏的。Fans是手工做的，你却可以用编程更快捷地做出来，多爽啊! </font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[5
3]]></sample_input>
<sample_output><![CDATA[1 4 6 4 1
 1 3 3 1
  1 2 1
   1 1
    1

1 2 1
 1 1
  1]]></sample_output>
<test_input><![CDATA[5
3
1
4
9
6
2
7
8
10]]></test_input>
<test_output><![CDATA[  1     4     6     4     1
     1     3     3     1
        1     2     1
           1     1
              1

  1     2     1
     1     1
        1

  1

  1     3     3     1
     1     2     1
        1     1
           1

  1     8     28     56     70     56     28     8     1
     1     7     21     35     35     21     7     1
        1     6     15     20     15     6     1
           1     5     10     10     5     1
              1     4     6     4     1
                 1     3     3     1
                    1     2     1
                       1     1
                          1

  1     5     10     10     5     1
     1     4     6     4     1
        1     3     3     1
           1     2     1
              1     1
                 1

  1     1
     1

  1     6     15     20     15     6     1
     1     5     10     10     5     1
        1     4     6     4     1
           1     3     3     1
              1     2     1
                 1     1
                    1

  1     7     21     35     35     21     7     1
     1     6     15     20     15     6     1
        1     5     10     10     5     1
           1     4     6     4     1
              1     3     3     1
                 1     2     1
                    1     1
                       1

  1     9     36     84     126     126     84     36     9     1
     1     8     28     56     70     56     28     8     1
        1     7     21     35     35     21     7     1
           1     6     15     20     15     6     1
              1     5     10     10     5     1
                 1     4     6     4     1
                    1     3     3     1
                       1     2     1
                          1     1
                             1

]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[假币问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">居然有假币！！！<span class="Apple-converted-space">&nbsp;</span><br />
事情是这样的，现在猪肉涨了，但是农民的工资却不见涨啊，没钱怎么买猪肉啊。老王这就去买猪肉，结果找来的零钱中有假币！！！可惜老王一不小心把它混进了一堆真币里面去了。现在知道假币的重量比真币的质量要轻。给你一个天平，请用最快的时间把那个可恶的假币找出来。</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输入有多行,每一行的值为硬币的数目n,1&le;n&le;2^30,输入0结束程序</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">最少要称多少次一定能把那个假币找出来。输出对应输入行数.</span></p>]]></output>
<sample_input><![CDATA[3
12
0
]]></sample_input>
<sample_output><![CDATA[1
3]]></sample_output>
<test_input><![CDATA[1
101
201
301
401
501
601
701
801
901
1001
1101
1201
1301
1401
1501
1601
1701
1801
1901
2001
2101
2201
2301
2401
2501
2601
2701
2801
2901
3001
3101
3201
3301
3401
3501
3601
3701
3801
3901
4001
4101
4201
4301
4401
4501
4601
4701
4801
4901
5001
5101
5201
5301
5401
5501
5601
5701
5801
5901
6001
6101
6201
6301
6401
6501
6601
6701
6801
6901
7001
7101
7201
7301
7401
7501
7601
7701
7801
7901
8001
8101
8201
8301
8401
8501
8601
8701
8801
8901
9001
9101
9201
9301
9401
9501
9601
9701
9801
9901
10001
10101
10201
10301
10401
10501
10601
10701
10801
10901
11001
11101
11201
11301
11401
11501
11601
11701
11801
11901
12001
12101
12201
12301
12401
12501
12601
12701
12801
12901
13001
13101
13201
13301
13401
13501
13601
13701
13801
13901
14001
14101
14201
14301
14401
14501
14601
14701
14801
14901
15001
15101
15201
15301
15401
15501
15601
15701
15801
15901
16001
16101
16201
16301
16401
16501
16601
16701
16801
16901
17001
17101
17201
17301
17401
17501
17601
17701
17801
17901
18001
18101
18201
18301
18401
18501
18601
18701
18801
18901
19001
19101
19201
19301
19401
19501
19601
19701
19801
19901
20001
20101
20201
20301
20401
20501
20601
20701
20801
20901
21001
21101
21201
21301
21401
21501
21601
21701
21801
21901
22001
22101
22201
22301
22401
22501
22601
22701
22801
22901
23001
23101
23201
23301
23401
23501
23601
23701
23801
23901
24001
24101
24201
24301
24401
24501
24601
24701
24801
24901
25001
25101
25201
25301
25401
25501
25601
25701
25801
25901
26001
26101
26201
26301
26401
26501
26601
26701
26801
26901
27001
27101
27201
27301
27401
27501
27601
27701
27801
27901
28001
28101
28201
28301
28401
28501
28601
28701
28801
28901
29001
29101
29201
29301
29401
29501
29601
29701
29801
29901
30001
30101
30201
30301
30401
30501
30601
30701
30801
30901
31001
31101
31201
31301
31401
31501
31601
31701
31801
31901
32001
32101
32201
32301
32401
32501
32601
32701
32801
32901
33001
33101
33201
33301
33401
33501
33601
33701
33801
33901
34001
34101
34201
34301
34401
34501
34601
34701
34801
34901
35001
35101
35201
35301
35401
35501
35601
35701
35801
35901
36001
36101
36201
36301
36401
36501
36601
36701
36801
36901
37001
37101
37201
37301
37401
37501
37601
37701
37801
37901
38001
38101
38201
38301
38401
38501
38601
38701
38801
38901
39001
39101
39201
39301
39401
39501
39601
39701
39801
39901
40001
40101
40201
40301
40401
40501
40601
40701
40801
40901
41001
41101
41201
41301
41401
41501
41601
41701
41801
41901
42001
42101
42201
42301
42401
42501
42601
42701
42801
42901
43001
43101
43201
43301
43401
43501
43601
43701
43801
43901
44001
44101
44201
44301
44401
44501
44601
44701
44801
44901
45001
45101
45201
45301
45401
45501
45601
45701
45801
45901
46001
46101
46201
46301
46401
46501
46601
46701
46801
46901
47001
47101
47201
47301
47401
47501
47601
47701
47801
47901
48001
48101
48201
48301
48401
48501
48601
48701
48801
48901
49001
49101
49201
49301
49401
49501
49601
49701
49801
49901
50001
50101
50201
50301
50401
50501
50601
50701
50801
50901
51001
51101
51201
51301
51401
51501
51601
51701
51801
51901
52001
52101
52201
52301
52401
52501
52601
52701
52801
52901
53001
53101
53201
53301
53401
53501
53601
53701
53801
53901
54001
54101
54201
54301
54401
54501
54601
54701
54801
54901
55001
55101
55201
55301
55401
55501
55601
55701
55801
55901
56001
56101
56201
56301
56401
56501
56601
56701
56801
56901
57001
57101
57201
57301
57401
57501
57601
57701
57801
57901
58001
58101
58201
58301
58401
58501
58601
58701
58801
58901
59001
59101
59201
59301
59401
59501
59601
59701
59801
59901
60001
60101
60201
60301
60401
60501
60601
60701
60801
60901
61001
61101
61201
61301
61401
61501
61601
61701
61801
61901
62001
62101
62201
62301
62401
62501
62601
62701
62801
62901
63001
63101
63201
63301
63401
63501
63601
63701
63801
63901
64001
64101
64201
64301
64401
64501
64601
64701
64801
64901
65001
65101
65201
65301
65401
65501
65601
65701
65801
65901
66001
66101
66201
66301
66401
66501
66601
66701
66801
66901
67001
67101
67201
67301
67401
67501
67601
67701
67801
67901
68001
68101
68201
68301
68401
68501
68601
68701
68801
68901
69001
69101
69201
69301
69401
69501
69601
69701
69801
69901
70001
70101
70201
70301
70401
70501
70601
70701
70801
70901
71001
71101
71201
71301
71401
71501
71601
71701
71801
71901
72001
72101
72201
72301
72401
72501
72601
72701
72801
72901
73001
73101
73201
73301
73401
73501
73601
73701
73801
73901
74001
74101
74201
74301
74401
74501
74601
74701
74801
74901
75001
75101
75201
75301
75401
75501
75601
75701
75801
75901
76001
76101
76201
76301
76401
76501
76601
76701
76801
76901
77001
77101
77201
77301
77401
77501
77601
77701
77801
77901
78001
78101
78201
78301
78401
78501
78601
78701
78801
78901
79001
79101
79201
79301
79401
79501
79601
79701
79801
79901
80001
80101
80201
80301
80401
80501
80601
80701
80801
80901
81001
81101
81201
81301
81401
81501
81601
81701
81801
81901
82001
82101
82201
82301
82401
82501
82601
82701
82801
82901
83001
83101
83201
83301
83401
83501
83601
83701
83801
83901
84001
84101
84201
84301
84401
84501
84601
84701
84801
84901
85001
85101
85201
85301
85401
85501
85601
85701
85801
85901
86001
86101
86201
86301
86401
86501
86601
86701
86801
86901
87001
87101
87201
87301
87401
87501
87601
87701
87801
87901
88001
88101
88201
88301
88401
88501
88601
88701
88801
88901
89001
89101
89201
89301
89401
89501
89601
89701
89801
89901
90001
90101
90201
90301
90401
90501
90601
90701
90801
90901
91001
91101
91201
91301
91401
91501
91601
91701
91801
91901
92001
92101
92201
92301
92401
92501
92601
92701
92801
92901
93001
93101
93201
93301
93401
93501
93601
93701
93801
93901
94001
94101
94201
94301
94401
94501
94601
94701
94801
94901
95001
95101
95201
95301
95401
95501
95601
95701
95801
95901
96001
96101
96201
96301
96401
96501
96601
96701
96801
96901
97001
97101
97201
97301
97401
97501
97601
97701
97801
97901
98001
98101
98201
98301
98401
98501
98601
98701
98801
98901
99001
99101
99201
99301
99401
99501
99601
99701
99801
99901
1000000
2000000
3000000
4000000
5000000
6000000
7000000
8000000
9000000
10000000
0]]></test_input>
<test_output><![CDATA[0
5
5
6
6
6
6
6
7
7
7
7
7
7
7
7
7
7
7
7
7
7
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
13
14
14
14
15
15
15
15
15
15
]]></test_output>
<test_input><![CDATA[1
2
3
5
9
1162261466
1162261467
1162261468
1162261469
0













]]></test_input>
<test_output><![CDATA[0
1
1
2
2
19
19
20
20
]]></test_output>
<hint><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">示例1中共有3枚硬币，所以任意取2个放天平上称量一下。<span class="Apple-converted-space">&nbsp;</span><br />
因为假币的重量比较轻。<span class="Apple-converted-space">&nbsp;</span><br />
如果天平不平衡，则较轻的那枚就是假币。<span class="Apple-converted-space">&nbsp;</span><br />
如果天平平衡，则说明这两枚硬币都是真的，而剩下那枚是假币。<span class="Apple-converted-space"> </span><br />
</span></p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[做幻方]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Apple最近迷上了做幻方，Apple还是个中高手，只要你说个奇数N就能把N*N的幻方做出来。其实你可以比他做得更好的。Apple总是画得很乱，而你可以利用程序排得很整齐^_^ 幻方的要求：每一行，每一列，还有两条斜线上数字的和都相等. </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">每行一个奇数N(0&lt; N &lt; 30),输入0结束  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输入一个奇数，输出一个幻方，顺序参照样板输出；同一列的数右对齐，数与数用一个空格分开；输出完以后加一个回车。</font></p>]]></output>
<sample_input><![CDATA[5
1
0]]></sample_input>
<sample_output><![CDATA[11 18 25  2  9
10 12 19 21  3
 4  6 13 20 22
23  5  7 14 16
17 24  1  8 15

1]]></sample_output>
<test_input><![CDATA[1
29
17
5
9
0]]></test_input>
<test_output><![CDATA[1

407 438 469 500 531 562 593 624 655 686 717 748 779 810 841   2  33  64  95 126 157 188 219 250 281 312 343 374 405
406 408 439 470 501 532 563 594 625 656 687 718 749 780 811 813   3  34  65  96 127 158 189 220 251 282 313 344 375
376 378 409 440 471 502 533 564 595 626 657 688 719 750 781 812 814   4  35  66  97 128 159 190 221 252 283 314 345
346 377 379 410 441 472 503 534 565 596 627 658 689 720 751 782 784 815   5  36  67  98 129 160 191 222 253 284 315
316 347 349 380 411 442 473 504 535 566 597 628 659 690 721 752 783 785 816   6  37  68  99 130 161 192 223 254 285
286 317 348 350 381 412 443 474 505 536 567 598 629 660 691 722 753 755 786 817   7  38  69 100 131 162 193 224 255
256 287 318 320 351 382 413 444 475 506 537 568 599 630 661 692 723 754 756 787 818   8  39  70 101 132 163 194 225
226 257 288 319 321 352 383 414 445 476 507 538 569 600 631 662 693 724 726 757 788 819   9  40  71 102 133 164 195
196 227 258 289 291 322 353 384 415 446 477 508 539 570 601 632 663 694 725 727 758 789 820  10  41  72 103 134 165
166 197 228 259 290 292 323 354 385 416 447 478 509 540 571 602 633 664 695 697 728 759 790 821  11  42  73 104 135
136 167 198 229 260 262 293 324 355 386 417 448 479 510 541 572 603 634 665 696 698 729 760 791 822  12  43  74 105
106 137 168 199 230 261 263 294 325 356 387 418 449 480 511 542 573 604 635 666 668 699 730 761 792 823  13  44  75
 76 107 138 169 200 231 233 264 295 326 357 388 419 450 481 512 543 574 605 636 667 669 700 731 762 793 824  14  45
 46  77 108 139 170 201 232 234 265 296 327 358 389 420 451 482 513 544 575 606 637 639 670 701 732 763 794 825  15
 16  47  78 109 140 171 202 204 235 266 297 328 359 390 421 452 483 514 545 576 607 638 640 671 702 733 764 795 826
827  17  48  79 110 141 172 203 205 236 267 298 329 360 391 422 453 484 515 546 577 608 610 641 672 703 734 765 796
797 828  18  49  80 111 142 173 175 206 237 268 299 330 361 392 423 454 485 516 547 578 609 611 642 673 704 735 766
767 798 829  19  50  81 112 143 174 176 207 238 269 300 331 362 393 424 455 486 517 548 579 581 612 643 674 705 736
737 768 799 830  20  51  82 113 144 146 177 208 239 270 301 332 363 394 425 456 487 518 549 580 582 613 644 675 706
707 738 769 800 831  21  52  83 114 145 147 178 209 240 271 302 333 364 395 426 457 488 519 550 552 583 614 645 676
677 708 739 770 801 832  22  53  84 115 117 148 179 210 241 272 303 334 365 396 427 458 489 520 551 553 584 615 646
647 678 709 740 771 802 833  23  54  85 116 118 149 180 211 242 273 304 335 366 397 428 459 490 521 523 554 585 616
617 648 679 710 741 772 803 834  24  55  86  88 119 150 181 212 243 274 305 336 367 398 429 460 491 522 524 555 586
587 618 649 680 711 742 773 804 835  25  56  87  89 120 151 182 213 244 275 306 337 368 399 430 461 492 494 525 556
557 588 619 650 681 712 743 774 805 836  26  57  59  90 121 152 183 214 245 276 307 338 369 400 431 462 493 495 526
527 558 589 620 651 682 713 744 775 806 837  27  58  60  91 122 153 184 215 246 277 308 339 370 401 432 463 465 496
497 528 559 590 621 652 683 714 745 776 807 838  28  30  61  92 123 154 185 216 247 278 309 340 371 402 433 464 466
467 498 529 560 591 622 653 684 715 746 777 808 839  29  31  62  93 124 155 186 217 248 279 310 341 372 403 434 436
437 468 499 530 561 592 623 654 685 716 747 778 809 840   1  32  63  94 125 156 187 218 249 280 311 342 373 404 435

137 156 175 194 213 232 251 270 289   2  21  40  59  78  97 116 135
136 138 157 176 195 214 233 252 271 273   3  22  41  60  79  98 117
118 120 139 158 177 196 215 234 253 272 274   4  23  42  61  80  99
100 119 121 140 159 178 197 216 235 254 256 275   5  24  43  62  81
 82 101 103 122 141 160 179 198 217 236 255 257 276   6  25  44  63
 64  83 102 104 123 142 161 180 199 218 237 239 258 277   7  26  45
 46  65  84  86 105 124 143 162 181 200 219 238 240 259 278   8  27
 28  47  66  85  87 106 125 144 163 182 201 220 222 241 260 279   9
 10  29  48  67  69  88 107 126 145 164 183 202 221 223 242 261 280
281  11  30  49  68  70  89 108 127 146 165 184 203 205 224 243 262
263 282  12  31  50  52  71  90 109 128 147 166 185 204 206 225 244
245 264 283  13  32  51  53  72  91 110 129 148 167 186 188 207 226
227 246 265 284  14  33  35  54  73  92 111 130 149 168 187 189 208
209 228 247 266 285  15  34  36  55  74  93 112 131 150 169 171 190
191 210 229 248 267 286  16  18  37  56  75  94 113 132 151 170 172
173 192 211 230 249 268 287  17  19  38  57  76  95 114 133 152 154
155 174 193 212 231 250 269 288   1  20  39  58  77  96 115 134 153

11 18 25  2  9
10 12 19 21  3
 4  6 13 20 22
23  5  7 14 16
17 24  1  8 15

37 48 59 70 81  2 13 24 35
36 38 49 60 71 73  3 14 25
26 28 39 50 61 72 74  4 15
16 27 29 40 51 62 64 75  5
 6 17 19 30 41 52 63 65 76
77  7 18 20 31 42 53 55 66
67 78  8 10 21 32 43 54 56
57 68 79  9 11 22 33 44 46
47 58 69 80  1 12 23 34 45

]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[内码对称]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">C++中int型整数内码是一个32位的01序列，该01序列有些是对称的，有些是不对称的。对于给定的一个整数，在一些场合，需要判断其整数内码的对称性。这个事情要做好还非你不行呢。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入中含有一些整数n（0&le;n〈2^32）。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">统计其中一共有多少个其内码对称的整数，输出之。</font></p>]]></output>
<sample_input><![CDATA[0
1
2147483649
2
3]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
<test_input><![CDATA[0
1
2147483649
2
3
5
9
6
4
27
85
30
90
0
87028896
4294967294
4294967295
3145632219
2499018150
1026553020
1551358569
3848879058
1039136700
1924941831
3221225469
3187670973
3880451675
443933926]]></test_input>
<test_output><![CDATA[9]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[剔除相关数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">一个数与另一个数如果含有相同数字和个数的字符，则称两数相关。现有一堆乱七八糟的整数，里面可能充满了彼此相关的数，请你用一下手段，自动地将其剔除。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">每组数据前有一个N(&lt;1000)，表示跟随的整数P(0</font>
<p></p>
</p>]]></input> 
<output><![CDATA[<p>按从小到大的顺序输出非相关数，若没有非相关数，则输出None</p>]]></output>
<sample_input><![CDATA[8
213 667 3 213 43 34 677 2
3
322 232 232
0

]]></sample_input>
<sample_output><![CDATA[2 3 667 677
None
]]></sample_output>
<test_input><![CDATA[8
213 667 3 213 43 34 677 2
3
322 232 232
10
56 65 233 544 977 779 876 833 456 546
0]]></test_input>
<test_output><![CDATA[2 3 667 677
None
233 544 833 876]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[化学品问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个实验室有N个放化学品的试管，排列在一条直线上。如果连续M个试管中放入药品，则会发生爆炸，于是，在某些试管中可能不放药品。 <br />
任务：对于给定的N和M，求不发生爆炸的放置药品的方案总数 <br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行是一个正整数L，代表输入数据的组数 <br />
接下来L行，每行有两个正整数N，M( 1＜N＜32，2&le;M&le;5) <br />
</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出L行，每行只有一个正整数S，表示对应输入数据的方案总数。</font></p>]]></output>
<sample_input><![CDATA[2
4 3
3 2

]]></sample_input>
<sample_output><![CDATA[13
5

]]></sample_output>
<test_input><![CDATA[15
4	3
3	2
22	3
10	3
1	3
2	4
5	2
18	3
22	2
23	4
25	5
22	3
16	2
20	2
31	8]]></test_input>
<test_output><![CDATA[13
5
755476
504
2
4
13
66012
46368
3919944
23099186
755476
2584
17711
2043730736]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[十->二进制转换]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">将十进制整数转换成二进制数</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据中含有不多于50个整数n（-2^16＜n＜2^16）。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">对于每个n，以11位的宽度右对齐输出n值，然后输出&ldquo;--&gt;&rdquo;，再然后输出二进制数。每个整数n的输出，独立占一行。</font></p>]]></output>
<sample_input><![CDATA[2
0
-12
1
]]></sample_input>
<sample_output><![CDATA[2―->10
0-->0
-12-->-1100
1-->1
]]></sample_output>
<test_input><![CDATA[123
6534
-23452
22345
-1278
1123
876
-876
1000]]></test_input>
<test_output><![CDATA[        123-->1111011
       6534-->1100110000110
     -23452-->-101101110011100
      22345-->101011101001001
      -1278-->-10011111110
       1123-->10001100011
        876-->1101101100
       -876-->-1101101100
       1000-->1111101000]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[半数集问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">问题描述： <br />
给定一个自然数n，由n开始可以依次产生半数集set(n)中的数如下。 <br />
(1) n&isin;set(n)； <br />
(2) 在n的左边加上一个自然数，但该自然数不能超过最近添加的数的一半； <br />
(3) 按此规则进行处理，直到不能再添加自然数为止。 <br />
例如，set(6)={6,16,26,126,36,136}。半数集set(6)中有6 个元素。 <br />
注意半数集是多重集。 <br />
<br />
编程任务： <br />
对于给定的自然数n，编程计算半数集set(n)中的元素个数。 </font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据m行，每行给出一个整数n。(0〈n〈1000)</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出只有m行，每行给出半数集set(n)中的元素个数。</font></p>]]></output>
<sample_input><![CDATA[6
99
]]></sample_input>
<sample_output><![CDATA[6
9042
]]></sample_output>
<test_input><![CDATA[1
23
99
123
567
999]]></test_input>
<test_output><![CDATA[1
74
9042
22258
54721626
1955133450
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[去括号]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">当老师不容易，尤其是当小学的老师更难:现在的小朋友做作业喜欢滥用括号。 <br />
虽然不影响计算结果，但不够美观，容易出错，而且可读性差。但又不能一棒子打死，也许他们就是将来的&ldquo;陈景润&rdquo;呢！ <br />
为了减轻老师的工作，不至于他们工作到深夜，我们来写个程序把小朋友的作业做一下简单地处理，去掉那些多余的括号。 <br />
为了简化问题，所有式子里只存在小括号，运算符号包括+(加)、-(减)、*(乘)、/(除)、^(幂)。 <br />
注意：去掉多余的小括号不是指运算结果一样就可以。 <br />
比如：(1+2)^1 = 3。虽然把括号去掉1+2^1也等于3，但我们说这个括号不能去。 <br />
但如：1+(2+3) = 1+2+3只要是允许的，因为加法是满足交换律和结合律的。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入包括多组测试数据。 <br />
每组测试数据为一行算术表达式，只包括数字和运算符号，长度小于16。 <br />
输入以#行结束，该行不做处理。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对应每组数据输入都有一行输出。 <br />
输出去掉多余的括号后的表达式。</font></p>]]></output>
<sample_input><![CDATA[((((1))))+((((1))))
1
1+1+1+1
((1+2)+3)*4
(1+(2+3))*4
((1*2)*3)*4
(1*(2*3))*4
((1*2)*(3*4))
1*((2*3)*4)
1*(2*(3*4))
((1*2)*4)*3
(1*(2*4))*3
((1*2)*(4*3))
1*((2*4)*3)
1*(2*(4*3))
((1+3)+2)*4
(1+(3+2))*4
((1+3)*(2+4))
((1*3)*2)*4
(1*(3*2))*4
((1*3)*(2*4))
1*((3*2)*4)
1*(3*(2*4))
((1+3)*(4+2))
((1*3)*4)*2
(1*(3*4))*2
((1*3)*(4*2))
1*((3*4)*2)
1*(3*(4*2))
((1*4)*3)*2
(1*(4*3))*2
((1*4)*(3*2))
1*((4*3)*2)
1*(4*(3*2))
((1*4)*2)*3
(1*(4*2))*3
((1*4)*(2*3))
1*((4*2)*3)
1*(4*(2*3))
((2+1)+3)*4
(2+(1+3))*4
((2*1)*3)*4
(2*(1*3))*4
((2*1)*(3*4))
2*((1*3)*4)
2*(1*(3*4))
((2/1)*3)*4
((2/1)*(3*4))
(2/(1/3))*4
2/(1/(3*4))
2/((1/3)/4)
((2^1)*3)*4
((2^1)*(3*4))
((2*1)*4)*3
(2*(1*4))*3
((2*1)*(4*3))
2*((1*4)*3)
2*(1*(4*3))
((2/1)*4)*3
((2/1)*(4*3))
(2/(1/4))*3
2/(1/(4*3))
2/((1/4)/3)
((2^1)*4)*3
((2^1)*(4*3))
((2+3)+1)*4
(2+(3+1))*4
((2*3)*1)*4
(2*(3*1))*4
((2*3)*(1*4))
2*((3*1)*4)
2*(3*(1*4))
((2*3)/1)*4
(2*(3/1))*4
2*((3/1)*4)
((2*3)/(1/4))
2*(3/(1/4))
((2*3)^1)*4
(2*(3^1))*4
2*((3^1)*4)
((2*3)*4)*1
(2*(3*4))*1
((2*3)*(4*1))
2*((3*4)*1)
2*(3*(4*1))
((2*3)*4)/1
(2*(3*4))/1
((2*3)*(4/1))
2*((3*4)/1)
2*(3*(4/1))
((2*3)*4)^1
(2*(3*4))^1
((2*3)*(4^1))
2*((3*4)^1)
2*(3*(4^1))
((2^3)*(4-1))
((2+4)*(3+1))
((2*4)*3)*1
(2*(4*3))*1
((2*4)*(3*1))
2*((4*3)*1)
2*(4*(3*1))
((2*4)*3)/1
(2*(4*3))/1
((2*4)*(3/1))
2*((4*3)/1)
2*(4*(3/1))
((2*4)*3)^1
(2*(4*3))^1
((2*4)*(3^1))
2*((4*3)^1)
2*(4*(3^1))
((2+4)*(1+3))
((2*4)*1)*3
(2*(4*1))*3
((2*4)*(1*3))
2*((4*1)*3)
2*(4*(1*3))
((2*4)/1)*3
(2*(4/1))*3
2*((4/1)*3)
((2*4)/(1/3))
2*(4/(1/3))
((2*4)^1)*3
(2*(4^1))*3
2*((4^1)*3)
(2^(4-1))*3
((3+2)+1)*4
(3+(2+1))*4
((3*2)*1)*4
(3*(2*1))*4
((3*2)*(1*4))
3*((2*1)*4)
3*(2*(1*4))
((3*2)/1)*4
(3*(2/1))*4
3*((2/1)*4)
((3*2)/(1/4))
3*(2/(1/4))
((3*2)^1)*4
(3*(2^1))*4
3*((2^1)*4)
3/(2^(1-4))
((3*2)*4)*1
(3*(2*4))*1
((3*2)*(4*1))
3*((2*4)*1)
3*(2*(4*1))
((3*2)*4)/1
(3*(2*4))/1
((3*2)*(4/1))
3*((2*4)/1)
3*(2*(4/1))
((3*2)*4)^1
(3*(2*4))^1
((3*2)*(4^1))
3*((2*4)^1)
3*(2*(4^1))
3*(2^(4-1))
((3+1)+2)*4
(3+(1+2))*4
((3+1)*(2+4))
((3*1)*2)*4
(3*(1*2))*4
((3*1)*(2*4))
3*((1*2)*4)
3*(1*(2*4))
((3/1)*2)*4
((3/1)*(2*4))
(3/(1/2))*4
3/(1/(2*4))
3/((1/2)/4)
((3^1)*2)*4
((3^1)*(2*4))
((3+1)*(4+2))
((3*1)*4)*2
(3*(1*4))*2
((3*1)*(4*2))
3*((1*4)*2)
3*(1*(4*2))
((3/1)*4)*2
((3/1)*(4*2))
(3/(1/4))*2
3/(1/(4*2))
3/((1/4)/2)
((3^1)*4)*2
((3^1)*(4*2))
((3*4)*1)*2
(3*(4*1))*2
((3*4)*(1*2))
3*((4*1)*2)
3*(4*(1*2))
((3*4)/1)*2
(3*(4/1))*2
3*((4/1)*2)
((3*4)/(1/2))
3*(4/(1/2))
((3*4)^1)*2
(3*(4^1))*2
3*((4^1)*2)
((3*4)*2)*1
(3*(4*2))*1
((3*4)*(2*1))
3*((4*2)*1)
3*(4*(2*1))
((3*4)*2)/1
(3*(4*2))/1
((3*4)*(2/1))
3*((4*2)/1)
3*(4*(2/1))
((3*4)*2)^1
(3*(4*2))^1
((3*4)*(2^1))
3*((4*2)^1)
3*(4*(2^1))
((4+2)*(3+1))
4*((2+3)+1)
4*(2+(3+1))
((4*2)*3)*1
(4*(2*3))*1
((4*2)*(3*1))
4*((2*3)*1)
4*(2*(3*1))
((4*2)*3)/1
(4*(2*3))/1
((4*2)*(3/1))
4*((2*3)/1)
4*(2*(3/1))
((4*2)*3)^1
(4*(2*3))^1
((4*2)*(3^1))
4*((2*3)^1)
4*(2*(3^1))
((4+2)*(1+3))
4*((2+1)+3)
4*(2+(1+3))
((4*2)*1)*3
(4*(2*1))*3
((4*2)*(1*3))
4*((2*1)*3)
4*(2*(1*3))
((4*2)/1)*3
(4*(2/1))*3
4*((2/1)*3)
((4*2)/(1/3))
4*(2/(1/3))
((4*2)^1)*3
(4*(2^1))*3
4*((2^1)*3)
4*((3+2)+1)
4*(3+(2+1))
((4*3)*2)*1
(4*(3*2))*1
((4*3)*(2*1))
4*((3*2)*1)
4*(3*(2*1))
((4*3)*2)/1
(4*(3*2))/1
((4*3)*(2/1))
4*((3*2)/1)
4*(3*(2/1))
((4*3)*2)^1
(4*(3*2))^1
((4*3)*(2^1))
4*((3*2)^1)
4*(3*(2^1))
4*((3+1)+2)
4*(3+(1+2))
((4*3)*1)*2
(4*(3*1))*2
((4*3)*(1*2))
4*((3*1)*2)
4*(3*(1*2))
((4*3)/1)*2
(4*(3/1))*2
4*((3/1)*2)
((4*3)/(1/2))
4*(3/(1/2))
((4*3)^1)*2
(4*(3^1))*2
4*((3^1)*2)
4*((1+3)+2)
4*(1+(3+2))
((4*1)*3)*2
(4*(1*3))*2
((4*1)*(3*2))
4*((1*3)*2)
4*(1*(3*2))
((4/1)*3)*2
((4/1)*(3*2))
(4/(1/3))*2
4/(1/(3*2))
4/((1/3)/2)
((4^1)*3)*2
((4^1)*(3*2))
((4-1)*(2^3))
4*((1+2)+3)
4*(1+(2+3))
((4*1)*2)*3
(4*(1*2))*3
((4*1)*(2*3))
4*((1*2)*3)
4*(1*(2*3))
((4/1)*2)*3
((4/1)*(2*3))
(4/(1/2))*3
4/(1/(2*3))
4/((1/2)/3)
((4^1)*2)*3
((4^1)*(2*3))
#
]]></sample_input>
<sample_output><![CDATA[1+1
1
1+1+1+1
(1+2+3)*4
(1+2+3)*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*4*3
1*2*4*3
1*2*4*3
1*2*4*3
1*2*4*3
(1+3+2)*4
(1+3+2)*4
(1+3)*(2+4)
1*3*2*4
1*3*2*4
1*3*2*4
1*3*2*4
1*3*2*4
(1+3)*(4+2)
1*3*4*2
1*3*4*2
1*3*4*2
1*3*4*2
1*3*4*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*2*3
1*4*2*3
1*4*2*3
1*4*2*3
1*4*2*3
(2+1+3)*4
(2+1+3)*4
2*1*3*4
2*1*3*4
2*1*3*4
2*1*3*4
2*1*3*4
2/1*3*4
2/1*3*4
2/(1/3)*4
2/(1/(3*4))
2/(1/3/4)
2^1*3*4
2^1*3*4
2*1*4*3
2*1*4*3
2*1*4*3
2*1*4*3
2*1*4*3
2/1*4*3
2/1*4*3
2/(1/4)*3
2/(1/(4*3))
2/(1/4/3)
2^1*4*3
2^1*4*3
(2+3+1)*4
(2+3+1)*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3/1*4
2*3/1*4
2*3/1*4
2*3/(1/4)
2*3/(1/4)
(2*3)^1*4
2*3^1*4
2*3^1*4
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4/1
2*3*4/1
2*3*4/1
2*3*4/1
2*3*4/1
(2*3*4)^1
(2*3*4)^1
2*3*4^1
2*(3*4)^1
2*3*4^1
2^3*(4-1)
(2+4)*(3+1)
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3/1
2*4*3/1
2*4*3/1
2*4*3/1
2*4*3/1
(2*4*3)^1
(2*4*3)^1
2*4*3^1
2*(4*3)^1
2*4*3^1
(2+4)*(1+3)
2*4*1*3
2*4*1*3
2*4*1*3
2*4*1*3
2*4*1*3
2*4/1*3
2*4/1*3
2*4/1*3
2*4/(1/3)
2*4/(1/3)
(2*4)^1*3
2*4^1*3
2*4^1*3
2^(4-1)*3
(3+2+1)*4
(3+2+1)*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2/1*4
3*2/1*4
3*2/1*4
3*2/(1/4)
3*2/(1/4)
(3*2)^1*4
3*2^1*4
3*2^1*4
3/2^(1-4)
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4/1
3*2*4/1
3*2*4/1
3*2*4/1
3*2*4/1
(3*2*4)^1
(3*2*4)^1
3*2*4^1
3*(2*4)^1
3*2*4^1
3*2^(4-1)
(3+1+2)*4
(3+1+2)*4
(3+1)*(2+4)
3*1*2*4
3*1*2*4
3*1*2*4
3*1*2*4
3*1*2*4
3/1*2*4
3/1*2*4
3/(1/2)*4
3/(1/(2*4))
3/(1/2/4)
3^1*2*4
3^1*2*4
(3+1)*(4+2)
3*1*4*2
3*1*4*2
3*1*4*2
3*1*4*2
3*1*4*2
3/1*4*2
3/1*4*2
3/(1/4)*2
3/(1/(4*2))
3/(1/4/2)
3^1*4*2
3^1*4*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4/1*2
3*4/1*2
3*4/1*2
3*4/(1/2)
3*4/(1/2)
(3*4)^1*2
3*4^1*2
3*4^1*2
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2/1
3*4*2/1
3*4*2/1
3*4*2/1
3*4*2/1
(3*4*2)^1
(3*4*2)^1
3*4*2^1
3*(4*2)^1
3*4*2^1
(4+2)*(3+1)
4*(2+3+1)
4*(2+3+1)
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3/1
4*2*3/1
4*2*3/1
4*2*3/1
4*2*3/1
(4*2*3)^1
(4*2*3)^1
4*2*3^1
4*(2*3)^1
4*2*3^1
(4+2)*(1+3)
4*(2+1+3)
4*(2+1+3)
4*2*1*3
4*2*1*3
4*2*1*3
4*2*1*3
4*2*1*3
4*2/1*3
4*2/1*3
4*2/1*3
4*2/(1/3)
4*2/(1/3)
(4*2)^1*3
4*2^1*3
4*2^1*3
4*(3+2+1)
4*(3+2+1)
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2/1
4*3*2/1
4*3*2/1
4*3*2/1
4*3*2/1
(4*3*2)^1
(4*3*2)^1
4*3*2^1
4*(3*2)^1
4*3*2^1
4*(3+1+2)
4*(3+1+2)
4*3*1*2
4*3*1*2
4*3*1*2
4*3*1*2
4*3*1*2
4*3/1*2
4*3/1*2
4*3/1*2
4*3/(1/2)
4*3/(1/2)
(4*3)^1*2
4*3^1*2
4*3^1*2
4*(1+3+2)
4*(1+3+2)
4*1*3*2
4*1*3*2
4*1*3*2
4*1*3*2
4*1*3*2
4/1*3*2
4/1*3*2
4/(1/3)*2
4/(1/(3*2))
4/(1/3/2)
4^1*3*2
4^1*3*2
(4-1)*2^3
4*(1+2+3)
4*(1+2+3)
4*1*2*3
4*1*2*3
4*1*2*3
4*1*2*3
4*1*2*3
4/1*2*3
4/1*2*3
4/(1/2)*3
4/(1/(2*3))
4/(1/2/3)
4^1*2*3
4^1*2*3
]]></sample_output>
<test_input><![CDATA[((((1))))+((((1))))
1
1+1+1+1
((1+2)+3)*4
(1+(2+3))*4
((1*2)*3)*4
(1*(2*3))*4
((1*2)*(3*4))
1*((2*3)*4)
1*(2*(3*4))
((1*2)*4)*3
(1*(2*4))*3
((1*2)*(4*3))
1*((2*4)*3)
1*(2*(4*3))
((1+3)+2)*4
(1+(3+2))*4
((1+3)*(2+4))
((1*3)*2)*4
(1*(3*2))*4
((1*3)*(2*4))
1*((3*2)*4)
1*(3*(2*4))
((1+3)*(4+2))
((1*3)*4)*2
(1*(3*4))*2
((1*3)*(4*2))
1*((3*4)*2)
1*(3*(4*2))
((1*4)*3)*2
(1*(4*3))*2
((1*4)*(3*2))
1*((4*3)*2)
1*(4*(3*2))
((1*4)*2)*3
(1*(4*2))*3
((1*4)*(2*3))
1*((4*2)*3)
1*(4*(2*3))
((2+1)+3)*4
(2+(1+3))*4
((2*1)*3)*4
(2*(1*3))*4
((2*1)*(3*4))
2*((1*3)*4)
2*(1*(3*4))
((2/1)*3)*4
((2/1)*(3*4))
(2/(1/3))*4
2/(1/(3*4))
2/((1/3)/4)
((2^1)*3)*4
((2^1)*(3*4))
((2*1)*4)*3
(2*(1*4))*3
((2*1)*(4*3))
2*((1*4)*3)
2*(1*(4*3))
((2/1)*4)*3
((2/1)*(4*3))
(2/(1/4))*3
2/(1/(4*3))
2/((1/4)/3)
((2^1)*4)*3
((2^1)*(4*3))
((2+3)+1)*4
(2+(3+1))*4
((2*3)*1)*4
(2*(3*1))*4
((2*3)*(1*4))
2*((3*1)*4)
2*(3*(1*4))
((2*3)/1)*4
(2*(3/1))*4
2*((3/1)*4)
((2*3)/(1/4))
2*(3/(1/4))
((2*3)^1)*4
(2*(3^1))*4
2*((3^1)*4)
((2*3)*4)*1
(2*(3*4))*1
((2*3)*(4*1))
2*((3*4)*1)
2*(3*(4*1))
((2*3)*4)/1
(2*(3*4))/1
((2*3)*(4/1))
2*((3*4)/1)
2*(3*(4/1))
((2*3)*4)^1
(2*(3*4))^1
((2*3)*(4^1))
2*((3*4)^1)
2*(3*(4^1))
((2^3)*(4-1))
((2+4)*(3+1))
((2*4)*3)*1
(2*(4*3))*1
((2*4)*(3*1))
2*((4*3)*1)
2*(4*(3*1))
((2*4)*3)/1
(2*(4*3))/1
((2*4)*(3/1))
2*((4*3)/1)
2*(4*(3/1))
((2*4)*3)^1
(2*(4*3))^1
((2*4)*(3^1))
2*((4*3)^1)
2*(4*(3^1))
((2+4)*(1+3))
((2*4)*1)*3
(2*(4*1))*3
((2*4)*(1*3))
2*((4*1)*3)
2*(4*(1*3))
((2*4)/1)*3
(2*(4/1))*3
2*((4/1)*3)
((2*4)/(1/3))
2*(4/(1/3))
((2*4)^1)*3
(2*(4^1))*3
2*((4^1)*3)
(2^(4-1))*3
((3+2)+1)*4
(3+(2+1))*4
((3*2)*1)*4
(3*(2*1))*4
((3*2)*(1*4))
3*((2*1)*4)
3*(2*(1*4))
((3*2)/1)*4
(3*(2/1))*4
3*((2/1)*4)
((3*2)/(1/4))
3*(2/(1/4))
((3*2)^1)*4
(3*(2^1))*4
3*((2^1)*4)
3/(2^(1-4))
((3*2)*4)*1
(3*(2*4))*1
((3*2)*(4*1))
3*((2*4)*1)
3*(2*(4*1))
((3*2)*4)/1
(3*(2*4))/1
((3*2)*(4/1))
3*((2*4)/1)
3*(2*(4/1))
((3*2)*4)^1
(3*(2*4))^1
((3*2)*(4^1))
3*((2*4)^1)
3*(2*(4^1))
3*(2^(4-1))
((3+1)+2)*4
(3+(1+2))*4
((3+1)*(2+4))
((3*1)*2)*4
(3*(1*2))*4
((3*1)*(2*4))
3*((1*2)*4)
3*(1*(2*4))
((3/1)*2)*4
((3/1)*(2*4))
(3/(1/2))*4
3/(1/(2*4))
3/((1/2)/4)
((3^1)*2)*4
((3^1)*(2*4))
((3+1)*(4+2))
((3*1)*4)*2
(3*(1*4))*2
((3*1)*(4*2))
3*((1*4)*2)
3*(1*(4*2))
((3/1)*4)*2
((3/1)*(4*2))
(3/(1/4))*2
3/(1/(4*2))
3/((1/4)/2)
((3^1)*4)*2
((3^1)*(4*2))
((3*4)*1)*2
(3*(4*1))*2
((3*4)*(1*2))
3*((4*1)*2)
3*(4*(1*2))
((3*4)/1)*2
(3*(4/1))*2
3*((4/1)*2)
((3*4)/(1/2))
3*(4/(1/2))
((3*4)^1)*2
(3*(4^1))*2
3*((4^1)*2)
((3*4)*2)*1
(3*(4*2))*1
((3*4)*(2*1))
3*((4*2)*1)
3*(4*(2*1))
((3*4)*2)/1
(3*(4*2))/1
((3*4)*(2/1))
3*((4*2)/1)
3*(4*(2/1))
((3*4)*2)^1
(3*(4*2))^1
((3*4)*(2^1))
3*((4*2)^1)
3*(4*(2^1))
((4+2)*(3+1))
4*((2+3)+1)
4*(2+(3+1))
((4*2)*3)*1
(4*(2*3))*1
((4*2)*(3*1))
4*((2*3)*1)
4*(2*(3*1))
((4*2)*3)/1
(4*(2*3))/1
((4*2)*(3/1))
4*((2*3)/1)
4*(2*(3/1))
((4*2)*3)^1
(4*(2*3))^1
((4*2)*(3^1))
4*((2*3)^1)
4*(2*(3^1))
((4+2)*(1+3))
4*((2+1)+3)
4*(2+(1+3))
((4*2)*1)*3
(4*(2*1))*3
((4*2)*(1*3))
4*((2*1)*3)
4*(2*(1*3))
((4*2)/1)*3
(4*(2/1))*3
4*((2/1)*3)
((4*2)/(1/3))
4*(2/(1/3))
((4*2)^1)*3
(4*(2^1))*3
4*((2^1)*3)
4*((3+2)+1)
4*(3+(2+1))
((4*3)*2)*1
(4*(3*2))*1
((4*3)*(2*1))
4*((3*2)*1)
4*(3*(2*1))
((4*3)*2)/1
(4*(3*2))/1
((4*3)*(2/1))
4*((3*2)/1)
4*(3*(2/1))
((4*3)*2)^1
(4*(3*2))^1
((4*3)*(2^1))
4*((3*2)^1)
4*(3*(2^1))
4*((3+1)+2)
4*(3+(1+2))
((4*3)*1)*2
(4*(3*1))*2
((4*3)*(1*2))
4*((3*1)*2)
4*(3*(1*2))
((4*3)/1)*2
(4*(3/1))*2
4*((3/1)*2)
((4*3)/(1/2))
4*(3/(1/2))
((4*3)^1)*2
(4*(3^1))*2
4*((3^1)*2)
4*((1+3)+2)
4*(1+(3+2))
((4*1)*3)*2
(4*(1*3))*2
((4*1)*(3*2))
4*((1*3)*2)
4*(1*(3*2))
((4/1)*3)*2
((4/1)*(3*2))
(4/(1/3))*2
4/(1/(3*2))
4/((1/3)/2)
((4^1)*3)*2
((4^1)*(3*2))
((4-1)*(2^3))
4*((1+2)+3)
4*(1+(2+3))
((4*1)*2)*3
(4*(1*2))*3
((4*1)*(2*3))
4*((1*2)*3)
4*(1*(2*3))
((4/1)*2)*3
((4/1)*(2*3))
(4/(1/2))*3
4/(1/(2*3))
4/((1/2)/3)
((4^1)*2)*3
((4^1)*(2*3))
#
]]></test_input>
<test_output><![CDATA[1+1
1
1+1+1+1
(1+2+3)*4
(1+2+3)*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*3*4
1*2*4*3
1*2*4*3
1*2*4*3
1*2*4*3
1*2*4*3
(1+3+2)*4
(1+3+2)*4
(1+3)*(2+4)
1*3*2*4
1*3*2*4
1*3*2*4
1*3*2*4
1*3*2*4
(1+3)*(4+2)
1*3*4*2
1*3*4*2
1*3*4*2
1*3*4*2
1*3*4*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*3*2
1*4*2*3
1*4*2*3
1*4*2*3
1*4*2*3
1*4*2*3
(2+1+3)*4
(2+1+3)*4
2*1*3*4
2*1*3*4
2*1*3*4
2*1*3*4
2*1*3*4
2/1*3*4
2/1*3*4
2/(1/3)*4
2/(1/(3*4))
2/(1/3/4)
2^1*3*4
2^1*3*4
2*1*4*3
2*1*4*3
2*1*4*3
2*1*4*3
2*1*4*3
2/1*4*3
2/1*4*3
2/(1/4)*3
2/(1/(4*3))
2/(1/4/3)
2^1*4*3
2^1*4*3
(2+3+1)*4
(2+3+1)*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3*1*4
2*3/1*4
2*3/1*4
2*3/1*4
2*3/(1/4)
2*3/(1/4)
(2*3)^1*4
2*3^1*4
2*3^1*4
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4*1
2*3*4/1
2*3*4/1
2*3*4/1
2*3*4/1
2*3*4/1
(2*3*4)^1
(2*3*4)^1
2*3*4^1
2*(3*4)^1
2*3*4^1
2^3*(4-1)
(2+4)*(3+1)
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3*1
2*4*3/1
2*4*3/1
2*4*3/1
2*4*3/1
2*4*3/1
(2*4*3)^1
(2*4*3)^1
2*4*3^1
2*(4*3)^1
2*4*3^1
(2+4)*(1+3)
2*4*1*3
2*4*1*3
2*4*1*3
2*4*1*3
2*4*1*3
2*4/1*3
2*4/1*3
2*4/1*3
2*4/(1/3)
2*4/(1/3)
(2*4)^1*3
2*4^1*3
2*4^1*3
2^(4-1)*3
(3+2+1)*4
(3+2+1)*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2*1*4
3*2/1*4
3*2/1*4
3*2/1*4
3*2/(1/4)
3*2/(1/4)
(3*2)^1*4
3*2^1*4
3*2^1*4
3/2^(1-4)
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4*1
3*2*4/1
3*2*4/1
3*2*4/1
3*2*4/1
3*2*4/1
(3*2*4)^1
(3*2*4)^1
3*2*4^1
3*(2*4)^1
3*2*4^1
3*2^(4-1)
(3+1+2)*4
(3+1+2)*4
(3+1)*(2+4)
3*1*2*4
3*1*2*4
3*1*2*4
3*1*2*4
3*1*2*4
3/1*2*4
3/1*2*4
3/(1/2)*4
3/(1/(2*4))
3/(1/2/4)
3^1*2*4
3^1*2*4
(3+1)*(4+2)
3*1*4*2
3*1*4*2
3*1*4*2
3*1*4*2
3*1*4*2
3/1*4*2
3/1*4*2
3/(1/4)*2
3/(1/(4*2))
3/(1/4/2)
3^1*4*2
3^1*4*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4*1*2
3*4/1*2
3*4/1*2
3*4/1*2
3*4/(1/2)
3*4/(1/2)
(3*4)^1*2
3*4^1*2
3*4^1*2
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2*1
3*4*2/1
3*4*2/1
3*4*2/1
3*4*2/1
3*4*2/1
(3*4*2)^1
(3*4*2)^1
3*4*2^1
3*(4*2)^1
3*4*2^1
(4+2)*(3+1)
4*(2+3+1)
4*(2+3+1)
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3*1
4*2*3/1
4*2*3/1
4*2*3/1
4*2*3/1
4*2*3/1
(4*2*3)^1
(4*2*3)^1
4*2*3^1
4*(2*3)^1
4*2*3^1
(4+2)*(1+3)
4*(2+1+3)
4*(2+1+3)
4*2*1*3
4*2*1*3
4*2*1*3
4*2*1*3
4*2*1*3
4*2/1*3
4*2/1*3
4*2/1*3
4*2/(1/3)
4*2/(1/3)
(4*2)^1*3
4*2^1*3
4*2^1*3
4*(3+2+1)
4*(3+2+1)
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2*1
4*3*2/1
4*3*2/1
4*3*2/1
4*3*2/1
4*3*2/1
(4*3*2)^1
(4*3*2)^1
4*3*2^1
4*(3*2)^1
4*3*2^1
4*(3+1+2)
4*(3+1+2)
4*3*1*2
4*3*1*2
4*3*1*2
4*3*1*2
4*3*1*2
4*3/1*2
4*3/1*2
4*3/1*2
4*3/(1/2)
4*3/(1/2)
(4*3)^1*2
4*3^1*2
4*3^1*2
4*(1+3+2)
4*(1+3+2)
4*1*3*2
4*1*3*2
4*1*3*2
4*1*3*2
4*1*3*2
4/1*3*2
4/1*3*2
4/(1/3)*2
4/(1/(3*2))
4/(1/3/2)
4^1*3*2
4^1*3*2
(4-1)*2^3
4*(1+2+3)
4*(1+2+3)
4*1*2*3
4*1*2*3
4*1*2*3
4*1*2*3
4*1*2*3
4/1*2*3
4/1*2*3
4/(1/2)*3
4/(1/(2*3))
4/(1/2/3)
4^1*2*3
4^1*2*3
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[去掉双斜杠注释]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
<table border="0" width="100%" background="images/table_back.jpg">
    <tbody>
        <tr>
            <td>
            <p><font size="3" face="Times New Roman">将C程序代码中的双斜杠注释去掉。</font></p>
            </td>
        </tr>
    </tbody>
</table>
</p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据中含有一些符合C++语法的代码行。需要说明的是，为了方便编程，规定双斜杠注释内容不含有双引号,源程序中没空行。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出不含有双斜杠注释的C++代码，除了注释代码之外，原语句行格式不变。 </font></p>]]></output>
<sample_input><![CDATA[//======================
// simplest program
//======================
#include
using namespace std;
//----------------------
int main(){
  cout<<”hello world!\n”;
}//---------------------

]]></sample_input>
<sample_output><![CDATA[#include
using namespace std;
int main(){
  cout<<”hello world!\n”;
}

]]></sample_output>
<test_input><![CDATA[// Borland C++ - (C) Copyright 1991 by Borland International
// FIGDEMO.CPP -- Exercise in Getting Started
// demonstrates the Figures toolbox by extending it with
// a new type Arc.
// Link with FIGURES.OBJ and GRAPHICS.LIB
#include "figures.h"
#include <graphics.h>
#include <conio.h>
class Arc : public Circle {
   int StartAngle;
   int EndAngle;
public:
// constructor
   Arc(int InitX, int InitY, int InitRadius, int InitStartAngle, int
       InitEndAngle) : Circle (InitX, InitY, InitRadius) {
       StartAngle = InitStartAngle; EndAngle = InitEndAngle;}
   void Show();  // these functions are virtual in Point
   void Hide();
};
// Member functions for Arc
void Arc::Show() 
{
   Visible = true;
   arc(X, Y, StartAngle, EndAngle, Radius);
}
void Arc::Hide()
{
   int TempColor;
   TempColor = getcolor();
   setcolor (getbkcolor());
   Visible = false;
   // draw arc in background color to hide it
   arc(X, Y, StartAngle, EndAngle, Radius);
   setcolor(TempColor);
}
int main()   // test the new Arc class
{
   int graphdriver = DETECT, graphmode;
   initgraph(&graphdriver, &graphmode, "..\\bgi");
   Circle ACircle(151, 82, 50);
   Arc AnArc(151, 82, 25, 0, 190);
   // you first drag an arc using arrow keys (5 pixels per key)
   // press Enter when tired of this!
   // Now drag a circle (10 pixels per arrow key)
   // Press Enter to end FIGDEMO.
   AnArc.Drag(5);   // drag increment is 5 pixels
   AnArc.Hide();
   ACircle.Drag(10); // now each drag is 10 pixels
   closegraph();
   return 0;
}]]></test_input>
<test_output><![CDATA[#include "figures.h"
#include <graphics.h>
#include <conio.h>
class Arc : public Circle {
   int StartAngle;
   int EndAngle;
public:
   Arc(int InitX, int InitY, int InitRadius, int InitStartAngle, int
       InitEndAngle) : Circle (InitX, InitY, InitRadius) {
       StartAngle = InitStartAngle; EndAngle = InitEndAngle;}
   void Show();  
   void Hide();
};
void Arc::Show() 
{
   Visible = true;
   arc(X, Y, StartAngle, EndAngle, Radius);
}
void Arc::Hide()
{
   int TempColor;
   TempColor = getcolor();
   setcolor (getbkcolor());
   Visible = false;
   
   arc(X, Y, StartAngle, EndAngle, Radius);
   setcolor(TempColor);
}
int main()   
{
   int graphdriver = DETECT, graphmode;
   initgraph(&graphdriver, &graphmode, "..\\bgi");
   Circle ACircle(151, 82, 50);
   Arc AnArc(151, 82, 25, 0, 190);
   
   
   
   
   AnArc.Drag(5);   
   AnArc.Hide();
   ACircle.Drag(10); 
   closegraph();
   return 0;
}]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[去掉空格]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">读入一些字符串，将其中的空格去掉。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入为多行，每行为一个字符串，字符串只由字母、数字和空格组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每行输入，输出转换后的字符串。</font></p>]]></output>
<sample_input><![CDATA[
Hello World
1 2 3
Nice to meet you
abc
]]></sample_input>
<sample_output><![CDATA[HelloWorld
123
Nicetomeetyou
abc

]]></sample_output>
<hint><![CDATA[<p><font face="Times New Roman">用scanf是不能读入一行有空格的字符串的，用gets吧。 用&ldquo;gets(str) != NULL&rdquo;可以判断输入是否结束，如果此条件为假（即gets(str) == NULL），则表示输入结束（对于本题）。</font></p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[发工资咯]]></title>
<time_limit unit="s"><![CDATA[1000]]></time_limit>
<memory_limit unit="mb"><![CDATA[65536]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">作为吉大的老师，最盼望的日子就是每月的9号了，因为这一天是发工资的日子，养家糊口就靠它了，呵呵 <br />
但是对于学校财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡老师最近就在考虑一个问题：如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？ <br />
这里假设老师的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示老师的人数，然后是n个老师的工资。 <br />
n=0表示输入的结束，不做处理。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</font></p>]]></output>
<sample_input><![CDATA[3 1 2 3
0]]></sample_input>
<sample_output><![CDATA[4]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[取石子游戏]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 </font></p>]]></output>
<sample_input><![CDATA[2	1
]]></sample_input>
<sample_output><![CDATA[0
]]></sample_output>
<test_input><![CDATA[2	1
0	8
8	4
4	7
6	10
62471	38609
6371	38609
5506    8909
999999973	618033972
618033888       999999999
618033988       999999999]]></test_input>
<test_output><![CDATA[0
1
1
0
0
0
1
0
0
1
0
]]></test_output>
<test_input><![CDATA[0	8
8	4
]]></test_input>
<test_output><![CDATA[1
1
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[软件学院]]></source>
</item>
<item>
<title><![CDATA[哥德巴赫曾猜测]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">德国数学家哥德巴赫曾猜测：任何大于6的偶数都可以分解成两个素数（素数对）的和。但有些偶数可以分解成多种素数对的和，如：  10=3+7，10=5+5，即10可以分解成两种不同的素数对</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入任意的&gt;6的正偶数(&lt;32767)</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">试求给出的偶数可以分解成多少种不同的素数对（注：  A+B与B+A认为是相同素数对）</font></p>]]></output>
<sample_input><![CDATA[1234
]]></sample_input>
<sample_output><![CDATA[25
]]></sample_output>
<test_input><![CDATA[98]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[26864]]></test_input>
<test_output><![CDATA[213]]></test_output>
<test_input><![CDATA[9886]]></test_input>
<test_output><![CDATA[101]]></test_output>
<test_input><![CDATA[1048]]></test_input>
<test_output><![CDATA[19]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[回文串]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">回文串是从左到右或者从右到左读起来都一样的字符串，试编程判别一个字符串是否为回文串。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入一个字符串。串长度&lt;255.</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">判别输入的字符串是否为回文串，是输出&quot;Y&quot;,否则输出&quot;N&quot;。</font></p>]]></output>
<sample_input><![CDATA[abcba
]]></sample_input>
<sample_output><![CDATA[Y
]]></sample_output>
<test_input><![CDATA[asdfg]]></test_input>
<test_output><![CDATA[N]]></test_output>
<test_input><![CDATA[89077098]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<test_input><![CDATA[fdsf{{}}{{}}fsdf]]></test_input>
<test_output><![CDATA[N]]></test_output>
<test_input><![CDATA[123456789abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba987654321123456789abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba987654321123456789abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba987654321]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<test_input><![CDATA[a]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[回文数(一)]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。 <br />
给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。 <br />
例如：87则有： <br />
STEP1: 87+78=165 <br />
STEP2: 165+561=726 <br />
STEP3: 726+627=1353 <br />
STEP4: 1353+3531=4884 <br />
编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。 <br />
</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行一个正整数L,代表测试数据的组数。 <br />
接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数； <br />
</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。</font></p>]]></output>
<sample_input><![CDATA[3
12
87
89

]]></sample_input>
<sample_output><![CDATA[1
4
0

]]></sample_output>
<test_input><![CDATA[12
12
87
89
100
31
69
78
79
85
86
96
97]]></test_input>
<test_output><![CDATA[1
4
0
1
1
4
4
6
2
3
4
6]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[多输入输出练习1]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">给定很多行数据,要求输出每一行的最大值.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">程序有多行输入,每一行以0结束. </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">有多行输出,对应输入的行数.</font></p>]]></output>
<sample_input><![CDATA[23 -456 33 78 0
43 23 987 66 -137 324 0
544 27 7 9 102 234 -44 -732 723 0]]></sample_input>
<sample_output><![CDATA[78
987
723]]></sample_output>
<test_input><![CDATA[23 -456 33 78 0
43 23 987 66 -137 324 0
544 27 7 9 102 234 -44 -732 723 0]]></test_input>
<test_output><![CDATA[78
987
723]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[多输入输出练习2]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">已之一个圆的半径,求面积.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入有多行,第一行是一个整数n(对应总行数),以下每一行只有一个浮点数(对应一个圆的半径).</font></p>]]></input> 
<output><![CDATA[<font size="3" face="Times New Roman"> 输出有多行,每一行是跟输入对应面积.  <br />
输出保留6位小数</font>]]></output>
<sample_input><![CDATA[4
3.14
2.13
6
5.3]]></sample_input>
<sample_output><![CDATA[30.973933
14.252671
113.094000
88.244735]]></sample_output>
<test_input><![CDATA[4
3.14
2.13
6
5.3
]]></test_input>
<test_output><![CDATA[30.973935
14.252673
113.094000
88.244741
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[大小写转换]]></title>
<time_limit unit="s"><![CDATA[1000]]></time_limit>
<memory_limit unit="mb"><![CDATA[65536]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">读入一些字符串，将其中的小写字母转成大写字母（其他字符不变）。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入为多行，每行为一个字符串，字符串只由字母和数字组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每行输入，输出转换后的字符串。</font></p>]]></output>
<sample_input><![CDATA[Hello
ICPC2004
12345abcde]]></sample_input>
<sample_output><![CDATA[HELLO
ICPC2004
12345ABCDE]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[字符串的修改]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>设A和B是两个字符串。我们要用最少的字符操作次数，将字符串A转换为字符串B。这里所说的字符操作共有三种： <br />
<br />
1. 删除一个字符； <br />
2. 插入一个字符； <br />
3. 将一个字符改为另一个字符。 <br />
对任给的两个字符串A和B，计算出将字符串A变换为字符串B所用的最少字符操作次数。</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行为字符串A；第二行为字符串B；字符串A和B的长度均小于200。 </font></p>]]></input> 
<output><![CDATA[<p>只有一个正整数，为最少字符操作次数。</p>]]></output>
<sample_input><![CDATA[sfdxbqw
gfdgw

]]></sample_input>
<sample_output><![CDATA[4
]]></sample_output>
<test_input><![CDATA[sfdxbqw
gfdgw]]></test_input>
<test_output><![CDATA[4
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院
吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[字符串问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">字符串处理在计算机中有很多复杂的操作，但是这些复杂的操作都是由基本的字符串操作复合而成，要求编写一字符串颠倒的程序，把字符串中的字符颠倒位置。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入一字符串（&lt;255）</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">按位进行颠倒的结果。</font></p>]]></output>
<sample_input><![CDATA[COMPUTER
]]></sample_input>
<sample_output><![CDATA[RETUPMOC]]></sample_output>
<test_input><![CDATA[1101001]]></test_input>
<test_input><![CDATA[mnbvcxzasdfghjklpoiuytrewq]]></test_input>
<test_output><![CDATA[1001011]]></test_output>
<test_input><![CDATA[asdfghjklpoiuytrewq]]></test_input>
<test_output><![CDATA[qwertyuioplkjhgfdsazxcvbnm]]></test_output>
<test_input><![CDATA[QWERTYUIOP+_)(*&^%$#@!]]></test_input>
<test_output><![CDATA[qwertyuioplkjhgfdsa]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[字符排列问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有n个字母，列出由该字母组成的字符串的全排列（相同的排列只计一次）。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">第一行输入是字母个数n，1&lt;=n&lt;=20。接下来一行输入的是待排列的n个字母。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">计算出的n 个字母的所有不同排列总数</font></p>]]></output>
<sample_input><![CDATA[4
aacc

]]></sample_input>
<sample_output><![CDATA[6]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[孤独的骑士]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">任务很简单. 确定国际象棋棋盘上处于骑士攻击之下的格子个数. 棋盘上没有其它棋子. 骑士的走法: 横(纵)向走两个格, 再纵(横)向走一个格(类似于中国象棋中的马).</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">第一行为测试次数N, 1 &le; N &le; 100. <br />
后面N行每行包含一个坐标表示骑士的位置. <br />
字母表示横向位置, 数字表示纵向位置. <br />
</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">输出N行. 每行一个整数, 表示骑士可攻击的格子个数.</font></p>]]></output>
<sample_input><![CDATA[3
a1
d4
g6

]]></sample_input>
<sample_output><![CDATA[2
8
6

]]></sample_output>
<test_input><![CDATA[7
a1
a7
f8
b7
d2
e4
h3]]></test_input>
<test_output><![CDATA[2
3
4
4
6
8
4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[密码截获]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Catcher是MCA国的情报员，他工作时发现敌国会用一些对称的密码 进行通信，比如像这些ABBA，ABA，A，123321，但是他们有时会在开始或结束时加入一些无关的字符以防止别国破解。比如进行下列变化 ABBA-&gt;12ABBA,ABA-&gt;ABAKK,123321-&gt;51233214　。因为截获的串太长了，而且存在多种可能的情况 （abaaab可看作是aba,或baaab的加密形式），Cathcer的工作量实在是太大了，他只能向电脑高手求助，你能帮Catcher找出最长的 有效密码串吗？ </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">测试数据有若干行字符串，包括字母，数字，符号。（字母区分大小写） </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">与输入相对应每一行输出一个整数，代表最长有效密码串的长度。</font></p>]]></output>
<sample_input><![CDATA[ABBA
12ABBA
A
ABAKK
51233214
abaaab]]></sample_input>
<sample_output><![CDATA[4
4
1
3
6
5]]></sample_output>
<test_input><![CDATA[ABBA
12ABBA
A
ABAKK
51233214
abaaab
ABBA12ABBA
ACA
12ABBAabcdeabceeddgwfsdfgewffffgggggggggggswees123456789abcdefggfedcba98765432123sdf84653f51
Abaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaab51233214
ABAKK512332141111111111111111111111111111111111111abaaab
51233214ABBA12ABBA51233214ABBA12ABBA51233214ABBA12ABBA51233214ABBA12ABBA51233214ABBA12ABBA
48654321413513544113515521..1200000051.3313633333333333333451321.0854843231003223
23332324554556fadsgfgfgghhghjjjjjjjjjjjjjjjhghryhnmhjkjhkaerttertertertertertertertertertertrtrtrrerer
fdfdfdfsdfsdfsdfdfdsfsdfsdfdgfgfgfggfgfgfgfgfgfgffgfgfgfgfgfgfgfgfgfgf34535]]></test_input>
<test_output><![CDATA[4
4
1
3
6
5
4
3
32
45
37
6
14
21
28]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[小明A+B]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">小明今年3岁了, 现在他已经能够认识100以内的非负整数,  并且能够进行100以内的非负整数的加法计算. 对于大于等于100的整数, 小明仅保留该数的最后两位进行计算, 如果计算结果大于等于100,  那么小明也仅保留计算结果的最后两位. 例如, 对于小明来说: 1) 1234和34是相等的 2) 35+80=15 给定非负整数A和B,  你的任务是代表小明计算出A+B的值.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据的第一行为一个正整数T, 表示测试数据的组数. 然后是T组测试数据. 每组测试数据包含两个非负整数A和B(A和B均在int型可表示的范围内). </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组测试数据, 输出小明A+B的结果.</font></p>]]></output>
<sample_input><![CDATA[2
35 80
15 1152]]></sample_input>
<sample_output><![CDATA[15
67]]></sample_output>
<test_input><![CDATA[5
1234 5678
4567 9876
12 10
4389 3245
6723 453
]]></test_input>
<test_output><![CDATA[12
43
22
34
76
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[平方和与立方和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出一行，应包括两个整数x和y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。 <br />
你可以认为32位整数足以保存结果。</font></p>]]></output>
<sample_input><![CDATA[1 3
2 5

]]></sample_input>
<sample_output><![CDATA[4 28
20 152

]]></sample_output>
<test_input><![CDATA[12 97
52 58
53 133
64 114
9 54
29 92
15 76
47 86
31 63
40 135
45 133
58 129
67 151
74 111
32 131
85 169
2 40
17 45
63 93
16 29
26 57
57 63
26 45
38 136
25 26
83 90
8 13
39 114
87 172
80 150
97 120
5 88
99 121
37 69
80 92
25 83
49 97
42 71
44 53
86 124
25 26
81 82
78 130
76 137
14 32
43 127
68 146
81 145
2 39
14 30
2 27
90 174
79 175
83 117
68 98
91 150
31 63
36 112
54 85
69 96
46 128
62 142
45 110
14 39
12 96
48 130
31 100
12 103
15 90
80 100
99 181
51 113
44 138
48 81
36 77
19 94
85 162
37 93
29 111
2 71
27 89
37 66
66 111
90 169
57 143
34 122
35 100
68 114
62 149
15 85
24 106
25 29
31 34
69 83
19 50
47 140
49 120
83 140
8 59
24 73
]]></test_input>
<test_output><![CDATA[151876 11524645
12120 500445
367280 39384477
211796 19012625
27600 1061657
129984 8876160
75516 4164075
92440 6276600
36704 1995103
400160 42438528
376904 39829725
326904 34283304
523684 64347823
163096 15918903
369700 37814300
702100 98172397
11480 319599
14364 551025
92380 7911072
3500 92897
28256 1356768
10808 867600
12580 502200
420100 42497847
676 15625
30296 2549384
308 4257
243580 20848472
753188 102558483
491640 58157225
143144 15301872
117460 7494228
133540 16160760
46304 2790397
51884 3834396
92684 6180300
132496 10864225
48160 2969415
11560 594125
223160 22713075
676 15625
6724 531441
298584 31071664
358236 41160653
5620 126063
328132 33161815
479280 54119637
419520 51672753
9880 319599
4596 96272
3276 76635
775720 106372728
811040 115305967
171632 18581400
111584 8855685
448220 55076400
36704 1995103
233324 19456228
77536 5773600
97356 7943012
342580 32991183
449524 48972240
212740 17830197
9516 314847
151876 10611972
357364 35034049
166740 12396475
181884 14617972
125020 8194472
89540 7379100
826560 125614440
218364 20328128
434336 44861453
71264 4986865
68936 4415733
141740 9744112
619424 79865253
125608 9547525
223860 19589220
59640 3357935
114204 8142272
41680 2161125
182160 17295103
686960 96194800
456488 52514000
304140 27521208
164560 12330747
203344 18437237
513480 61429544
101780 6831000
202132 15736825
1460 59697
2180 65728
40544 3550112
20960 767584
449884 47455947
275640 25253424
371896 42365259
34164 1618604
62800 3705625
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[年会]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">背景  <br />
某大学校长准备开一次年会. 该校的员工具有等级结构, 即师生关系构成一棵树, 以校长为树根. 员工号是1到N之间的整数. 人事部门把所有员工按活跃度排序. 为了让年会使所有参加者都玩的高兴, 校长不想让任何一个员工和他/她的直接导师同时被邀请.  <br />
<br />
你的任务是列一张客人名单, 以使客人活跃度最大. </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行是一个整数N. 1 &le; N &le; 6000.  <br />
接着的N行包含相应员工的活跃度.活跃度是一个-128到127之间的整数.  <br />
其后是师生关系表. 每行有如下形式:  <br />
L K  <br />
表示第K个员工是第L个的直接导师.  <br />
输入以  <br />
0 0  <br />
结束.</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出是客人最大总活跃度.</font></p>]]></output>
<sample_input><![CDATA[7
1
1
1
1
1
1
1
1 3
2 3
6 4
7 4
4 5
3 5
0 0]]></sample_input>
<sample_output><![CDATA[5]]></sample_output>
<test_input><![CDATA[10
-48
33
47
54
-4
-58
3
-85
8
-96
2	4
9	4
6	9
3	6
8	6
10	3
1	6
7	8
5	1
0	0]]></test_input>
<test_output><![CDATA[104]]></test_output>
<test_input><![CDATA[1000
-36
-6
77
-2
-33
-114
-8
7
-25
82
93
7
-104
101
-19
58
-109
-5
-34
-110
82
-80
43
-87
82
28
-36
-7
120
-89
-121
79
-82
-98
23
125
-51
-121
-52
79
-65
-78
-125
-63
-27
17
56
111
-74
73
-55
77
-87
9
-4
-104
85
-101
-60
13
-41
-71
-64
88
117
-95
5
-49
-127
108
29
96
127
-101
79
-56
-118
-13
33
6
-13
-117
28
16
44
35
-49
-60
-28
-73
23
33
116
84
-99
-73
122
43
-97
92
-61
-28
-12
33
111
52
74
-123
79
-78
-77
-24
-110
-26
96
66
-95
-93
-85
20
71
-105
91
-97
21
33
36
85
5
98
110
-115
93
-105
88
122
-42
-90
-5
94
-2
-10
-13
-5
-37
-124
28
74
-47
52
-103
112
-59
101
27
-18
-125
-57
95
24
93
113
-7
-56
21
46
81
83
-2
24
-21
-68
93
105
-21
40
21
-115
-40
-110
-124
124
-96
-64
-88
70
-36
118
-122
-17
86
-23
-52
126
-56
118
-75
81
-25
-108
45
-77
-96
8
54
-79
-94
88
-118
41
28
-127
-127
35
-56
-20
54
100
40
-97
-27
65
16
-79
-104
-78
100
0
3
-89
35
38
-84
-97
-92
-88
79
118
32
113
-128
126
113
127
-110
-46
25
-35
-72
-25
-122
-47
106
100
-107
86
10
52
84
-52
-56
-39
12
-17
-61
3
127
6
112
97
110
92
64
-73
94
-12
125
49
-100
121
117
-9
127
116
-37
1
-19
-62
106
45
32
68
-53
-114
-86
-40
-71
7
-73
-120
99
25
-109
2
18
-6
108
72
11
-25
88
-87
-73
-70
-102
-16
1
-65
33
-37
0
-60
81
-49
-42
111
6
-55
-40
-43
-42
-104
-17
71
-105
74
61
111
33
-28
4
-99
85
86
-60
91
95
-83
-92
71
55
-117
19
34
110
-44
-81
36
39
-85
102
-110
100
-99
-37
-109
-125
27
11
64
8
46
48
-6
-100
102
-26
0
86
20
-116
64
58
-72
-19
110
-1
-67
31
84
22
100
-84
105
-25
-1
-16
-92
94
95
-62
-110
-90
-113
87
-89
52
-61
98
-46
8
-117
-128
83
47
76
-44
-47
-115
-15
-18
-89
-39
-34
-14
-128
-23
37
-10
35
48
-3
-85
-112
-123
112
64
75
37
83
-125
-8
-4
123
74
40
32
46
17
115
-97
-40
-28
-57
122
-1
-128
-1
-15
121
-75
-73
1
-35
14
95
44
55
-76
-113
120
0
-112
-102
-70
77
-80
102
20
70
-20
123
-67
-38
-55
89
0
-79
-99
15
-120
98
-12
9
-38
-25
51
42
35
78
123
27
52
-80
-48
-30
-53
103
123
-74
20
124
-84
17
111
95
100
8
116
-37
-110
-40
52
72
125
-63
-62
3
97
23
-13
27
93
-106
97
77
-116
-10
-74
51
115
-65
39
-72
-101
95
62
-49
126
121
-35
101
-88
-127
-128
-109
22
-122
-62
25
-30
78
35
8
34
-88
8
-66
13
-2
3
23
95
42
85
-30
-1
-118
-79
-110
-33
87
67
54
36
50
-15
-84
-120
0
-31
17
-4
-8
59
123
-111
-6
48
-21
-104
35
59
125
8
-98
-90
-30
33
-67
81
16
79
72
-81
56
81
21
17
-7
-102
-40
39
-45
-8
61
-61
-34
115
52
-31
-68
120
-116
-27
-52
55
-60
35
-96
73
30
-92
-78
-106
-12
39
82
118
79
103
-29
22
-74
-100
71
30
68
68
-104
-112
-2
35
25
-13
99
-119
108
-78
68
-45
5
-65
-43
52
-34
123
5
-74
108
-38
11
123
-45
-62
65
73
86
-75
54
70
17
-80
-2
-1
-22
83
-51
-81
-59
65
-59
-65
-9
-54
11
-119
-3
-56
32
97
111
-58
111
-42
47
104
34
53
-26
7
58
79
-79
-101
-33
124
23
-34
-12
-32
63
-82
-17
-19
95
-77
-24
41
120
67
-17
50
65
-126
-93
-1
96
-50
1
104
-32
90
121
-23
-32
24
71
-93
-120
-35
0
-93
66
-64
107
103
38
-61
-109
-98
-75
-75
26
48
-53
86
-48
126
-49
-67
-124
-21
45
-9
27
-101
6
-15
-33
123
38
-105
25
-127
54
62
-31
53
50
63
53
112
30
-27
73
99
-11
-118
30
-36
-29
-4
86
-59
-77
38
71
-19
-117
-20
78
12
-41
86
101
1
-125
-15
-8
93
109
114
-11
37
26
-99
35
-44
-88
101
-76
-96
3
85
29
-2
92
46
37
104
-41
-46
60
94
-124
96
15
-85
-111
-95
89
-23
-66
-93
-4
71
16
-93
80
-118
-54
48
-69
82
-103
-114
-126
-97
15
89
-34
-109
82
106
83
122
22
-1
61
7
-56
21
-84
-32
12
25
113
94
106
-64
121
-115
68
52
90
123
12
112
44
-81
-76
-19
-102
-9
101
126
56
103
115
120
24
-98
-111
23
-104
75
65
29
125
-16
-113
-68
70
-26
-1
-74
-70
-94
-60
-61
-60
54
50
51
-128
26
118
-44
-106
45
-123
22
-57
-9
82
109
-59
49
68
-9
72
-121
-25
95
94
-100
-30
1
2
79
41
79
-15
61
115
115
-71
-122
-17
54
19
-43
50
32
114
-102
116
-32
-36
-102
-3
-17
-7
-86
-38
113
106
-73
-44
308	133
508	308
597	508
287	308
205	308
175	287
112	175
861	205
908	175
649	287
510	175
829	205
530	287
537	308
522	205
768	537
750	537
195	530
77	537
228	287
219	508
974	175
988	537
495	861
129	495
646	77
711	974
705	112
326	530
273	175
855	829
841	855
189	112
104	287
741	750
286	741
653	508
971	522
28	741
237	129
371	646
720	112
635	597
882	237
686	537
23	286
34	829
539	649
948	974
983	720
961	686
718	537
211	537
815	841
505	510
285	988
48	539
966	768
254	539
608	983
405	948
325	966
217	205
806	28
550	285
296	908
31	741
413	254
788	325
694	195
701	861
858	815
74	34
568	539
813	308
610	741
344	858
891	48
124	112
554	296
825	296
151	961
61	308
726	983
321	228
447	228
418	686
464	649
49	635
880	508
329	554
97	768
402	464
772	287
160	495
373	49
169	861
848	329
6	653
460	254
182	413
640	286
127	537
628	182
459	829
94	891
921	597
398	510
393	151
546	373
907	460
487	649
693	418
517	160
965	94
945	228
620	882
883	237
229	705
295	127
262	61
455	182
993	344
417	262
730	993
435	254
702	321
138	373
84	882
82	285
408	993
53	539
483	718
609	413
454	127
139	883
340	211
338	454
875	402
109	124
43	151
463	718
738	151
657	393
471	610
81	112
389	907
299	459
716	921
824	517
804	340
174	855
681	338
868	273
667	413
209	129
318	711
400	702
938	620
312	273
397	321
496	124
342	841
265	325
466	640
611	393
21	640
531	205
549	983
155	815
76	768
50	701
732	875
695	701
960	211
472	705
799	84
164	49
78	891
548	667
666	286
79	960
421	104
142	169
204	402
210	262
234	531
652	848
247	938
520	205
70	340
462	628
291	908
422	938
976	182
977	530
630	308
336	988
303	539
700	286
223	609
585	318
785	628
355	610
411	945
643	169
221	308
949	175
263	462
88	882
384	263
261	965
593	28
822	155
83	74
981	417
137	464
794	977
446	43
762	286
847	693
467	785
434	891
723	94
998	74
791	858
734	329
396	974
301	398
892	299
745	829
690	611
688	247
538	31
115	342
650	496
501	508
808	804
123	960
648	210
905	389
980	296
839	129
967	195
704	875
176	462
627	53
382	291
399	373
970	726
390	880
834	883
605	609
258	104
525	396
958	531
837	263
239	695
805	265
95	83
201	340
739	829
673	726
919	455
888	537
604	50
527	824
920	593
359	961
865	400
672	237
401	883
275	720
528	471
108	82
431	462
367	312
213	234
499	611
542	175
188	273
962	104
515	861
876	505
703	568
540	919
634	522
564	384
662	263
803	718
529	905
812	326
360	813
278	799
7	673
55	262
810	695
952	467
748	217
140	342
767	634
476	174
575	61
862	720
403	865
786	739
874	741
969	434
840	472
651	228
167	76
798	702
63	726
144	21
985	355
392	213
678	649
96	808
764	945
162	865
19	693
73	630
420	608
765	115
990	510
121	108
128	195
335	662
749	948
902	652
26	701
917	360
856	487
668	74
159	396
381	788
580	907
241	195
897	962
512	810
677	88
713	273
120	635
598	952
989	389
361	296
224	646
997	998
453	883
766	221
30	209
935	539
283	329
596	422
170	217
425	155
14	463
492	530
428	668
987	359
157	749
91	948
186	643
179	627
264	329
934	499
332	608
639	241
626	336
388	124
928	855
504	681
814	765
890	808
60	700
51	726
740	204
929	175
784	643
687	285
42	723
93	455
20	640
243	750
761	308
105	529
679	283
253	705
843	834
372	530
699	874
930	312
378	554
697	549
333	94
477	78
664	142
541	487
637	359
37	666
906	508
298	50
795	527
613	697
571	522
110	841
351	49
276	137
853	902
946	880
753	650
117	223
979	687
645	487
297	97
116	690
721	285
416	371
854	929
691	688
486	734
445	529
366	115
779	51
357	517
177	861
490	974
280	6
629	705
257	970
294	772
751	55
924	734
579	144
13	905
913	169
607	234
323	299
307	333
208	224
915	298
484	211
819	55
560	195
196	906
710	520
348	115
893	605
943	104
173	401
736	550
220	639
443	958
330	381
56	196
614	597
267	906
603	205
119	422
212	61
149	949
826	460
589	716
22	338
52	283
230	138
769	262
363	875
235	392
889	929
894	928
145	546
823	736
452	713
122	861
514	336
655	428
410	219
802	157
914	217
45	167
754	967
349	371
8	434
742	697
406	888
567	490
807	405
565	657
950	529
922	463
461	151
592	967
316	109
867	981
509	974
968	262
202	43
544	359
773	417
572	128
625	626
623	538
480	906
756	296
717	205
518	720
676	694
999	495
433	400
158	572
44	220
621	151
996	807
497	861
72	810
266	51
712	711
758	434
193	30
339	349
543	396
271	538
415	613
358	952
98	37
978	422
659	883
58	807
594	359
226	751
65	620
132	258
685	124
612	159
57	275
586	920
346	634
972	186
256	623
300	329
306	802
852	634
365	433
871	73
197	58
885	115
631	263
268	673
507	517
309	652
682	653
556	740
350	396
449	55
692	825
362	580
899	433
886	935
959	299
439	694
16	237
244	338
600	754
647	635
844	721
774	273
552	779
141	527
168	294
172	968
281	625
374	204
227	966
927	710
770	976
602	78
582	210
944	266
314	897
622	196
47	211
931	899
493	336
473	779
482	686
242	159
192	772
838	540
636	110
387	600
103	874
536	858
207	396
191	296
633	930
547	286
887	48
984	703
863	739
506	773
576	544
811	452
833	946
27	301
203	473
106	460
341	645
152	621
436	924
513	332
282	794
638	907
618	732
790	258
369	300
444	263
992	127
29	351
735	182
67	826
926	387
670	914
553	365
4	513
706	657
214	49
377	839
391	666
290	614
909	692
54	58
475	300
260	538
185	712
41	83
724	847
729	607
994	267
404	764
15	582
1000	560
973	44
584	378
951	837
24	84
616	981
866	158
737	475
345	351
292	681
849	483
423	788
947	679
591	477
557	219
918	340
562	182
414	351
331	550
709	464
581	926
836	554
941	530
783	371
956	815
595	717
674	449
383	103
99	480
136	128
3	729
617	889
873	121
409	956
642	345
458	21
427	616
328	7
375	462
249	709
771	323
441	726
125	37
831	798
430	21
656	620
370	257
277	594
601	109
714	402
474	525
485	622
39	158
59	550
327	413
113	597
310	853
218	149
830	93
832	973
143	891
641	844
92	230
644	611
566	586
797	871
352	373
25	339
315	517
10	584
66	748
859	553
555	906
89	679
860	998
311	592
781	647
12	162
368	899
5	604
590	724
925	175
818	729
252	745
305	282
11	144
534	594
503	103
995	866
561	988
827	804
171	591
516	14
587	972
660	186
85	31
870	22
489	584
270	307
759	670
457	917
901	133
163	863
578	490
502	21
669	116
884	572
376	981
432	157
165	798
903	819
438	1000
36	197
288	941
846	993
986	534
982	226
744	657
64	318
494	278
319	823
412	636
199	223
269	899
75	420
232	650
619	914
821	537
32	639
842	587
187	47
782	144
304	618
255	44
80	522
272	522
835	358
470	520
274	944
222	921
131	989
236	277
911	847
317	918
816	924
747	175
817	433
719	642
215	316
107	986
533	381
851	885
725	768
313	713
356	962
558	637
347	905
937	196
437	411
559	115
955	829
180	172
468	806
429	805
380	623
101	58
936	136
776	861
654	758
231	254
551	234
845	629
850	371
450	338
722	582
708	140
752	10
134	228
683	768
451	807
35	383
570	411
166	267
38	286
696	172
238	490
225	653
789	572
302	891
787	556
757	277
194	106
33	157
118	679
760	866
111	711
523	811
563	586
953	31
881	973
62	186
864	852
279	575
942	323
707	874
665	315
150	636
440	348
763	745
419	455
68	852
932	960
206	356
337	788
200	567
488	589
395	168
658	375
135	316
18	844
394	341
624	145
895	89
663	308
923	400
991	565
755	277
526	604
940	79
524	637
233	920
599	612
606	911
442	264
588	849
245	596
1	813
916	856
521	717
500	990
828	28
100	129
161	740
324	681
778	394
733	571
800	600
963	791
780	341
354	292
320	823
353	717
898	105
904	74
519	981
183	189
216	951
469	82
878	32
632	716
102	917
2	795
715	563
727	765
577	663
90	672
250	141
364	485
148	285
680	224
17	926
583	923
675	109
334	662
407	514
426	35
872	653
465	286
87	733
912	994
114	567
671	843
684	373
448	485
147	652
511	148
877	270
40	836
71	285
545	848
728	711
190	432
184	990
792	889
900	876
532	901
479	715
322	213
46	805
775	301
146	783
259	501
498	98
661	783
777	666
154	261
796	787
379	672
910	319
248	657
130	792
569	650
491	745
9	847
746	754
954	635
939	22
957	364
386	706
478	613
343	415
289	274
879	961
424	186
385	439
801	5
933	38
809	914
86	461
975	36
896	275
615	55
820	90
456	794
153	281
743	257
574	968
731	80
573	130
181	953
293	706
251	444
240	959
535	716
869	629
698	692
284	172
198	786
689	657
69	295
793	517
156	189
964	347
246	297
178	863
857	821
126	825
481	402
0	0]]></test_input>
<test_output><![CDATA[25218]]></test_output>
<test_input><![CDATA[100
50
-75
-92
34
-71
-16
-63
-95
-4
38
104
21
-93
108
37
110
43
91
0
31
-117
31
72
-47
24
-53
-113
89
-90
-17
-10
-24
-16
109
-85
-126
58
-120
-81
-78
52
62
-35
123
34
-40
40
-111
58
-65
36
-54
77
-111
-56
-49
-86
116
114
23
64
-85
43
22
2
103
44
-79
-112
-33
-94
-10
19
-94
-81
10
104
44
-79
98
-126
-72
-58
54
9
86
-112
51
71
61
53
113
69
98
-86
-92
49
74
50
-106
37	72
86	37
35	86
89	35
62	72
21	89
64	21
58	64
74	64
32	62
51	72
79	35
8	58
85	62
11	85
26	8
73	89
60	62
36	62
78	35
63	26
41	63
71	35
94	74
43	94
1	79
16	35
69	85
70	71
67	21
53	64
17	89
29	79
52	36
87	41
23	8
4	73
55	60
83	11
2	21
15	79
34	37
99	21
22	23
97	72
54	22
50	16
96	51
80	72
38	37
84	1
6	52
57	51
31	83
92	70
20	87
48	51
19	71
9	31
100	99
65	89
7	26
59	53
90	38
82	36
24	50
68	73
40	92
10	59
27	52
56	52
93	79
88	97
3	84
91	88
98	7
61	58
45	78
95	71
47	29
28	92
5	23
66	11
49	20
12	2
39	15
44	29
14	12
33	37
75	83
76	29
13	1
42	89
81	70
77	36
30	39
18	2
25	2
46	38
0	0]]></test_input>
<test_output><![CDATA[2374]]></test_output>
<test_input><![CDATA[6000
-84
-4
85
-100
61
-86
104
78
-83
16
82
118
-63
111
-92
115
46
57
88
105
91
-59
-76
-111
105
70
114
-44
113
-2
29
-103
12
-81
-66
-37
25
83
-72
126
-70
12
-15
-29
-96
94
50
-70
-119
-100
-47
23
6
-96
-115
-56
-126
-65
-71
-25
-128
-3
-99
-85
36
124
25
-125
-11
59
-117
102
-31
-3
-13
100
-126
-122
85
-126
-97
13
95
-60
-10
-17
76
-117
56
-95
8
33
86
-24
-107
-109
-5
76
-83
-65
89
-54
-87
-83
41
-55
-95
35
-19
79
-43
115
121
117
75
-104
-79
24
-70
-127
-108
-46
-89
-83
122
40
-50
-8
-103
5
-61
-75
-50
104
-39
-4
-101
89
67
69
108
33
121
54
30
-70
-34
-70
-63
-123
-97
83
-99
59
-34
-79
116
38
16
-125
7
-111
-93
-115
-37
125
-28
-5
61
-107
33
-11
-124
100
10
115
-106
-58
93
83
-82
-100
-61
-87
92
-60
-11
86
-51
73
34
-36
76
-42
-107
112
9
113
-109
81
25
101
-126
89
-65
-128
81
-47
-22
127
19
-118
-2
-57
-19
41
-41
86
51
-61
12
-8
-50
-86
112
-66
-31
-122
-33
-84
-84
-89
55
-78
-80
-103
-92
-34
19
-7
33
-49
71
-120
59
109
-25
126
24
-41
-31
33
-71
-99
-38
-107
124
48
-50
-10
-27
-106
-9
-92
-99
98
-15
-34
-69
-28
27
-109
67
-99
64
116
-20
-11
119
78
39
49
71
-105
92
-97
15
71
119
19
-91
-23
-93
-105
62
-15
85
95
-114
80
-115
-5
48
70
89
-48
71
119
-102
-55
102
66
10
74
-83
78
126
102
53
101
105
81
-81
-122
-94
24
71
53
103
-113
-49
22
-95
-117
25
-70
105
82
-92
-71
-52
80
123
1
-53
12
91
109
-90
90
20
-102
91
-47
49
-10
105
127
-37
25
-39
-36
-5
89
127
-3
-97
-104
126
10
-97
97
10
-14
-128
52
114
93
-104
29
93
-29
115
-117
83
123
118
96
-128
54
-62
69
-75
45
92
64
-80
-73
-118
-120
-99
-32
-128
-104
-35
23
59
-126
5
39
-82
-122
42
105
28
-29
92
55
-59
-19
112
-93
-60
96
3
105
56
-12
-69
35
-94
49
-48
-68
-114
-123
-53
39
118
-108
-114
81
-29
-49
-107
84
-43
72
123
-19
101
-60
-64
48
-87
18
-55
122
-40
-100
40
-88
-82
60
30
-122
18
81
94
-118
-9
17
20
-61
-128
33
38
12
103
99
-70
-123
-97
15
-8
68
56
5
17
71
-124
97
-128
-83
120
80
-112
38
84
35
30
-87
-121
-94
-96
101
-52
-93
102
-7
-102
-37
32
-25
-69
-13
-95
70
58
-34
-30
-72
-125
107
74
-100
-58
22
44
-123
-100
36
-110
-22
-19
-17
57
31
17
126
-36
-125
53
88
-75
-4
1
-102
66
-96
120
72
69
-75
31
-31
14
-36
97
54
-4
-119
50
123
66
-74
-13
-97
-25
-39
-107
-39
17
19
2
-124
-126
-86
-72
44
99
-71
-73
-23
64
38
-98
-21
85
-43
17
87
8
27
93
82
-74
118
95
90
-78
123
-94
-35
-117
15
-57
4
-114
-38
42
-48
-116
-7
-62
105
-34
-13
73
-77
-91
-17
-99
33
86
36
103
-50
119
-112
-6
-54
-93
-19
126
-79
-44
-31
77
-125
-30
117
-99
-81
70
-56
96
113
36
5
104
94
-119
-110
-49
62
-15
-118
-106
25
12
110
-116
-107
-63
23
113
127
116
-17
92
-89
-124
97
90
-15
24
-114
88
-87
28
66
67
23
-122
38
109
83
-34
55
51
91
-3
118
-35
99
21
-31
-59
108
-15
-93
-68
24
126
-120
-87
-67
-117
-77
115
-72
-51
-109
33
4
38
19
64
11
38
17
-123
-69
-45
18
-76
-35
-91
52
-64
-94
-43
100
52
127
-40
-48
-47
59
38
-97
121
71
63
-32
76
77
-16
-63
16
11
-46
2
-42
98
21
-87
-38
-86
123
-10
-84
73
-89
-103
-115
-124
-104
35
28
-107
113
-69
50
-3
123
18
10
27
108
-103
-91
-2
-22
-15
108
120
75
-94
24
115
-97
17
-49
-120
-16
-84
-113
-50
-56
104
-48
-16
-12
109
101
-125
-120
15
-92
-106
35
1
-58
-118
116
-59
-111
36
-3
103
52
-32
23
107
114
-120
55
4
2
6
111
-121
54
119
56
30
-36
-128
110
-63
98
-27
-100
98
61
87
122
104
-118
-114
-76
95
-10
-104
-19
-18
-36
113
4
9
-82
-45
-106
103
-106
79
-60
55
93
-99
54
15
-117
49
95
37
-48
14
3
-63
-94
-33
-9
-14
40
68
41
-127
87
106
-32
35
91
-34
68
-14
56
-93
32
30
-79
-126
-25
-32
105
-95
-11
-80
72
87
24
-72
32
63
79
-120
-112
-117
-47
11
41
-101
81
-70
-48
-49
-127
15
99
-103
-43
61
-96
-42
-119
30
66
94
-27
109
108
-39
-64
53
75
-43
67
-119
-8
22
-17
118
-101
45
-31
54
-42
77
85
-90
97
89
106
-5
-15
65
37
-80
95
-113
-73
-62
6
61
3
32
109
-54
91
93
38
-115
-118
-87
-11
72
24
-1
53
0
-55
-96
120
12
103
-65
110
109
-63
126
8
93
-12
25
-36
42
-23
97
-52
69
31
109
-30
-106
-85
-116
127
19
125
125
-75
-111
-28
-29
-15
-38
85
-13
-35
-1
104
112
-124
-16
35
-39
-72
73
123
-31
-80
111
24
31
-10
-36
89
7
-127
-73
-104
25
29
-88
-81
88
20
-22
-70
-2
7
-94
31
110
29
111
-52
106
96
66
-64
-122
99
112
-51
-36
40
5
-100
2
66
92
-15
57
55
-20
48
-25
40
101
33
72
-76
-4
-16
96
25
2
120
52
-100
-68
-64
57
44
111
-58
13
66
-70
124
101
11
40
17
71
-55
6
113
121
119
114
15
57
-85
-75
-30
46
-63
-45
-83
-97
54
96
-124
-29
82
-108
-116
24
10
-94
2
24
36
70
127
-87
-100
-99
122
-12
71
58
14
57
-74
118
-3
-64
93
7
-10
19
-12
-43
19
106
30
9
-90
103
73
102
53
3
-43
-36
-61
-55
120
90
81
66
-31
-27
-91
-80
-101
-25
74
-2
53
-55
-40
-8
-96
-61
118
-72
-40
-13
-100
96
-58
-83
30
15
102
19
102
13
37
-27
0
73
-115
-102
93
6
35
-81
-48
-47
-112
63
-35
-74
0
-44
-77
-77
-56
125
-9
109
75
32
-61
34
30
18
-17
-33
106
-27
-113
-13
-110
-127
-68
-93
22
118
-104
31
-72
-111
-116
-75
-35
-82
-44
69
53
-52
62
-11
-98
103
46
37
70
2
-26
-90
16
3
4
38
58
-61
76
-17
60
-26
-88
-46
-13
-24
109
93
-2
-7
-32
85
105
11
-7
96
-120
41
103
1
38
10
-45
-55
-32
-26
105
-52
-53
-120
-107
83
93
-91
10
-48
-118
108
9
23
45
94
-32
-54
-86
96
-79
21
-47
14
116
-100
6
83
63
-78
-97
54
-59
-52
-114
-9
30
53
64
91
-58
3
-59
68
-25
73
48
-124
-37
-114
65
-13
-20
126
65
-64
95
-32
46
4
-78
-56
24
-99
33
14
-53
57
111
-2
-82
-79
-30
81
-21
-103
-112
93
-48
21
-39
-120
118
-19
53
2
-96
-28
48
-76
-27
70
-78
115
18
-63
-124
122
-54
117
16
23
111
78
104
-92
70
-110
-118
-71
-43
-74
-29
-96
-112
118
17
9
-75
37
-19
-1
117
65
-55
27
84
74
-10
-8
-46
-44
-118
-26
75
-36
95
-29
28
88
95
-57
7
17
-1
-66
-39
-75
10
-5
73
40
-96
-85
36
28
126
40
-89
-31
-128
112
44
126
99
-43
10
0
-48
-10
-74
18
-106
-19
46
-50
56
-54
-105
-45
-89
65
36
-104
80
-97
59
0
89
2
-45
46
40
-54
33
-102
38
75
115
100
-62
-60
92
-23
-72
-107
17
-107
-109
-84
19
-8
112
65
14
27
6
-61
1
20
-29
18
-96
-40
-8
-18
-9
81
88
-80
79
-80
61
55
85
5
76
38
121
12
26
77
-107
74
-18
100
-49
89
-55
-1
-64
-127
-93
-66
-42
-120
-8
-60
-10
-54
-125
107
102
-116
74
54
-21
-115
-38
8
46
-34
-44
-109
100
-12
-88
18
46
-4
-95
59
-66
110
34
111
60
-27
47
53
104
46
46
-26
-128
-98
-17
-86
100
-87
-21
-94
-8
-79
-55
103
-54
28
39
-76
-11
-87
-106
95
69
4
-26
-114
-101
-104
-91
39
-109
-92
-30
-120
101
-111
54
121
9
-125
6
94
-97
46
2
-78
13
-21
-15
-80
-22
10
-79
83
-101
106
121
-127
-69
72
98
-125
-63
85
38
-71
-36
11
39
-116
34
64
-77
-93
-22
-4
-122
90
118
-120
-112
112
-42
-57
-7
-1
8
-55
99
-78
100
-98
111
50
56
104
-126
-31
-81
-76
-55
-53
-9
11
122
-38
-94
-61
93
73
77
27
-116
90
-128
-120
119
76
-42
73
42
-121
94
65
-45
27
64
6
126
104
-92
54
36
30
-49
10
-28
105
-113
45
-112
101
-38
-50
107
-40
-78
-12
49
32
75
17
88
106
112
-37
-106
37
35
87
-93
-73
-124
54
64
110
-12
101
120
-71
121
-32
38
-104
100
-57
-73
81
50
-77
49
101
-79
74
116
-62
100
17
-63
58
39
-126
120
52
22
95
38
-95
-84
69
-66
50
40
-124
39
-56
53
46
-9
45
-55
110
127
1
78
27
7
-9
0
-115
90
65
-106
-80
-122
72
36
86
-35
-95
64
-46
63
60
100
-62
-100
-33
-109
44
-76
-45
63
-51
33
-34
107
-83
-104
113
13
-9
108
33
-74
8
83
91
116
-58
109
84
-8
51
-126
64
-12
66
-116
-60
-57
-23
117
-83
92
119
33
-30
79
40
-81
-105
82
-10
-4
-60
-48
-77
105
-42
-48
85
-33
-92
27
-111
16
-92
-95
-85
-1
95
25
-116
-62
34
-24
21
-122
-9
68
-77
-43
-45
-103
51
20
17
43
-40
80
31
-2
-85
58
120
-13
19
111
-46
51
-91
-3
-104
-48
61
35
-102
-86
78
89
4
-112
118
-112
-116
-88
86
-69
-16
17
-96
-114
-96
-58
113
-122
-73
-58
-30
41
48
114
-38
-113
87
54
38
33
125
107
-53
-95
-16
124
-102
107
43
72
6
-6
73
-56
51
-83
-64
-14
79
-53
75
-35
37
-58
40
37
-17
-68
-124
-111
108
67
52
-13
51
102
-91
80
71
-21
22
65
-21
-40
4
-103
-72
53
-26
72
-20
18
27
-128
5
-52
33
22
-113
-115
7
42
58
18
37
10
47
-79
10
84
-92
-102
-74
91
-82
93
10
-52
87
-84
124
-110
-15
98
15
-10
-86
-59
-125
11
96
8
-56
73
-74
21
-71
120
103
-119
7
-48
-38
-1
115
94
-9
-111
65
-87
58
-100
-23
-106
5
-60
15
-119
59
56
-75
-51
10
55
-80
54
8
-44
88
4
-126
-10
-124
11
16
-94
-74
17
109
125
-110
120
-122
-116
-107
29
-47
63
3
127
-32
-82
33
36
54
34
-91
56
89
-41
107
120
41
0
105
78
111
12
-27
61
-71
40
-27
-128
102
5
-24
-18
-3
-37
-45
33
-61
-82
46
-41
-116
-48
-112
-104
-47
-89
88
-102
3
-80
-98
-31
31
-60
106
-86
-125
-102
35
10
0
-114
74
-45
48
-96
104
-73
9
-64
68
-80
-77
73
90
-97
-105
-53
-119
51
-71
13
12
12
71
82
-85
32
114
-36
50
94
124
-81
35
-110
18
-105
-88
-119
-35
108
-53
117
84
-107
-23
-110
-44
-53
100
10
-14
31
-103
23
16
63
18
103
46
-11
-4
-60
3
-16
-37
-12
76
-57
124
-34
101
59
43
-17
22
-67
39
-68
-81
48
83
-23
87
-17
46
73
-95
18
5
70
96
-19
104
-124
-67
-38
-38
-63
-122
57
-52
0
-55
-76
-51
-26
-94
-56
-5
100
81
-128
-67
-106
-113
-124
-76
-21
35
83
-18
-121
-80
-51
93
-27
-47
-12
-120
-63
103
-13
-127
53
50
96
23
34
-97
-66
76
-47
-31
70
10
-38
67
-25
17
69
-67
-117
52
-16
-59
-100
-59
48
103
-58
78
-69
-104
-1
-127
-58
-56
-59
114
106
-74
-89
4
76
-120
7
-95
125
27
30
47
-97
-104
65
63
74
72
98
-121
-82
-87
-39
-110
121
-63
101
-74
-5
-78
109
71
-121
-113
-116
10
29
110
77
-20
71
-66
51
-12
65
-37
-3
119
92
-32
39
-117
-92
-67
-76
-67
-63
-119
43
7
27
25
-32
-4
66
-47
116
70
-116
-70
-97
82
0
-43
45
74
114
-81
71
68
-16
54
-12
-71
93
-53
-32
56
92
-104
91
91
112
36
-92
-5
97
36
104
-96
-31
-107
-122
59
111
7
21
24
124
60
-88
14
-52
-15
-48
-7
32
-4
-29
106
18
-105
-4
-100
64
-4
67
-86
-84
50
111
0
99
38
-119
15
93
-3
-14
70
-91
-87
-89
61
-71
-70
-60
51
52
119
71
-70
-86
46
23
-79
-44
-56
69
115
-19
-96
-111
78
91
-106
48
55
-110
95
-52
-69
54
31
-51
57
127
57
-41
79
-30
101
-109
-110
-18
4
-77
-126
116
-79
48
-67
-22
25
-42
114
17
12
3
25
-42
-44
-84
97
118
-59
-96
106
-26
21
17
53
114
-18
80
89
-92
-62
-40
-9
103
-33
-114
-17
108
67
71
84
-51
-79
-117
30
-15
4
-103
31
-81
-60
-86
57
-74
-9
122
-51
44
57
5
118
-107
15
-114
-8
-9
121
-26
115
59
-58
-21
-35
-41
-84
79
-82
-86
-104
-101
-35
39
67
115
12
-74
-122
27
0
87
111
58
83
-119
-108
-34
109
106
-89
-63
-80
31
75
-53
-13
118
38
-41
50
-54
56
-70
-125
40
107
-127
76
-81
107
-5
-76
61
-73
120
87
72
-7
-49
62
9
-109
-90
14
-32
122
-19
127
-12
71
-84
16
26
-117
-1
-6
-8
99
94
98
106
77
34
-46
36
58
69
-22
-103
-27
106
83
28
98
29
-11
69
-6
91
106
-105
54
85
-78
95
58
113
40
-33
84
-110
-76
-84
-43
-103
67
85
32
44
116
69
0
-74
-108
-21
63
-82
-51
24
116
29
-102
-88
28
90
126
100
-20
24
-10
39
102
-93
-84
64
-85
103
-19
24
-112
-78
93
21
-13
-69
-22
-67
80
-30
-2
31
-113
57
-7
110
32
68
-34
-16
74
-3
76
22
-64
27
-79
-19
118
-108
-70
-75
-78
97
14
-50
102
-127
59
-36
-67
64
-16
35
-12
-71
110
51
107
-102
57
-54
-4
39
19
-10
-117
-126
42
122
-34
41
-111
115
-81
-64
-19
59
0
17
113
-114
-81
81
12
-21
74
-92
-32
61
36
-28
-9
-69
-87
-98
49
13
-18
94
-127
-80
-115
45
89
-101
-81
87
99
35
106
114
114
28
78
-101
-72
65
58
3
57
-42
116
-85
127
-117
-7
107
-112
-92
18
57
29
87
40
-88
-4
117
-39
-81
-39
77
76
-84
40
-50
-63
-88
93
-21
108
-35
96
68
-125
117
59
2
-106
-107
22
2
31
-102
102
55
90
-93
97
73
86
79
-75
-126
76
-56
121
-21
49
0
100
-78
-121
58
61
-49
120
-51
-110
-25
37
36
-83
113
60
10
-60
23
-56
36
112
95
78
-65
96
-118
21
-51
79
-67
-59
41
51
94
52
35
-72
-63
124
56
-20
4
81
33
60
55
-111
16
-97
-64
29
54
17
-2
-24
-120
67
45
77
-61
-111
-118
-90
-83
52
-73
26
-98
-71
96
-74
64
-79
31
-65
-109
-85
-99
71
52
95
-5
-1
-34
44
112
76
49
-59
51
-99
-78
39
-101
-5
20
-50
-124
-30
-74
40
-10
79
108
74
1
26
-126
-30
-21
-122
-2
108
-114
23
38
-87
-5
-93
66
77
99
-84
-93
-8
56
-19
-28
104
-113
51
112
-19
-55
110
68
29
114
8
-9
-56
105
117
-9
47
65
12
21
112
-24
21
68
69
-122
35
-99
-18
-88
-92
-89
108
-98
-74
-42
-16
33
60
81
-109
58
49
-8
71
95
61
-90
14
-34
-122
-77
106
127
-55
-66
20
100
-87
-87
-16
53
71
-28
65
122
18
-17
26
72
-31
26
21
32
63
-112
70
20
5
-109
114
43
47
9
125
7
-24
56
34
-59
-25
-50
-25
37
-2
36
79
-21
-16
-61
81
-123
-124
40
9
-19
-41
-60
-82
-47
-10
71
-60
-14
-84
30
-110
-54
-103
58
-41
113
-124
20
-71
-63
-13
-18
-2
-71
-8
91
126
31
77
1
-40
105
-93
-98
101
-34
56
73
106
-7
-88
-5
-110
14
5
77
-101
47
41
-125
79
81
75
-54
-74
-85
-47
-66
-118
95
101
47
-21
92
75
37
84
-125
-14
33
-50
9
-55
-90
99
28
83
-8
-42
-55
126
36
-111
29
49
64
-33
-118
36
-12
91
-115
-12
58
-87
-114
119
97
99
8
77
88
86
-23
-73
41
-17
60
-84
-60
-16
5
42
-2
103
108
-53
-39
-31
30
-104
6
-37
-15
33
-88
121
-57
-50
91
123
-76
112
117
108
99
27
-116
28
-75
56
56
81
-84
-42
25
-70
-120
65
28
36
47
-42
-5
-16
-46
21
3
-59
-50
-8
26
-126
-48
-125
0
119
61
-99
-43
-44
-47
30
-36
97
-122
41
126
112
-73
-68
-110
17
-123
-123
-37
-124
122
-8
-46
-12
108
-98
-90
98
-92
-80
-126
-33
64
-28
14
-2
-42
-121
56
-119
90
-52
52
115
66
100
-63
14
-25
78
-81
126
47
-15
-98
110
105
104
8
1
120
29
-126
11
52
-103
62
-126
13
-102
-43
47
-14
102
67
-87
113
96
51
-124
31
-39
126
-58
58
40
-18
-102
-115
-3
71
73
-108
-14
-120
101
-31
99
110
72
-66
-128
58
-67
20
-96
-76
-4
-117
-39
112
-36
-13
-51
80
68
-29
-58
74
-30
-97
6
107
32
63
88
28
84
14
-21
-91
55
49
96
-17
-103
-119
34
-114
83
-38
-10
-2
124
44
-45
45
-32
113
-13
58
-83
105
42
125
112
-61
119
-57
64
-123
-39
-21
57
-83
99
125
45
24
-109
-39
-107
-92
-32
103
-50
-110
-110
30
-126
46
-42
71
100
-79
18
-124
32
102
118
16
-111
12
-44
72
53
124
-79
107
-33
-117
-100
-98
-84
50
-66
51
56
-20
-77
42
18
96
-104
-8
109
64
101
-120
24
113
125
-128
-80
108
-124
-59
20
-28
113
65
25
-87
-28
-28
127
-52
-71
-24
36
4
-35
90
120
80
96
-42
49
-34
-52
-110
64
44
-74
-99
3
109
-110
105
-68
46
-52
-120
66
57
20
-77
-10
-71
-7
16
-7
-96
-71
-75
-100
70
87
104
24
82
-17
-88
-128
-34
71
-14
-13
-42
-90
61
22
-95
-23
-57
-63
4
-45
19
-7
67
-91
50
31
-119
-18
67
102
-119
-91
54
-117
102
117
-43
-64
-48
88
4
-23
113
103
71
10
-121
-15
-122
0
-46
-54
13
112
-80
-27
-41
-2
-121
37
12
-65
99
113
-56
-16
-32
7
30
-24
75
18
93
75
4
126
-111
-127
38
11
77
102
106
-96
-88
67
73
-29
-122
-2
97
6
25
-115
26
-29
-89
-80
-119
76
-115
-32
-107
-100
-124
-126
88
-110
35
97
-56
96
-91
91
-106
-2
-19
91
86
-60
-57
-121
-31
56
113
-70
-9
37
90
52
41
-19
41
-112
-10
31
1
-9
53
76
3
-108
-77
23
21
71
28
-116
-30
-98
31
-77
34
1
-51
100
28
44
66
92
105
-29
-120
-111
-6
-32
-72
-61
93
17
98
84
59
0
47
89
38
-109
-59
-15
-111
-11
-21
-42
32
-44
-18
49
35
-51
67
-77
93
36
109
-31
9
-71
34
-81
31
55
-87
81
-45
-113
-122
78
94
-91
89
-42
2
72
4
85
72
104
12
72
-115
-125
66
80
-68
97
-94
-124
93
1
123
12
-49
-45
-48
-20
-47
40
-2
29
72
-26
-96
-30
60
-128
-80
89
35
37
-17
80
98
56
-122
91
17
1
-19
35
-2
-94
12
1
-11
76
-96
-52
63
-78
-31
-17
105
-66
98
-66
71
-125
56
10
55
116
94
-14
-86
-45
88
-3
-31
108
23
102
-11
-126
29
-73
26
10
-31
-103
36
23
117
-21
75
-106
102
17
43
59
-28
-113
15
-69
34
-42
110
60
0
93
-74
9
-24
-12
73
-117
-11
86
-59
117
91
-3
-119
62
3
58
117
-44
117
-124
-16
-113
-5
17
48
99
3
-93
-74
91
-58
-91
23
66
39
118
2
-93
-34
5
127
-11
-43
-98
117
15
-46
3
111
-30
87
-65
-97
102
-57
-73
36
-43
-55
2
-120
24
-15
-6
-115
126
-98
-109
41
-76
30
-20
-49
-14
25
36
-16
114
44
111
-62
38
-44
105
64
-86
-114
-86
114
120
60
-102
-18
91
-53
-122
-97
38
19
-12
-59
-91
-2
52
61
-44
-19
56
3
79
87
-90
-11
10
-77
42
-39
66
-103
17
-94
-77
36
20
-17
12
-102
113
-43
-96
79
65
-34
94
-58
5
81
3
26
-126
-76
-114
-100
-49
-112
-12
-66
-84
116
22
48
21
60
-16
72
23
-109
19
-89
-29
-73
85
26
33
125
-57
-66
-122
-108
-25
104
-87
13
23
67
18
27
78
-69
-108
24
14
-102
-34
-55
-106
113
76
-29
88
58
3
-50
-83
59
60
-88
-56
46
-32
-115
-24
-98
86
22
-46
-108
-104
31
127
115
-115
-50
18
33
-109
-47
13
103
90
-26
-61
-101
-7
-95
17
124
59
106
73
93
58
-59
111
-122
48
-42
-88
-41
-119
36
-17
-82
61
-99
10
11
92
-38
-68
-14
-21
-91
61
17
-18
-72
-25
-93
-58
-56
50
-108
-67
-62
-30
-26
-32
85
127
83
13
-80
6
52
76
-115
-34
-95
98
110
13
-38
-92
38
-84
-27
10
-100
-104
121
-124
-52
107
27
-111
14
-85
-121
13
-101
65
81
74
77
44
-52
99
-90
118
43
-51
20
103
-26
47
115
-6
96
116
-44
-115
-58
30
125
-36
58
-35
49
48
49
96
-79
-44
25
107
-126
-55
64
42
-15
-70
-15
-59
85
50
-32
52
-108
13
-57
85
-24
45
82
59
-29
110
57
-55
-79
-37
-85
-128
-98
34
-13
-106
-41
69
86
72
117
-109
58
113
-73
-41
-114
90
-113
-49
101
-44
97
-33
-28
-124
7
7
95
127
24
19
-65
23
106
17
39
-12
-43
8
-41
102
58
-25
80
-7
-60
-68
-72
74
110
38
-127
26
-58
13
70
-95
-16
-112
-11
36
-19
63
51
-54
30
-117
-4
-84
3
122
-118
43
73
-96
121
-122
4
74
40
-84
57
-4
98
78
-97
30
62
57
-90
-14
67
-29
-71
-55
-48
67
-64
119
-69
-26
-22
4
57
64
-87
-92
-2
64
-2
-23
-91
39
-10
56
81
-103
117
122
-107
-12
50
19
-111
-30
3
24
94
42
91
-68
-83
-52
16
12
-86
76
98
-35
39
78
58
2
-10
99
-81
-62
-106
35
-50
-119
19
124
-101
-35
39
73
83
-108
-91
38
-12
68
23
-125
-1
-4
-90
-8
125
49
59
-40
64
-5
-28
9
107
-126
121
19
53
-78
127
118
-23
55
76
65
49
-91
108
-32
-107
-10
68
54
63
58
-11
-20
1
-118
-124
8
-103
62
55
-63
51
96
66
-111
47
96
-94
-115
37
8
74
-14
38
-77
125
0
69
-70
123
11
86
48
95
-49
-10
-49
72
4
-52
49
-73
50
14
68
56
-57
70
-8
69
103
86
58
103
-125
-71
38
-98
45
13
120
3
42
-50
68
-84
73
101
-24
-48
-12
97
62
43
5
4
22
-92
-37
1
-29
46
-84
-124
-76
-20
28
115
102
-104
15
-13
24
37
-68
47
-32
-93
4
85
-68
100
1
-32
-52
93
-31
29
-66
-50
-11
-24
-119
38
5
-73
94
33
-25
-37
-37
51
79
2
-125
41
-23
-1
107
14
-91
-50
53
75
83
-46
66
19
111
98
36
-2
62
-124
82
-12
26
-8
32
77
9
121
-18
54
-107
63
-97
87
-40
-56
77
-77
-41
-40
58
-49
17
-65
10
22
87
-38
48
124
-35
92
-89
98
-110
78
-30
-71
-83
-43
5
107
-120
-76
85
-10
-78
17
-19
90
64
124
-76
54
99
45
-117
46
64
-115
-53
-113
-5
-7
-18
54
21
-62
-116
-82
-7
120
-118
-104
-47
104
-114
80
-98
99
-75
-51
-120
-63
-119
-55
114
-90
45
34
-46
-124
-37
-127
-64
-31
-111
57
77
91
6
114
21
-23
-29
-122
24
99
48
-85
-59
69
12
-45
88
-80
-94
-48
102
-79
88
-68
-74
-58
73
-104
83
-98
-10
51
-33
33
56
77
42
-80
122
-3
4
-82
36
80
79
63
90
51
88
79
-25
-109
103
-41
116
-62
-108
91
-2
29
-35
-72
-121
-20
118
28
11
-119
96
86
-75
-59
61
80
83
-121
99
-39
8
-74
47
-88
64
89
-101
-98
-23
-3
19
76
-31
87
-123
-75
-86
43
-72
85
101
109
-34
98
-2
-91
108
81
-92
-104
41
-100
124
36
-123
-61
-106
108
45
-111
32
53
-36
-96
-39
-112
116
31
-55
-70
77
-45
48
64
-51
92
-68
102
57
-70
-2
-54
-54
15
31
69
4
-90
-49
18
67
53
127
50
-105
95
-48
14
-47
125
75
95
-34
-98
82
75
84
-52
86
-48
75
-110
75
102
110
-69
89
-32
82
91
-43
-108
6
20
111
-69
-21
-110
-83
27
-59
88
-104
-29
19
-65
-75
-42
-100
59
54
-85
75
-31
114
-76
60
38
-109
-65
23
-22
-114
58
-99
-75
89
-102
-128
64
88
-3
120
55
24
13
-109
61
63
40
-51
49
-61
-65
-32
-81
91
-4
93
-38
51
-88
-4
89
-28
75
48
-96
-93
-107
-1
113
-72
-4
17
-94
51
-89
7
32
-38
-117
14
52
101
-44
-77
5
-18
-122
-7
95
-93
100
-88
-78
-66
17
-23
94
-73
117
16
45
-73
98
-71
33
81
119
22
113
109
69
-121
-50
-124
-79
107
-22
19
-103
55
59
73
-69
-59
-3
3
-46
-18
118
-5
1
90
125
60
117
-105
61
-38
71
105
55
-33
-97
97
-122
-120
31
-79
103
-78
127
63
-8
-113
116
-8
64
-99
-41
103
112
-39
3
-122
104
48
127
-44
125
54
-35
-89
122
26
-31
-60
-28
-38
-26
45
-125
-77
126
58
29
-36
89
-21
-123
115
104
125
-43
-72
65
59
-9
121
-58
-105
106
-51
1
121
66
5
83
-41
113
-32
-50
-122
70
-2
-33
80
51
-105
48
70
-45
109
-52
87
43
-1
-123
34
49
0
-109
9
-118
7
125
-121
-104
-120
61
-61
-76
3
-97
101
-72
123
-22
-88
-63
42
-62
-80
51
115
77
31
-3
24
-107
-29
30
-83
45
81
104
77
24
120
-125
-117
-26
-81
54
-85
32
113
-30
19
-26
107
79
-4
-41
-46
-85
109
49
-6
-48
106
57
37
-58
105
-34
-103
-119
5
-103
-11
12
-10
-105
-60
125
65
26
83
-53
-84
29
-64
102
117
55
84
70
67
-63
18
46
93
59
-112
50
26
-20
6
119
-103
-55
-91
58
-79
-104
42
19
43
85
-78
123
47
-43
-48
-115
-3
-87
-35
9
-34
69
-113
-98
89
98
-51
105
-87
-96
-62
-71
111
112
49
21
-91
49
8
-128
-45
-103
55
-5
-123
87
-62
76
-4
-10
21
-2
36
5
-103
-87
-58
117
-124
115
-1
66
-11
-41
-15
86
64
-91
-72
-86
-122
74
-97
-82
-118
82
-108
-21
-65
43
-38
-26
-90
44
-2
72
86
-43
12
61
92
89
2
26
-58
89
-123
66
123
-13
-45
74
-50
-5
-7
91
82
-120
70
-40
-17
-77
-1
65
53
-101
84
88
-15
-83
-109
-126
-2
34
-100
111
94
-56
-107
-3
-119
6
-33
90
5
26
72
105
55
-90
-126
104
121
107
-44
-49
109
84
15
123
-112
-74
-60
11
18
-42
-76
-117
-27
-84
-120
80
20
-26
-62
34
86
48
-12
-95
-29
-77
47
-31
-122
-37
-65
88
-13
94
21
-6
92
122
5
-94
63
126
50
-76
-126
-117
-58
0
-63
-100
102
-22
-25
-60
101
-56
-5
-73
55
-116
61
-116
41
-93
114
-63
80
29
124
-128
-65
13
45
32
-3
51
93
-17
-73
-40
58
47
-79
-6
-32
94
2
-87
42
-69
-127
-79
-57
5
123
121
-112
-122
-89
43
24
80
91
21
-123
-57
-1
80
-97
95
-61
-97
39
-89
-115
-103
106
-121
53
11
22
-59
-11
-104
75
-50
27
-94
-11
-76
1
110
90
115
63
-126
-17
120
31
82
112
100
82
28
47
13
-31
17
-83
-59
102
-75
103
-32
123
-120
-14
112
115
-26
74
83
72
44
104
112
-43
28
18
61
69
-125
-9
-123
-52
24
-5
104
-107
-88
-48
-93
-5
112
-58
17
-5
-53
-28
114
-23
13
55
108
99
-82
106
-49
-124
-85
-105
29
89
41
93
74
-103
91
51
-64
-112
-89
-5
-90
93
4
-37
98
93
-89
72
92
-25
-34
99
5
58
60
-119
25
-77
-10
37
33
68
-115
-55
59
33
-83
126
29
-68
86
88
88
-12
57
77
-38
-119
101
70
-73
-44
34
119
41
-75
29
-20
-43
-52
-58
101
79
-20
-9
100
-31
-52
-42
-124
-120
0
-4
12
64
40
-41
-60
-127
104
76
8
10
24
-95
26
-35
-68
-101
-67
-117
54
-29
-1
-79
58
-82
86
-61
3
-99
-18
8
68
-30
66
-26
98
-91
-22
96
-32
-90
-77
-35
27
35
-11
43
55
-4
33
-61
89
21
-102
79
22
-4
-58
105
44
-52
100
-90
112
81
32
-45
8
108
100
126
-38
-71
114
-71
68
112
-80
26
14
-119
66
6
-99
36
-34
47
105
39
-36
92
-79
41
-115
105
109
-113
-50
-114
-124
-12
-35
-28
63
-49
107
36
-3
79
-14
-78
41
-118
72
-37
106
-41
117
91
25
120
-62
35
-8
125
18
89
33
-28
117
-97
60
5
-5
-104
-11
46
-58
-88
-82
-118
99
-4
112
71
91
-53
40
-9
4
-37
16
55
-99
70
107
-113
-102
126
117
-102
61
-113
-102
103
102
-92
-26
30
-84
-51
-67
-25
-84
-1
-52
7
-95
93
63
76
54
-75
52
-84
-104
78
112
41
-50
-31
81
-8
77
-27
4
-31
-57
15
-8
-23
69
26
-109
47
117
-60
35
20
69
25
23
-98
-80
-13
111
31
-40
-62
113
17
86
-119
-98
69
-50
41
-28
61
-58
-30
21
-42
-72
23
-104
41
101
81
95
-76
109
-121
24
-75
29
-99
-88
-41
-120
42
-43
16
-39
126
66
-54
-25
-28
-95
65
10
36
36
44
46
76
52
-97
37
-80
102
48
66
48
-85
89
35
-71
-57
29
-50
15
4
-18
0
-55
39
-49
-63
-99
-93
-74
60
-35
13
52
-50
66
-48
87
93
-23
34
-48
-21
-101
54
81
106
81
-77
57
-46
-9
102
115
114
113
51
-101
-125
-36
82
99
3
22
-72
54
-63
-128
-46
27
-76
2
121
-37
-112
80
35
102
-101
2551	525
2574	2551
1684	2574
1832	2574
5873	1832
5335	1684
2631	2574
3385	5335
94	2551
1519	3385
949	525
771	94
2406	1832
5660	5335
3817	949
287	1684
3272	3817
1624	2574
772	3272
4842	94
5926	5873
2227	2631
1784	2406
5924	5873
1653	5660
335	5873
1901	2574
5521	3272
3166	2631
1587	5335
4448	335
1051	2406
4095	1519
2616	2227
2159	3817
3007	94
1163	5660
2895	2631
5806	3817
1772	1901
166	1653
361	525
4453	2574
4999	3817
3434	335
5934	361
879	2616
4313	1624
4148	3272
711	525
2189	4448
5647	711
920	1051
212	1519
2961	1772
4137	4148
297	3007
2695	2189
5284	3817
956	1587
3537	2189
1590	1653
4560	3272
3024	335
3008	3024
2013	1832
1574	2895
2339	3024
2516	1590
5385	956
3881	2574
948	5335
2534	5924
910	4148
369	2159
329	5660
1485	1051
3618	3007
4538	956
393	5660
3465	2516
496	1684
322	5873
3987	5647
4649	772
5031	5926
31	2339
4693	949
2741	1784
2916	297
354	5335
1577	3987
3530	369
2714	4313
3747	322
1766	2961
2753	361
783	4095
2452	4448
4766	2516
4688	2227
5768	2013
2715	3465
1087	3166
1383	2159
348	3465
4977	348
5499	4148
2360	2574
2503	393
3282	3008
5544	1832
1339	4095
1883	4453
4240	4148
4369	949
1291	2516
5257	1684
15	920
3730	94
887	1574
1388	3024
3322	369
4719	2534
1442	5385
831	3434
1837	361
2190	948
1091	2741
2530	2551
474	956
4745	948
1158	5768
281	5385
1508	2452
2285	3618
681	4313
1821	5031
135	329
3885	3272
2656	2189
4249	920
4174	1590
5215	1653
1074	879
2398	4688
2267	287
1390	2753
3193	2516
3360	1163
1474	2530
5958	2227
773	2406
4742	2961
1822	5926
412	2753
1930	4249
3550	3360
91	4249
4291	3272
1143	3166
3110	3008
3800	3166
2188	1474
628	348
3697	3008
2423	2360
1219	1339
592	2551
260	4174
2634	4538
4925	4369
2483	783
5696	910
1847	3747
5386	496
1980	4745
5715	3166
4849	4249
2958	910
4801	5958
110	4538
1484	4249
5723	1980
1719	2483
886	260
19	2267
490	3465
3772	2159
580	1901
5075	1590
1156	369
262	1051
3325	3282
448	1784
1321	1156
497	19
2287	949
3140	3747
1092	1485
2293	1484
3390	2574
2633	496
2368	2188
596	1051
3220	2267
4793	5544
4306	2503
1767	949
594	1784
5736	3282
5858	831
1670	5736
5864	2293
5182	1474
5319	3817
1780	2695
247	1590
839	3024
2096	3817
518	2534
167	2285
4371	2293
1133	4249
5863	4693
2228	5257
790	1383
5508	1767
1044	1574
4973	1143
777	2228
4589	3140
4577	628
1748	1766
3639	1339
3446	3800
1683	4538
3728	4291
5217	2534
271	1383
1444	592
5438	5863
4570	2516
3214	1670
5954	5934
2123	2616
2540	2895
3997	3747
5968	1766
3612	2895
4161	2013
5704	2287
4867	3530
807	3446
1419	497
2752	5958
806	4137
199	4560
2781	920
3946	2452
3175	5768
860	949
445	2406
1504	1484
2394	1780
1021	879
2050	5544
2302	281
5936	5723
1759	496
2085	1821
1315	4801
5930	5696
1353	1784
4633	4369
5807	1748
2253	271
3995	3946
4279	1504
1330	4306
3469	262
5610	4538
211	5182
72	297
3892	594
2477	1821
5466	1091
3418	1930
2957	2285
180	2189
5078	3987
4099	681
1159	806
3662	2656
2099	135
3265	1159
2250	5499
1978	361
4270	5610
2595	3747
5002	5508
5229	2189
2659	3360
5050	2159
5602	5521
4417	3024
5753	5284
3403	3612
1450	3639
439	3282
869	596
4546	2267
800	3446
1173	2516
444	4369
3215	1930
5223	1837
2332	3881
5146	2483
5326	1419
4363	1822
3329	1133
3573	3193
30	5753
1034	2452
645	4867
1095	94
935	3390
541	15
2117	5936
4572	887
5127	3946
384	772
2018	2551
1552	580
3796	869
4853	31
642	1624
2760	956
1332	2190
2623	2018
3070	2099
1898	5864
3906	1719
1080	271
805	3140
5551	1784
3914	869
3123	3024
4364	1784
3832	5610
3744	4977
4190	2741
5894	2394
2057	2895
2444	1759
3771	3175
1338	2530
1645	2444
1265	260
985	1684
107	1748
5586	4148
4427	262
4021	1051
2607	2961
5890	1163
1030	2631
5380	3322
2831	2695
5588	3772
4724	91
330	4801
759	1051
5638	4719
3884	1508
2079	1624
5416	2633
1962	2228
55	1822
1053	2406
708	4745
3428	211
5045	1759
3283	831
3301	773
1085	4649
4022	3772
181	3024
5718	2540
3571	5499
5106	4577
2650	3618
3177	831
3463	5586
1426	985
5212	5078
3039	497
1486	1590
5364	759
156	3166
2147	4161
2304	772
955	4633
1696	2631
2094	3772
2219	5863
195	4973
4758	4793
2324	4371
5345	645
908	1978
3353	474
1770	839
506	645
1863	1143
1843	5364
5643	5660
568	2250
3432	1645
5357	5736
512	5416
5634	3007
4839	3220
1208	1315
5086	247
1668	5924
4476	2831
1828	5954
78	2050
5608	4240
3131	330
1334	910
1069	518
4738	1577
3017	2253
5896	1980
2702	497
3109	3329
3514	5182
2848	1173
2603	4021
5815	5551
1524	5634
3819	3265
5202	5345
2671	1044
2175	3571
3005	354
5784	2406
1059	1524
2548	5610
5761	4306
63	2483
5216	1552
4133	110
2468	2623
3531	19
2733	1552
4778	5864
334	645
3775	879
1599	167
2198	869
1309	790
301	2302
3831	2368
4033	4778
5079	4364
849	78
1597	5216
4474	5958
4183	839
5504	3329
1470	541
5913	2715
3168	568
1294	5386
1075	1442
1398	5718
5698	301
5209	5079
5155	3662
3671	5079
3113	1930
2241	31
2569	5913
4523	1508
1985	5768
631	3325
2037	955
3813	642
5426	1552
2604	156
4704	3214
2801	2190
1779	2287
105	5386
2538	181
3384	4704
2200	5704
589	78
5046	5551
1391	3995
4513	5364
5991	5926
46	910
2943	1843
1422	1309
4297	2241
1542	955
843	2050
2233	879
2356	807
572	5704
3084	2468
3758	5386
1198	1092
3818	5216
3163	445
4565	3514
2742	2733
5840	2916
2749	2603
5563	2188
111	594
925	1383
4093	525
2347	5704
2235	2530
2031	956
4763	2595
1522	3283
2681	879
3333	3325
5265	5806
835	1163
5914	3385
2725	5265
1493	2267
1908	3639
1125	5924
5323	1985
648	5106
1274	1696
3155	5508
2006	212
132	369
4115	2360
1736	1599
996	212
2910	156
3666	1091
5867	5416
636	1597
5039	3017
3790	3537
5176	2943
2933	247
1301	1059
1809	4427
5518	1837
2588	2235
2307	3272
3578	3881
2210	3024
3201	2895
4941	2681
5276	2603
3978	2233
2491	5223
5661	4427
2364	1444
83	2741
2384	4758
1745	30
1525	886
2290	132
5705	5223
4764	1980
3396	4565
3328	15
574	91
678	1095
4289	5045
3785	3163
1351	1980
3335	5873
3408	4764
2450	4842
3651	1198
5270	5608
2984	2117
3273	5426
5129	2117
5701	5815
5500	5079
4598	3385
295	574
4345	83
4794	3832
5310	3215
2813	4758
3001	1485
5450	4249
2670	2604
917	3946
2128	3537
531	1832
1151	2099
522	759
2775	5647
5682	4853
669	15
536	1832
5330	260
3677	2742
1994	2384
455	1847
5760	1087
650	3428
4199	4021
1839	1388
5709	807
5885	2018
526	1577
1870	917
5916	4369
5264	5544
4145	572
2237	195
2340	642
5901	2368
907	2702
5082	3155
1760	3728
436	2057
1831	2057
326	2079
4767	2714
3737	5106
353	2984
1331	369
1824	1883
597	5901
4919	1653
2626	3744
3062	335
2232	4033
421	3818
2462	19
1818	5936
3821	4513
2270	5129
2701	5276
4171	1978
3331	78
3285	3265
4914	5229
3494	2307
1635	1095
5192	4794
5346	2293
5035	522
3820	1474
2722	4766
5820	2671
673	5924
3363	5500
613	1353
774	506
1612	281
431	5873
152	3469
1102	1331
2793	628
4686	1552
4101	1159
2425	1486
2333	2099
4287	1353
606	2848
1395	917
1045	2588
4394	2483
5203	3428
2736	5551
4469	5610
2167	669
1281	5335
703	1486
3720	2574
2991	5209
1781	771
515	1133
5789	1684
5130	4115
1764	63
557	908
1114	2360
1954	3671
4749	4287
832	5202
214	5345
1945	3747
1556	5176
509	3446
717	5873
3284	1908
671	63
2156	2958
3147	2096
3297	2623
5695	1668
5999	4345
1902	5182
2276	2551
1302	2623
5824	790
106	1219
124	4291
4675	262
982	5753
819	673
2708	1053
5513	4688
811	4778
79	1332
2993	536
833	2516
2108	19
207	1772
4090	2452
3840	2670
3804	2347
4049	5310
5119	207
1596	3800
1782	3123
3679	717
1588	3062
2372	843
2482	207
2952	1301
3495	1767
4512	4999
2047	5270
1997	431
4507	3978
5939	4099
196	5202
5772	2452
688	1683
5630	166
2785	5991
1197	4565
4128	1332
3205	1095
5767	711
2277	3790
5156	247
4100	2538
1909	5954
222	3571
1397	1395
1337	2722
5960	4546
4605	681
1177	5045
643	4724
1713	166
604	681
2667	1525
1029	681
121	4313
3458	2324
296	5265
1973	4417
5459	5203
5819	2018
2172	2175
5530	5634
1937	1818
4499	4675
4012	271
936	5858
426	3530
2330	3007
3499	4763
784	334
736	2462
4038	4719
4708	2671
4869	3796
634	1832
5626	5530
5656	4801
1899	1069
2225	5530
432	4565
2442	354
1147	1997
534	2423
3464	2425
4600	920
18	1133
3447	2190
2395	2018
4996	79
1889	1159
3619	4842
5116	2395
1666	3666
2002	525
4571	5075
34	247
1027	2538
2088	1908
5447	431
8	2540
718	3193
2560	1504
2920	4100
1716	3215
1124	2468
5231	3113
4545	5500
1316	1839
5105	4749
5494	247
4349	5500
950	5039
3658	2468
3051	5326
3383	2253
4775	3720
1894	849
5170	2491
1358	3283
5854	34
5829	4090
575	2910
1551	3499
5532	3039
5673	2588
4194	78
1098	800
2879	1985
758	4849
1740	1422
2517	5789
1834	5819
4580	4287
1088	1577
922	3677
4707	2670
2925	2831
600	5086
3045	869
2390	1450
3778	5447
3072	669
2346	5934
2353	4546
2710	5310
3784	1051
2525	1044
5367	1493
3137	3550
646	2368
4985	3775
3837	5364
1438	5284
2898	271
1066	3131
637	5050
4680	4364
2562	5264
4828	3832
3250	5335
1466	271
1752	1484
2070	271
3621	5345
5052	3408
2020	431
5427	1784
4192	107
5414	5323
3876	2398
1007	879
804	1508
2661	2741
139	3215
4808	4538
1620	2037
1566	262
5550	917
2325	4190
569	4474
3566	1832
5060	3465
4522	1764
651	2752
3101	5284
3133	5634
3966	2444
1373	3005
1535	758
1788	4707
363	4758
3309	4417
1885	1045
1622	4371
1413	2534
4870	1752
821	2253
5514	805
2034	2340
5659	2006
1938	1980
3106	1177
2504	3123
3004	1085
961	2094
2342	5863
465	2304
1476	1485
868	5357
4299	2961
1850	4363
254	3494
1026	2018
3501	2452
3304	509
313	5926
4036	4767
3253	2330
1727	2670
5342	2560
5639	330
410	1937
3783	3820
1725	3651
5852	773
958	2562
4554	313
794	3987
3939	5367
2660	1736
5179	3301
1869	2775
215	2895
77	887
2412	606
1179	167
1079	2390
372	1784
2410	2482
2426	2395
5047	4745
3533	4853
888	522
4096	2189
2181	301
5683	2634
5594	2395
5568	5634
3930	806
514	354
3475	1818
5677	3039
946	5508
4441	3140
5457	5231
5396	2188
3989	5046
2369	5550
2467	3328
5685	5459
1747	3618
4871	3039
4423	3331
1035	718
4643	5958
516	5130
5876	2324
2721	985
223	1383
203	1315
1733	4704
5197	46
3623	5807
5983	3800
4309	3110
544	832
5702	5858
4489	301
3835	5939
1228	3464
2635	5936
2699	5500
1459	3550
1705	1198
256	910
2052	5155
5823	833
963	5514
2130	1624
108	3612
630	1525
5578	5518
4755	637
4525	3840
387	2468
1554	4145
3543	800
149	5521
3862	2253
5268	5416
360	2736
1654	1733
4018	985
1963	575
626	5784
4822	1474
5965	2200
2120	271
3207	5060
5375	5155
3555	879
5679	3499
620	888
447	1784
5987	2634
2903	4115
5738	1383
841	2661
1361	5958
5422	3072
3886	2517
3762	4291
242	3772
598	1719
4292	2394
5969	643
155	4849
5151	4522
5076	1079
265	3328
1204	326
3052	3720
1420	5677
5206	3997
4333	2710
3782	5276
4509	3070
1169	2681
1555	1645
937	5968
539	3008
1531	3578
4576	1420
480	3618
4475	1654
1991	94
1967	4758
4482	3571
3602	1484
2428	2147
5004	925
1516	1351
5612	3966
4450	5858
3858	3881
2186	2741
1328	3360
440	2569
1478	1843
5044	1074
1460	287
2968	2172
165	736
5300	19
2260	2013
2685	3578
3033	1635
416	4100
2978	5494
3028	1832
5104	5610
760	717
2643	3301
1275	3475
5971	4194
1708	1476
5124	1169
2371	2749
4493	3619
2086	3514
2948	3469
3901	149
74	604
4616	5447
2437	5815
3094	5965
2417	515
3614	1832
5392	1383
3548	1330
352	1670
339	2462
2550	46
2383	2504
3241	5521
675	1831
4231	3045
5230	626
3581	2423
599	4289
3870	671
3347	1828
619	1470
2906	4513
2966	2551
2666	599
4257	516
4070	2167
3382	1321
3685	1624
3687	207
5950	5414
4175	5894
1976	1847
4830	3930
5022	1635
4182	3581
670	1080
3565	4538
1210	5380
5888	1824
321	2968
3593	1177
2990	534
20	5450
815	326
2975	3573
1580	3747
984	5047
4252	3840
4918	950
2084	5155
5782	5182
2082	5715
2022	448
5861	3550
3261	3571
4746	2467
4155	3133
829	5939
4444	335
897	2701
3542	1334
1097	1173
5258	5602
1187	1338
1757	1828
5879	361
690	2952
3104	2813
2019	1828
4510	690
2143	3265
2438	3550
1711	2159
2261	4313
4819	1087
4437	3501
5856	2775
1718	2304
145	3214
1323	3094
4261	1029
1921	2186
816	1029
4714	1316
3680	3772
1801	1187
392	2190
1344	2437
204	5052
939	2360
1014	5127
2056	2086
4384	1493
2617	3593
5074	5223
2609	5551
3732	5926
4043	3651
483	3250
3988	4145
5442	5504
1246	3578
386	2057
5271	3304
3631	3946
3183	841
4212	1542
4553	3205
4050	474
3065	897
4504	1976
808	4174
1193	1556
1914	149
3594	2084
5190	4453
2612	1885
4466	1228
5393	124
4263	5179
4983	982
4728	2398
3006	4444
2506	4437
5645	3109
2161	5052
5733	1574
505	1782
3493	1531
4019	4474
5547	1275
4491	5784
3780	648
1039	3137
320	2426
3938	1870
5966	568
5899	3819
5403	5638
3609	3737
4989	671
4205	5146
5836	2452
243	4989
1497	1718
1758	1782
684	4763
3935	2749
3368	2371
3615	2339
5154	783
5278	5639
2513	1938
3830	432
2941	760
1685	5106
2815	5416
4646	2506
37	506
38	985
5158	3543
3289	4349
317	4292
4573	2975
3739	5913
5373	600
2387	2423
2901	1985
706	3329
147	2383
3305	619
4218	758
5865	135
424	3166
1120	4767
3661	5270
5108	3939
24	3581
4239	1554
4258	3775
4186	1197
4244	1821
5260	2346
513	2235
3416	1390
4129	34
4668	1937
405	4745
882	5416
1078	1339
1817	3309
291	5146
1731	3939
471	1837
2490	2241
3078	575
2321	490
1	3571
4092	2968
3705	1338
5511	2742
968	5457
581	212
364	1147
5266	1863
1400	4133
3998	3988
2433	2225
1897	2538
2351	2020
2393	5695
2703	2200
4467	3261
5353	15
1122	669
988	5913
2510	4764
1874	4580
4187	2667
2341	5913
5071	1390
3154	3205
3709	5695
1987	5367
1496	5414
2751	3666
3512	2099
916	3250
163	5271
5725	1339
3321	3304
4531	5683
2055	5278
3230	5761
4592	2848
822	5124
3274	5738
3156	3820
3436	4309
4479	4291
2271	166
573	620
1627	2368
1234	2383
5211	2752
4673	3328
2427	3832
3973	2052
1201	1476
2217	3973
2486	3744
1927	1444
2861	2452
5495	4977
500	5004
3850	4182
1928	5258
4883	2920
4108	352
1877	4218
2174	5209
4331	2906
1279	690
4690	105
4326	831
1769	4369
5786	5514
1348	5046
1489	879
221	18
4177	317
5648	4553
5892	410
2211	3007
2983	2793
3483	4724
5177	2468
1306	5705
5912	4504
3288	879
1641	1574
2711	2517
5038	5257
5263	3432
5678	4853
1906	3301
1063	988
538	3747
4609	1332
3338	3403
4529	3137
3040	2503
3228	3989
1417	3024
847	703
425	5129
1139	4258
1611	4493
14	651
1888	4529
304	4870
3756	1524
36	5047
5978	4728
2980	4580
1729	4996
1730	4022
1161	2671
413	5768
1714	2356
1237	2186
1119	4925
2908	3106
1688	5209
3801	5129
1287	805
1211	5190
5489	4801
5477	3835
2067	5753
4678	1351
979	2428
694	4493
2176	5447
2554	4668
1432	15
691	2410
2021	1978
2349	1420
5721	1079
2367	5353
927	5170
4786	718
1164	4867
4666	2462
609	3396
875	5392
1137	3995
4	3530
5796	5894
1643	63
724	5345
1722	2656
5049	1122
5994	4441
1630	155
5672	5330
540	691
5986	1034
2542	2703
5972	5047
2405	4326
5087	5494
97	2342
914	1730
2208	4489
537	1163
593	195
2115	536
4071	5447
1041	5513
798	1119
586	4292
3740	3304
3845	3819
4569	4218
5687	1837
4074	3732
5686	525
3964	939
39	2607
3310	1420
4806	5044
2344	2237
3037	1894
4064	1809
1648	5829
3952	589
5120	2217
1327	4306
3893	2084
3597	1730
1842	24
3608	1716
279	2516
441	3017
5305	1817
2459	2588
4670	4108
4711	4489
3165	4417
705	107
4602	392
4814	4758
1453	1091
4271	506
1116	2372
4611	5087
796	939
5706	3666
647	5969
1277	3800
1550	3309
299	447
2912	2427
5287	4364
1356	329
2160	3530
5668	5863
5633	424
2403	647
1562	1095
4320	868
62	3384
723	5978
2009	4491
2478	393
3047	195
3726	675
23	77
3957	432
3908	38
5982	3408
828	4036
2453	5257
2475	5335
1594	3542
677	4466
3202	3333
4648	2895
5498	1026
1882	2685
1879	3817
3437	5151
1347	3594
302	2390
1376	5498
2377	1474
2593	3881
1932	2219
4340	3858
4845	39
5619	2703
2778	279
2434	1177
112	736
4465	2186
640	5266
3143	1828
226	2468
3257	5863
3676	5530
1631	480
3439	3978
5256	2623
5932	3166
2988	3109
2877	3403
4390	3946
2878	4161
3336	1832
1751	301
2954	771
1100	736
701	1556
2014	794
3149	5673
4955	2903
5593	950
689	916
5897	1344
5605	1177
602	541
5114	1524
1227	436
2354	2188
2301	4525
2194	3499
5222	474
1598	3383
1067	3783
4344	5229
5281	2200
2038	1562
367	5071
3645	4793
1884	1074
5855	1784
2507	2384
5277	4192
2573	4678
5482	1219
3478	2925
3129	4985
5328	4577
2618	2340
1866	5071
5245	1417
3248	4745
4105	4186
4974	1834
456	5678
1584	5375
1313	1095
1526	5450
5341	2954
169	4177
3498	5345
5291	1902
1261	2961
750	410
2768	569
889	5701
692	1937
2724	939
3200	3952
1385	215
3549	4493
3311	3403
5937	2143
4623	4767
5199	3273
1502	111
3456	1748
3268	3005
5091	3478
1412	5630
2498	5829
3371	2609
2107	5588
1441	4643
90	2475
4420	1051
5143	1769
4917	5705
1632	281
5048	5987
4081	4182
5444	329
812	1315
4407	4668
350	2130
3574	3989
2745	648
2363	4554
1543	145
5624	2349
5008	5158
4294	2241
4900	3104
237	3329
1243	5277
3717	5258
4776	1842
1565	2211
3781	889
3562	849
2284	1524
546	317
4359	2603
171	4183
4907	474
1311	917
2976	247
2798	354
4892	2711
4037	2405
3640	348
3191	908
4065	3821
605	5203
2672	5807
4716	2920
4383	1757
4277	5271
5943	5983
3691	642
867	596
2627	436
4759	4482
4234	5222
191	1772
2152	5950
770	5698
1022	1179
5880	3250
2994	1413
5036	1356
3646	2988
4624	5422
3577	2701
3392	841
3933	572
2922	4270
2855	2423
2338	5230
3393	2710
4232	1400
499	2685
4651	2340
1537	5913
1004	1837
2669	1237
5540	5994
2992	606
4308	925
1320	3392
178	4819
1175	5156
4132	581
2275	568
1581	256
1530	1332
2828	1927
3932	3070
2647	2115
4957	3478
5990	3850
1099	4071
2269	1164
2083	3957
5862	1085
1245	5704
2166	4510
2662	3820
3891	3831
1999	2233
2972	5500
5631	5129
3430	2232
3120	2332
5027	3104
5533	2086
3481	2275
2700	3070
3521	1388
813	2670
50	1177
4732	3175
4060	1708
3497	5447
1296	5624
5274	5156
4478	5897
5582	2253
1777	3740
3352	1945
1468	819
351	1331
2723	354
3258	1987
5728	637
3277	339
1509	431
4557	4678
5731	3321
4245	2903
1697	4383
5445	1080
992	1320
259	1630
3424	2228
5118	4546
2095	3862
1808	1962
2740	1274
3523	3272
2348	4801
1216	4105
2674	4249
4311	3297
1657	3325
449	4279
3364	3347
2995	2992
942	1818
1547	1139
2113	1898
1283	3131
4106	4218
2739	513
453	4133
4341	3147
3994	937
5020	4693
2645	2442
5362	5784
4621	2211
4023	1453
3203	1460
373	774
4752	5319
4931	1822
3479	3780
5851	3371
1703	2175
5096	15
1904	4289
5436	2253
3630	3390
2335	3338
5748	2333
4993	688
4343	5705
2691	5753
466	77
5388	1413
118	821
2075	1843
4332	1179
114	4261
2762	5310
1505	5202
5077	4239
755	4258
4250	2438
947	1894
4256	631
5173	1535
5017	2433
3126	613
246	3368
4274	600
4551	4289
3099	2175
1106	3671
2170	2107
1544	3396
951	3618
3217	2674
1791	5856
2637	3881
2429	3862
2870	5709
4544	1963
5063	5300
3656	5968
5875	796
1054	2462
1799	1339
5361	4819
1032	711
1672	2607
5708	949
2011	3739
261	2975
2673	5796
5962	1197
4757	72
5560	1906
4789	5978
1123	1210
817	2662
1174	2753
150	5876
210	94
2457	1688
5	4749
1572	4417
5808	1590
2644	3621
420	155
2628	927
4045	606
4875	169
209	2627
4008	260
2697	4364
3793	1119
5676	637
991	1630
1024	1832
4295	1216
5180	3621
1698	1296
1452	5335
43	650
1280	3428
1415	897
823	1901
5453	4115
5007	3615
3372	3656
5976	1978
5449	1054
1166	829
2597	2697
5699	536
1105	5035
2894	2412
1737	354
5878	2325
1162	3168
25	4764
2761	1162
4335	783
5026	5807
672	3850
1288	2083
2844	1412
4765	5901
1950	301
4802	689
1836	2426
1435	4546
1975	2916
4561	630
3653	675
3925	3782
2651	5971
737	2609
5535	1197
617	2340
5764	2013
510	2980
1926	1027
1570	5459
230	24
4618	796
4978	5129
1686	643
661	5514
4196	2560
5132	506
4566	5819
1392	4609
4603	5820
1735	2459
1070	149
17	424
2297	1718
4366	1095
70	5633
446	3154
461	1824
2137	2922
1273	5721
4198	3024
3984	984
2763	5550
1482	4100
5712	2593
757	4475
3902	1422
5671	1884
745	822
5081	5180
2578	5022
4760	2983
5974	2650
146	4129
5316	3566
5787	4918
1082	2685
4868	2651
4829	1782
3016	2595
1625	557
200	3893
4970	2459
906	3662
116	204
5207	320
2305	5551
1983	3656
1518	3424
3150	3614
1132	281
4144	1283
4471	2482
1270	1397
2064	3780
5468	1716
1357	2994
4865	4814
475	3384
1871	116
5859	3656
4428	1524
5918	2933
1984	2741
3381	424
4681	1714
5424	5829
4894	1767
2759	1713
556	3481
2168	2438
3144	1441
5669	5342
2202	2006
3132	2699
3162	4531
5839	432
3023	3168
2336	3165
65	5362
1232	4036
2139	4239
5100	1219
5905	2156
5491	3677
2445	5154
5750	1187
1305	471
344	1963
3334	2333
1753	4894
429	2644
3977	4297
1849	1817
3236	5880
1520	43
2648	2305
5717	626
4617	3845
649	3384
5921	4989
552	4340
994	4277
217	2978
5354	2574
1953	1067
1089	2916
1252	3033
277	4724
2376	1584
2890	2002
1028	124
1957	5896
4695	2335
2909	537
218	1897
1469	723
168	869
2315	5203
3926	261
3586	955
4685	605
1372	5994
2214	4145
953	3353
3863	648
4350	277
2789	471
5072	2903
542	1597
1701	1921
4946	3801
2887	1729
2375	291
1575	4561
4085	4695
4468	5386
1165	3214
5507	163
4674	1683
1490	875
3056	3555
4020	5878
5090	815
4382	1927
5292	3363
1167	2086
5452	3311
799	1530
707	1869
4280	4161
4722	5602
4574	1849
5349	817
1848	4311
1988	849
2732	3368
3180	1635
1218	2117
2802	3137
1250	354
5922	5530
3069	4192
785	3876
4511	1490
5884	296
4872	439
5432	620
5587	2697
1571	4573
1220	5498
1887	1070
4237	166
4373	3501
5461	5090
2514	3309
1695	165
2485	2588
5080	4778
5891	4766
5366	4161
4472	1597
4028	3028
4968	5705
2880	1542
4314	1877
1025	1044
5042	5721
3182	968
769	5457
1117	5364
2104	1187
4401	2798
5601	982
2693	2305
2103	1357
4712	3938
5773	619
3546	2181
5144	705
4972	5170
5783	5424
4895	4728
5828	2307
3318	1294
1810	537
3547	1562
189	1963
1434	2377
3067	1926
5745	1232
3098	3677
2005	5767
5757	1759
3993	166
3085	5075
2795	1159
3919	392
4285	1066
69	2442
502	3494
1152	5619
41	760
2581	1635
3745	1485
5269	5588
2678	544
2876	3045
4727	4366
3096	1227
4696	490
905	832
2620	2434
3121	5080
747	908
2129	2701
871	4382
5628	4722
493	5130
1427	4093
5928	2742
5832	1566
2238	2022
2750	1397
1068	4489
1533	597
570	5937
3082	575
3585	2006
5714	5605
1477	4648
5340	2175
2292	4394
479	5568
1511	5890
1171	920
1931	1116
4009	3363
4162	2094
5794	4306
5869	1777
1609	386
3014	5096
4689	2437
4628	736
2226	2597
2355	5728
2819	3501
3607	1716
3644	313
2187	3646
2913	649
2105	4648
5692	262
1456	354
3613	2819
5234	4234
125	541
1804	5080
1803	5922
4281	3101
3377	5130
2259	3156
4398	4839
5893	5086
4677	3193
1292	168
2547	5823
3678	1497
4204	4793
1970	5514
5801	5672
4069	1780
576	4345
1217	4611
1248	4732
5225	5936
2614	1397
2800	3123
1807	2651
1527	1843
5509	1476
5886	4239
1278	25
86	1068
1981	2181
5280	835
2042	534
3954	5643
3622	17
3092	3175
1257	718
3448	2384
310	4390
4015	1091
787	339
5254	2958
1329	4974
434	2211
666	2778
517	3120
2231	4092
3927	675
5559	5380
1649	619
4540	1683
986	3424
1610	5587
382	4763
934	927
2205	5385
2249	506
4409	5764
1297	2356
1515	568
4939	5660
762	4299
5164	5199
1142	5764
4532	3416
2484	1970
4639	5836
5979	1718
4710	5182
2537	5806
1513	2992
5148	2578
1665	3110
3509	4314
4891	4710
2716	1273
932	2261
5497	237
2559	5982
3269	5156
1682	4546
957	5199
4422	1668
5469	4299
2183	1219
3397	2198
1428	4313
2794	2739
2947	925
2570	5854
1178	2022
2229	412
5909	5489
5825	4137
2511	5156
4336	1842
2078	1320
231	1398
4032	4704
3797	817
2696	4309
4692	1683
5868	90
2476	2013
2959	3214
4850	3800
1355	5449
2779	4681
4835	1703
2518	879
1157	4465
4058	5414
3044	1505
4505	613
4238	3191
3834	1730
4140	666
523	5909
3362	4918
1387	3740
1691	1426
2689	1152
2148	1279
2136	431
2849	4373
5322	2175
3776	3678
698	3908
3243	1505
1065	5702
1638	1315
3798	2781
4173	3666
4275	3051
143	1227
492	5954
3969	1280
1813	3495
1369	3830
245	50
962	1962
4414	4344
2810	86
2361	1044
4201	2813
2818	839
1047	3283
4679	957
1289	4212
1944	2708
1264	1137
4056	1509
4078	2813
401	3881
454	18
3903	5660
4027	936
2029	5367
3600	4712
3872	5639
2845	5222
4909	982
5193	649
1940	448
4107	3892
4662	3166
2642	2504
4956	4977
368	2785
2904	4177
5675	3033
4734	2669
113	5855
4191	1697
965	4401
738	2753
2999	145
5289	1289
5475	3268
2100	597
4227	5858
315	1684
427	3045
4526	5357
4906	2597
2536	2647
3088	23
960	1216
2	2785
1890	2205
3991	1139
2907	3804
5596	1518
4355	310
4889	5692
1037	4306
5394	4465
3896	1376
131	2991
35	1208
3435	1493
1936	2241
3343	135
524	1725
285	3933
5846	1067
2331	5500
3632	4538
3117	3070
5137	5507
3356	2410
4034	2018
5241	426
2842	2845
585	718
1917	2637
4185	708
786	5832
1558	5939
3822	2574
1115	2052
280	2270
1090	4309
1094	634
3204	4624
2629	200
1851	5696
101	4078
2734	291
1449	5708
1568	3935
4458	4428
3388	5626
4905	1248
3534	499
554	4074
4312	3977
840	5748
2718	613
744	1357
884	1590
220	2031
629	2907
709	4258
3173	1493
408	1682
3743	5721
851	1028
1862	5999
5283	1668
4211	2635
3355	3493
2788	5885
3605	599
3589	942
2599	1091
2665	499
627	3946
1033	2013
252	5499
4658	24
182	531
1322	541
4410	4569
4541	843
1852	3435
2295	4925
3789	2052
1010	3881
3012	3819
4130	1091
2747	5899
2744	5656
1499	1151
1180	2665
4380	3309
654	3241
3683	3282
4928	3646
2846	3117
5224	3565
390	2855
5681	3720
969	1119
3294	4085
4563	1427
2358	5701
2987	2855
3921	5840
3510	706
4001	390
3768	1834
2621	1894
4559	1688
3222	4033
607	55
5418	3585
1483	4128
1920	594
901	2202
154	2238
1741	3243
4266	1821
5923	3310
533	3600
4920	2019
5299	91
5882	3014
719	1588
4908	1045
3213	5681
4114	1474
374	3876
1363	3155
4614	2485
4357	868
549	2194
990	4311
3624	1432
4986	5593
5775	3781
1129	2831
818	3377
1259	2302
658	5
3196	1069
621	182
4062	2181
2521	2616
61	2198
803	949
2352	3383
2850	4132
919	4458
780	705
1660	5630
476	5733
5402	4557
1455	4850
2201	4033
4837	4313
1819	4239
2555	4020
2596	1097
4124	1444
129	2844
1833	2047
1754	5568
734	4875
162	4458
258	4090
409	2325
2889	887
3058	351
4424	3577
3912	3683
5762	4545
2443	2429
1690	1329
657	3483
553	556
4120	149
978	101
3199	2708
3592	525
748	5633
5877	55
2063	2491
2872	215
4788	621
5483	3099
5785	2395
588	1
1589	953
1445	958
2821	5878
1996	1432
3405	1032
1868	1079
4656	1098
4013	5928
3895	5468
3700	3456
4243	1275
2512	1322
1448	5715
1148	1983
1844	3994
3960	4835
3153	5678
743	812
5109	5457
1072	3362
941	5619
4172	5656
4848	2253
2001	1649
3206	3589
5809	4523
3116	1034
5975	1124
5334	393
4284	5681
185	3360
1244	3228
1379	317
2222	434
4820	2335
5637	2104
54	3253
5115	1197
3427	5855
4372	3756
2883	5386
5293	888
1860	4291
5737	5080
3075	2593
1407	2293
5959	2595
228	5330
3169	3257
547	3758
2680	2229
4631	770
4604	3037
997	1095
346	804
801	3007
2707	4341
2366	539
2841	5394
2111	1719
2489	2761
5562	2734
1253	4129
4109	5357
2557	821
1429	1497
4006	2633
4180	1643
980	1757
4041	1129
3664	5991
4799	3116
2541	4133
4362	2958
565	1274
2087	4115
249	1868
735	3113
4782	2794
4413	30
2016	5656
4750	1493
2163	2879
4426	2913
2418	1705
5391	3998
2386	3984
2811	3664
5542	4611
1602	575
5213	1883
2040	3789
4217	3709
1742	3325
5538	5612
3015	1839
1109	4493
4487	3004
2448	3004
2025	110
4229	1950
3839	2761
5433	750
2496	1358
27	2315
1224	5316
1135	1526
4516	3439
795	5916
5570	408
5589	935
5383	2108
1856	2338
4951	4144
4916	884
323	1179
3195	4038
3249	1983
2977	1516
1659	4372
3535	5873
1377	3514
903	1571
5233	2235
4620	1713
4843	4649
4302	523
2122	2205
641	4589
2262	5959
4846	2368
2864	5708
5948	4869
3511	3368
1671	4569
2343	1383
1086	3156
3643	1311
5503	3120
3231	5753
3810	4489
5296	2538
1003	1803
5131	2075
2652	2018
4167	373
2591	2429
1192	146
183	5846
5214	3169
2928	1497
4826	628
1861	2302
3754	1169
2422	3040
290	2238
954	2394
4386	1622
864	369
151	2599
2162	1438
5372	5366
3823	1067
5769	1151
2698	3069
3172	3870
5337	291
3755	1361
5133	5020
3018	2347
1405	1921
3244	5540
4462	3896
3682	3213
904	1355
5640	434
4922	3364
4087	2595
5919	593
219	3072
3722	1737
1267	553
4151	3886
5084	4410
5742	4695
2362	178
4683	4577
3391	5225
2777	5551
4208	4951
3359	1080
3751	3418
2869	4573
44	3475
2421	2895
2528	453
229	4107
1354	3651
5333	222
4832	3930
2155	499
5029	1460
342	2855
336	5300
4903	2304
2134	1329
331	2120
2989	1914
5881	5475
1262	5489
850	1243
3971	3015
2927	1499
2765	2678
73	2864
5101	3008
2359	4382
659	4279
4184	5796
1176	1132
5520	1281
5874	747
450	538
3786	506
3209	5794
1853	1861
4102	3820
4741	4868
5152	917
2509	69
2309	4340
1794	3780
5473	1327
2234	796
4886	2253
894	4018
695	3521
3861	1937
5597	942
5308	1372
3375	1387
3950	5046
2158	5958
5112	2753
4990	4814
95	3017
4880	1883
5655	3835
5470	540
2027	4335
66	2361
4122	2734
3326	2749
4581	5202
1642	1248
4134	5473
2218	932
4588	4332
1905	2301
1825	5131
2311	5875
5250	261
4960	1898
4300	2395
1854	2113
3909	4475
4761	150
5935	4341
5102	3903
1755	589
2173	1580
26	5096
442	2301
2272	447
2153	2642
417	4941
84	1330
3290	2626
3814	2210
2171	1727
5458	2599
5191	61
1461	4906
1235	919
618	1434
754	5736
5430	2359
5646	2665
3961	3680
5763	2509
347	536
1561	2621
2654	869
2692	1682
4961	1151
1009	2760
2589	3353
4821	1265
4844	287
5600	3092
3103	5310
1523	412
3496	4427
1349	4132
3516	2778
4586	1851
3826	2904
5149	3830
138	868
3256	4918
4440	5120
4671	1434
2924	1645
610	2671
751	3514
874	1580
1446	3023
5092	771
3425	707
1333	5231
1838	5672
590	1504
4650	4300
1955	5660
4488	1825
3216	1292
308	1716
3642	4566
5536	1747
4737	3661
4273	1176
2274	2842
5571	919
511	2762
5486	3744
5140	1123
2951	5038
3583	2155
4361	4727
1285	4749
1743	5291
5765	3991
5282	1484
2257	2238
5900	417
1205	1533
5371	4848
3247	5916
727	4191
3668	709
4200	2344
2720	5533
3302	3052
2567	3574
5752	1330
4459	2315
1150	3359
5159	757
1528	1244
4630	2642
1181	1156
5539	5875
4119	1021
137	3550
5448	4279
4376	3671
5798	3745
5635	1087
1471	922
4514	4182
909	410
4388	2227
3059	3893
1458	5888
4622	1533
4590	3823
2402	5341
3552	5199
1512	5888
4612	5127
1140	4872
1591	2732
3805	254
5793	5152
2184	1279
2256	630
2602	5544
2090	1696
2374	4101
3251	3933
3079	4869
923	621
5642	254
715	948
4059	2670
1763	3085
4127	2626
2997	3183
3124	3253
4163	4819
3046	3088
4057	5897
2830	4688
1948	3381
4035	588
2263	5540
1785	2828
3888	5081
5014	2678
4094	2654
5037	3988
2860	5905
1827	2844
1433	4951
176	1849
3637	5718
5774	322
4010	4658
1823	2293
2773	26
2606	1718
10	3116
564	4592
1606	5969
418	4643
2327	5715
1539	650
1463	531
3197	1400
266	408
5531	361
2946	5923
4596	2233
2248	5482
4319	5745
5329	3840
652	441
1138	323
1814	5840
5492	1807
4672	1078
1382	1844
1241	5643
2979	2877
731	73
2985	5717
3753	1474
4228	5357
5623	675
2146	5978
4077	1758
656	3756
820	3284
2399	5137
355	2795
2015	212
5208	3906
4812	737
971	4917
359	3144
248	816
3808	5965
3532	2864
4790	2128
713	4837
4904	5742
3750	5120
2409	4297
2255	4790
5000	600
3708	5702
3034	1984
4751	1671
2649	1306
1399	1868
5175	5893
1893	3732
3757	904
1081	154
2727	1976
3021	1283
3907	4410
1371	4996
3344	1697
1424	4105
2969	185
283	132
2497	1957
2986	4208
5377	4106
663	2648
75	1937
797	4134
1517	277
3733	1516
3184	5932
3262	4401
5465	3762
5981	2156
188	5129
2204	1458
377	1124
3167	4108
1223	2800
1017	2018
4030	3184
1647	75
1266	4759
1118	1208
5519	154
1873	308
298	5685
1798	3193
5716	2405
5883	279
4773	1504
4578	882
227	631
3791	2163
5064	50
2416	1751
3398	5513
253	575
1199	4009
5938	707
5186	3209
2502	5514
4910	4737
5057	2742
664	3751
1498	2609
3361	2015
4449	5182
3727	1281
4103	3726
5446	4917
5040	5878
1408	627
3911	4499
3064	3067
5088	5602
1048	4299
5583	669
1679	546
2500	1026
3119	223
1977	4114
4836	590
2071	2241
47	1270
2058	3133
2738	5673
3669	2813
1857	2760
4214	3969
1576	2671
1049	4985
1918	1747
52	166
1113	3901
5066	4678
3967	4085
2914	3084
5697	4904
391	828
5925	5832
2814	3656
2220	5539
76	5846
1992	4512
5667	256
5577	1660
2289	3720
5070	2204
915	886
5351	2120
768	392
5506	3250
4962	3566
4086	4891
4813	4891
876	2422
2572	1818
2568	1135
3303	1059
3472	5798
2258	90
3942	2402
3883	3284
45	1908
551	5612
3074	4956
2024	640
1734	2040
1579	2643
4492	3912
3633	5930
2465	4250
5857	4842
1792	2425
3468	5277
5059	2067
294	1197
1532	3408
1020	1291
1101	3850
1464	4009
4613	654
5255	5774
655	5026
4697	3249
3208	3630
4436	3273
4729	2105
2435	5672
1968	2386
1324	5774
2408	5716
4805	1331
1845	888
2286	5888
4803	2096
59	3573
4216	1957
1221	2285
3053	4022
5370	4306
2461	1517
5812	2637
4347	2217
1040	222
1826	3274
4862	2819
5821	2793
587	4174
1693	5877
4770	2160
2199	2513
5065	3065
5240	4200
1480	757
2712	209
1393	3680
4113	670
928	4895
1892	5511
2223	4578
2929	2528
4810	1869
5902	1320
2923	1685
2480	5102
4896	2343
3794	1355
1605	5686
2565	4710
3540	1408
802	4093
3413	4972
177	3024
232	2707
1314	1265
3409	2305
404	1884
5488	4622
5970	2673
4193	3249
5187	2434
2653	3876
1969	1
2939	5789
4665	1577
5150	4727
680	4757
5141	4350
4286	1157
2783	3056
2127	1330
5188	2349
4857	4892
4599	5291
3841	3258
3844	2001
397	4828
1912	4830
5400	137
756	3465
4480	5706
4644	3053
2884	1158
1925	330
362	5105
622	2685
2827	492
4884	1428
4047	4919
5826	2593
174	2957
238	2904
2298	5231
881	3639
273	2263
1776	2696
3928	4738
4583	554
3702	266
791	1044
2299	3679
2731	3683
375	4867
4391	4087
345	5976
3030	453
4684	2321
878	831
5015	3903
2546	5048
2316	4985
3227	698
1013	4574
3223	5978
1263	1453
3788	2497
959	573
1582	3309
883	1277
765	506
2059	50
4110	3781
1623	957
4088	4609
4959	5362
616	5108
4146	3619
2769	4685
5218	5131
3665	3384
3857	5102
5474	3998
2592	3630
5580	3534
2676	3772
198	3425
4213	5714
880	304
3945	4512
4982	936
2545	5469
2045	331
213	4058
4625	3656
318	1398
5654	2581
2431	1526
2535	2633
2102	3858
2896	1755
2150	5828
1536	3149
3940	2626
264	4459
1454	5938
2068	5079
1394	4566
2098	2656
5528	1823
1381	3837
2566	804
1256	1124
1783	5978
2873	2674
3572	576
624	4999
3421	3375
1182	1781
7	5115
1942	2360
3267	4806
2414	4875
28	4096
3842	1862
5041	5362
3528	650
2216	843
5988	769
3374	5815
4769	2697
407	5146
4017	1070
2587	2670
4486	5116
3951	4789
1172	3804
4197	1471
1676	4835
665	2604
3556	2660
809	1975
2600	3733
2466	5035
4220	2490
4169	246
4377	5461
2345	920
115	2869
5845	3612
4579	4476
5770	875
2508	1713
548	1432
3659	3817
1835	5637
3286	3700
2658	2513
4659	321
3263	5448
2706	442
140	512
1934	5154
1521	5540
4877	384
2322	3326
4878	1921
3936	2991
952	5880
5399	605
4753	548
1607	3132
4930	2565
3161	3605
1436	1223
582	3793
2303	5809
2432	4129
3379	3885
3050	3895
3741	600
5496	1477
1621	1823
5295	5438
4156	5593
415	471
5674	4114
977	3216
119	786
3442	4134
3470	1927
2834	5234
5650	2103
504	3659
1592	207
5644	1158
2004	38
488	641
4725	1442
3134	4279
1402	3288
4840	1217
2938	5672
4251	4686
550	2707
578	2429
4952	5981
3824	1125
2114	4684
5726	5924
877	3908
5003	688
2585	5105
3517	5070
2774	1281
1008	1356
159	1844
3221	5445
1583	1983
370	4681
4524	2997
2379	1266
644	5697
3603	232
3711	2386
1389	2232
1915	5229
2471	212
4406	3768
625	5859
406	916
1949	4557
1903	217
5439	769
1614	301
981	4173
1640	4105
4375	5282
1268	1048
309	1391
3647	906
383	4545
5168	91
5239	4646
3931	168
667	3793
5024	4799
324	5520
2266	5928
5860	1968
1260	2484
4864	5551
5378	41
3412	47
6	3615
1431	557
1386	2272
1675	19
4152	1804
1307	5971
4118	5582
1492	3150
87	146
4457	69
3270	1968
1416	2477
5848	1848
2780	2872
2582	928
1744	91
2281	1047
4259	3841
1141	3037
472	4755
2185	3510
4520	5337
3880	5836
3438	2651
126	1420
4439	2353
4316	5118
2805	3430
5324	4732
3551	4191
4636	3177
1071	606
5632	2785
2766	2665
5813	4662
5541	4724
4494	1579
1689	1740
614	218
911	5324
3829	5892
561	62
3734	5637
4264	2437
5409	5683
1362	2994
2917	2150
3366	3902
2310	4725
85	4839
1724	1917
2451	2701
4433	3919
3312	1513
48	5063
3011	2128
356	1555
5904	817
376	5770
4963	4982
3386	1985
944	1167
5665	1884
5940	2459
1956	2187
5055	1518
3864	207
3406	5954
3100	4685
4736	1766
4809	3705
1662	78
99	1686
1016	3335
2244	3368
4248	2752
1225	5394
175	1489
5693	1420
56	3322
921	4194
5098	1530
5460	2200
4272	4544
40	515
1380	5718
403	5672
775	3497
2579	3436
3410	5468
1603	2850
668	2190
4743	1496
1310	1419
2080	113
2713	4071
2392	5578
338	5270
4178	5187
2682	4993
2319	3967
4797	5865
5189	3531
2832	1809
2746	2860
1720	1821
1170	2961
5722	1097
3420	731
3867	799
5413	2879
761	2954
2949	5890
3259	5619
558	1010
2833	497
4168	5342
2784	3886
3235	3835
4067	466
349	1382
3299	4743
4203	5017
926	1602
3003	483
5805	3447
4700	5489
3996	1075
337	5846
1052	2377
4818	3334
683	3220
4885	599
5303	5413
930	655
3598	5179
4606	397
2859	2204
3766	359
4159	2653
5811	4020
5425	915
2822	4802
4501	1147
5172	3335
4638	5084
109	1354
4833	5894
4720	505
3723	3355
4385	1316
157	5186
2911	997
2757	5092
428	5296
4089	1075
2755	5231
3423	948
2283	3906
4360	5568
5435	3202
1771	3092
1212	5986
2858	525
1298	4946
3490	3334
3476	3490
365	3110
940	2980
2446	1264
3240	2299
4328	2941
1203	3396
5136	188
896	279
486	797
4215	4681
292	928
2758	610
529	761
2892	320
1060	2909
1401	2794
5051	4487
194	1927
4781	107
2313	1823
3860	692
983	614
468	2226
2523	3301
494	1502
3026	2738
3588	3514
5389	4930
5636	2841
2203	1767
5306	3290
4772	4148
5043	3644
5945	2562
4713	4033
2196	4880
5210	3200
4072	3206
3663	2568
2529	2322
3742	1521
1787	3730
5431	1289
380	4094
1144	4688
5993	2188
4253	1416
1538	5191
2273	2925
2469	3535
1495	2968
201	2
2119	2285
2291	1718
3210	1234
1615	1847
4834	428
325	4182
975	4197
929	410
5615	1788
316	3199
3122	2431
2563	1315
1076	2229
1702	1777
852	455
964	5637
1247	4566
4610	5044
2419	1985
853	750
4792	4259
4582	962
3684	4982
3968	4096
255	5938
2296	2989
2836	3800
3453	4541
1789	3977
2726	5982
3229	4196
462	2503
2875	5786
1186	1442
4641	2241
1739	2331
4594	2706
2730	2127
1200	1138
5799	3356
1806	673
184	1199
3376	3585
5915	5241
5724	3928
1907	4468
5941	3935
4353	2342
3487	1737
4497	121
2044	3844
1677	4228
3836	2939
3943	363
3296	4394
3330	2162
1692	4511
1011	5699
3142	1144
4352	4130
457	4713
1964	921
3729	1296
3648	1574
3060	1599
728	3432
5870	1267
863	1605
2449	262
4329	1351
3976	1831
300	2901
4645	4848
4246	4570
4339	762
3934	4778
3887	1013
1765	50
2043	2250
193	1144
639	592
1958	2485
1043	1868
13	4919
4063	3867
5005	4359
3419	606
1946	5436
3635	4805
3714	3344
1998	3235
4495	1436
2803	4314
1549	1741
5688	822
1440	3665
3904	43
5376	3928
753	5600
4160	5922
3525	4750
3519	2721
5244	3322
3587	2984
3086	4070
4117	916
699	5341
5501	2612
5662	5098
5527	2811
3089	1822
103	1431
752	1267
5311	2512
2493	1208
2868	1967
5795	1220
5463	3166
1875	5813
93	2162
3452	4919
1673	4522
4031	4291
5844	4914
4979	4729
5195	4471
520	2966
1995	980
5734	4168
2320	3933
579	2925
4330	622
535	5486
2885	2123
4188	1106
5963	47
2942	5203
5021	5698
4195	322
3917	4880
4157	3714
1209	199
1202	5225
3962	5195
161	5736
1864	334
4323	1159
5434	4809
3554	3586
5933	5427
5929	1504
5946	3901
2677	5265
4994	2557
1410	594
2520	2321
5746	581
4210	1743
1790	2274
601	2906
3128	4261
5421	947
2558	2959
179	5499
5085	5049
5443	5180
202	2284
4461	2822
3759	4814
4585	2150
5259	374
4530	4300
3407	1192
2382	2159
862	4778
33	4069
2690	5364
5095	4722
469	3117
2776	4216
3610	2917
2888	2235
1867	3702
1507	227
4667	5693
1370	3040
5166	1133
3693	212
2076	2616
2407	2642
42	1936
4153	1944
2605	218
443	316
3559	626
1005	724
2308	4751
1634	2517
1626	4742
2212	4057
3874	3447
970	2673
2093	3830
1738	5002
2381	3034
5952	2498
319	2924
4481	666
3787	1361
3292	2647
5555	691
3174	3050
5321	1832
1303	3984
527	2374
2242	1082
2767	3039
507	948
2061	5589
1406	1079
4593	369
4367	319
430	1007
5906	2606
1127	5277
3672	1635
5833	4633
4627	3169
4338	1738
3278	2747
1110	2550
3899	4433
1188	2744
477	757
858	1220
1384	672
3553	2014
5996	5396
216	3658
5581	3714
3378	5376
3367	5345
5866	690
3010	2858
1299	2348
80	4380
128	759
2613	2067
2840	4692
3063	3128
5739	217
2900	1631
1880	322
2026	4989
1830	3528
3159	2021
702	3747
4445	3330
674	2707
1317	2172
3865	2336
3539	1739
1214	5216
3746	302
3093	5555
4854	4781
1811	3452
2754	3547
4562	418
5344	4510
4549	4217
144	2468
545	3464
3239	5909
3575	345
742	5538
2625	2999
2413	5217
814	3227
5368	2384
1891	1845
12	3679
4669	3756
2886	1975
4351	5859
4046	5213
5479	1210
4791	4050
3681	1204
2791	5240
3111	5863
567	4329
98	4028
4267	3957
3031	5132
3316	1268
2197	4728
555	758
3712	2281
4051	2569
1709	627
5609	2614
3307	2908
4748	688
633	1399
5831	1270
1619	3711
366	5723
998	2336
2857	3559
1704	5468
1312	486
712	5035
679	434
307	1950
96	4449
5903	4753
3879	5182
4795	4102
3508	2821
3306	5582
1717	2194
3792	1673
2053	5626
4991	196
1952	1174
1710	1836
2782	2803
1295	2844
470	2274
5238	1946
1510	4853
3485	4805
3591	4161
170	1904
3694	39
1077	816
1346	5767
856	5364
4149	1252
873	3352
3773	4371
2062	4364
5097	3932
4061	2805
4166	1697
2401	5750
1006	3679
3505	4239
5680	942
2686	5250
3735	4524
3	3446
327	3932
2370	5216
5614	3895
5019	542
1222	2774
5480	4355
2553	1550
4893	784
682	4023
5980	770
433	2450
3048	4275
560	937
3349	957
4181	5933
5557	2102
4587	3258
3187	5789
2051	1736
1240	5133
3489	1811
859	4606
2213	4467
5964	2031
571	4300
2133	2699
4879	2832
987	50
739	4028
4241	1148
3716	2287
2971	4238
5428	2651
2519	4734
2505	3368
1796	939
3077	5863
1276	3605
284	1201
3339	2269
3212	4074
2515	3501
1557	231
1046	152
3522	3123
1762	2347
3959	3311
5122	3597
3271	4697
519	216
141	5005
4777	5118
4584	4090
239	3096
3313	4155
3055	1539
1145	3951
3429	2338
4855	3153
3314	2754
3445	5685
4138	108
2996	4188
2790	2197
3057	1828
2694	4738
5827	3304
49	2308
810	2108
395	843
2065	3857
2246	4999
5117	5402
4965	3247
3370	4185
1560	2529
3580	5188
4783	1813
3130	3296
3387	1417
2495	3173
3488	526
3875	5403
5973	3968
3049	5976
3503	1912
1778	5952
2965	1693
827	3251
4348	3092
1146	1098
746	5022
142	3162
4897	5551
2124	4382
5286	5706
2918	3057
3245	5668
4039	2607
1126	628
4136	477
5689	4668
2373	4877
2881	712
4431	1020
5355	1630
2209	2768
3102	469
3910	1348
5802	5005
4550	5114
1959	3196
892	5326
2608	5884
2003	2143
5352	3762
3948	4114
4652	3085
3616	711
2165	554
577	5206
5198	1198
3081	1322
4534	1852
779	2830
3002	5737
2640	3505
1121	555
3369	756
5961	5752
3319	580
5313	1459
2704	500
4664	5479
3713	3702
2816	5351
854	4281
4942	211
4026	3392
4705	3322
5160	5303
5837	2234
4379	4610
3158	892
866	4570
5871	5530
2420	3796
2487	3393
2824	415
3041	1484
2675	2889
276	527
1185	5045
1473	5877
3894	1849
3224	745
4054	2971
3627	5662
5838	2232
855	1125
5947	446
5779	4895
4619	3747
3915	4401
4938	2305
2657	281
2962	5080
4642	347
4882	1759
1378	2064
1336	5057
5575	1542
257	4763
5309	4639
1913	4538
5834	1035
848	1116
1993	736
749	1767
388	5979
931	5950
3450	522
1239	262
2655	2660
2853	2
5138	337
1231	4775
2182	1426
3827	5846
5013	3183
5103	1205
3186	1275
5598	1739
2583	1098
2981	5538
2116	1587
3764	1498
2787	5978
898	1892
3975	1177
1255	1070
4698	287
4858	4161
1706	1484
1617	2912
5711	626
4595	3092
250	1932
1111	1931
3667	4631
776	5300
4558	2565
3604	4605
1650	2367
4699	3001
60	656
2089	4633
1062	445
340	4920
3402	1940
583	4767
120	1784
2619	3046
5314	2102
2963	4651
2590	1101
1569	3793
2365	1095
943	3532
3650	1931
1350	6
117	1118
4629	3390
5251	5461
389	3236
4158	4524
1911	1617
2460	3829
938	5144
4403	5934
1618	706
733	2219
3802	3056
2109	875
3929	5602
3715	2597
844	1704
4948	3997
1756	4204
974	3121
5221	2604
4147	1292
278	1709
2470	2669
789	1301
225	3366
3563	2102
3856	804
1230	5164
793	3884
685	5296
2611	3858
4443	4728
2772	4440
5889	2200
5526	947
2081	1706
3941	1380
5315	2633
4438	3
293	2894
5652	753
3066	4208
3357	4212
3238	779
5747	1555
5792	3525
924	3880
3981	468
3625	52
3467	2034
3255	166
3686	3742
3965	212
2035	5527
1494	634
5810	4032
1233	3930
4397	969
1768	4579
2440	2309
2964	290
1687	1533
660	1125
503	3891
2282	1708
2919	4361
2998	5264
5232	2237
4230	5024
4756	1710
3389	318
2164	2505
438	5677
993	2426
5338	1132
236	4313
1896	5644
1960	4039
3749	5596
3404	229
4632	574
5830	892
1058	5084
4463	4576
4003	5391
2865	4032
4503	3059
5606	4759
2764	449
2684	5095
251	5919
2251	2853
1359	4028
5622	965
1840	863
4771	5709
3194	2593
2847	1901
1286	2129
662	5368
5358	255
1061	5076
3358	2550
1491	4417
900	4799
1663	492
5751	3309
5956	4243
4202	1836
4164	5158
4591	3467
2032	1166
5243	3450
5134	2785
2641	2578
402	2600
1749	4885
2837	2351
2193	3681
2389	823
3774	4023
1479	1871
5552	5146
4278	1902
4079	915
3515	5530
4740	1256
722	672
2039	4469
1712	434
4432	4845
263	991
5472	2933
5797	3987
58	2713
414	783
3611	1771
2639	1113
1335	3162
3763	1571
5429	280
1326	2002
5205	2354
4866	448
241	4639
1374	3117
3905	2919
2236	5924
2178	3522
885	147
1795	4344
4687	2608
2960	5779
4083	73
4935	1928
4265	1791
2955	4403
2527	742
2967	5266
5185	5866
4176	4505
5011	5688
5992	5832
2479	2468
5523	2599
2396	1450
2007	2371
2524	5445
635	3144
3601	2479
4342	829
2580	3319
3013	3562
53	3592
1190	1429
1423	4846
1500	3446
2138	2104
3507	4686
5666	12
2851	2849
2668	3796
4262	5212
3486	3421
4851	5309
4682	155
2601	5085
5613	3781
3138	4128
4852	908
5591	1419
1812	1631
1249	2609
5165	5324
5219	103
4568	2714
3652	5149
3570	327
4400	5508
4564	1187
4389	3453
5312	3677
933	3508
5817	73
4726	5839
459	652
781	1740
4800	4234
4207	1906
3626	3941
4455	3856
5516	1733
5548	1498
4370	1885
3752	1513
1340	3409
3260	4748
5566	2001
3422	2425
2522	4366
4815	5855
5670	921
2728	2741
5720	3322
559	5988
4887	4330
29	3436
411	2487
2151	5270
32	2168
1816	4280
837	2341
2118	910
4125	2716
2688	2670
5320	2119
5822	5869
5595	637
3394	3823
4222	3644
5944	5076
973	4810
3323	1053
1258	5460
5780	1280
1644	4554
4798	179
2743	2828
842	465
4515	4708
2729	2203
1637	885
5641	5531
3295	1537
1829	3662
1421	5718
5331	4459
3415	1095
3567	1249
4304	5011
5184	5538
3190	1547
792	4133
3071	2485
3569	5983
4937	1710
4142	4174
5512	1085
5121	1146
4936	3369
5196	1279
5009	1146
4396	2922
4731	4936
3990	2086
1989	2599
3264	3960
1084	438
1096	1166
5487	5229
5735	5263
4709	2587
2337	2374
3617	922
5157	2093
1462	2414
2719	2739
358	531
4934	3131
4150	5720
4098	2801
333	1831
2239	1574
5451	1713
3900	1936
5599	1959
1503	3450
172	4792
5056	3301
4567	3978
4969	561
3317	3389
3922	3755
5246	1147
5236	3469
81	731
2441	5148
1629	728
1000	4836
3346	4651
2862	5972
1194	5496
595	2862
3492	3488
2809	3269
3853	3416
2679	1704
3073	2099
716	2713
2843	593
5360	770
1667	5896
1559	3978
4219	140
3748	243
3673	5176
1951	1663
4575	4778
3350	3651
3146	1250
4254	5916
5110	4963
2101	2114
4663	1144
3944	909
4327	3081
5691	1969
4209	4582
3675	2557
5927	4379
5663	2042
763	514
3970	29
5898	978
3107	4463
2326	333
2577	4850
1855	2076
5710	4164
2770	1725
4235	1677
5028	3264
2048	5082
3949	2429
1093	5904
4506	2540
4874	4540
5032	5122
1018	4119
5113	5041
4508	3766
4419	4569
2157	5238
5317	717
422	3906
2526	5994
5339	5773
3690	737
5387	4400
2378	3140
288	3624
2323	1399
1939	2597
1472	1975
532	4400
972	2509
4926	2574
2280	3196
2300	535
2630	2607
2279	3074
5171	1845
3849	943
4224	5839
1721	1024
3816	2053
4715	4826
5957	4641
4838	5648
2329	5714
1990	2042
3638	4765
3920	2190
3315	5449
4807	3905
5012	2329
2473	4672
5062	4805
3799	4211
3411	255
2135	2133
2940	2136
3660	3836
1038	5256
2091	228
1872	3566
918	1020
5574	1246
2882	2649
5006	1335
2439	2079
4768	3490
3025	5988
451	2211
240	1376
2786	4789
2092	176
4998	5705
2073	2473
5417	3197
563	4632
4976	336
4860	5915
5525	502
4975	3840
1658	4241
5887	4147
3595	37
4283	1647
452	771
4415	1497
676	333
1134	3757
4405	5009
2561	2408
4411	756
5603	2119
5953	1559
4876	3750
989	2693
4412	446
208	1203
1664	3912
5226	2108
891	1472
2066	2469
1805	2967
4913	647
3185	2246
1669	5890
2481	1499
653	1350
2456	3642
3108	2341
5249	2751
1050	3458
5379	5154
1467	947
2533	85
1929	4366
1600	494
2856	3930
1966	4350
4097	5277
2893	2739
1019	3335
4966	2366
4365	5251
5267	3603
197	4520
4221	4606
5125	5820
4305	4631
3538	207
5621	4708
1707	3107
5350	230
3636	1135
2474	1547
2010	2336
1750	1739
3192	4878
3345	731
4655	2848
1238	2255
5404	3662
3400	1890
1191	4196
5744	326
1056	433
2179	78
3657	1323
3139	2241
1215	34
834	2515
2140	5474
1546	3714
2756	2255
838	4391
1064	1324
1608	3988
1858	3681
3502	4994
3760	3556
136	5857
543	5726
5749	4917
5001	2384
3460	4520
3237	3594
3809	780
693	1426
4024	2667
4890	1733
4226	920
2328	3405
3847	40
2385	4725
4912	2595
2023	1956
2077	5305
5872	1659
3414	4312
11	249
4888	3587
5023	5472
4992	1496
4859	446
2953	3780
5363	1659
3838	1503
460	3548
2265	5541
5359	4323
2532	3267
1723	4574
3484	666
5356	795
5911	2512
5423	561
1254	4869
824	1528
2245	3177
1425	4047
3036	4145
5759	2555
1846	5187
4981	2849
5419	2616
732	944
3211	2214
3980	5731
5094	4132
4454	3122
305	1821
3699	2013
5279	2270
5248	4238
2430	3430
1815	751
2492	3193
5467	2218
3395	3672
1447	4611
1403	953
846	2165
2970	1713
3761	3580
4014	210
328	5425
4116	2721
720	2222
3765	3930
4358	4639
5816	2639
2106	575
3000	1016
3219	4140
4007	1894
4139	5816
1514	4193
3466	5469
5604	2387
5099	4860
5573	5112
1715	5971
5955	1554
4368	5880
5464	1056
2036	199
3083	109
5381	2723
4988	3486
2501	4865
1236	3424
5788	955
4392	4900
3242	2164
999	875
3972	5198
5537	2763
71	552
153	1536
5629	5794
2424	2577
1974	5831
3189	4875
2494	4412
1865	1247
2926	1459
1595	4161
3504	1245
5275	2086
4964	3132
1443	3007
1437	3875
5694	2983
1488	4871
3401	4250
5139	422
4543	5079
3937	4896
2664	542
3279	5830
4899	5751
725	4800
5412	137
3188	5981
4831	4877
2897	4174
5440	5342
3035	2813
5778	75
5985	3872
1841	3778
5089	2265
4637	4482
100	1653
3520	2275
5625	374
3777	3385
1616	2676
489	5329
4236	5436
4694	1431
4416	4617
2735	4879
2069	4509
4841	4074
4055	5930
5058	4028
1564	5826
1943	4964
5653	3028
2921	1314
1457	2068
3999	1749
895	3929
1633	783
2180	1438
289	1379
1284	4622
5611	1467
2717	4083
3958	4159
1586	1960
5153	3905
5034	2438
3095	5527
2543	4007
332	1258
4721	3959
3769	2942
5462	944
5272	3993
1153	4810
1396	4177
612	4550
2131	5264
4025	4593
2072	4678
3032	719
5719	1852
3855	3081
5123	4300
2748	4573
3171	5416
3833	4679
4154	1261
268	2917
491	1917
2944	5988
566	3092
4929	4137
3135	138
3145	3722
5025	5334
5585	3549
5298	5935
3027	3952
306	265
2294	2603
1545	5792
1207	552
5304	5893
1481	1279
272	1244
5067	4386
1746	2382
4539	452
2932	971
5690	4888
2074	2413
5627	657
788	5180
4123	2736
3441	1302
4823	1517
498	1166
5803	376
2499	5005
2455	342
4485	5041
92	4568
1820	5269
4141	4140
2054	3479
464	221
1196	819
3477	4309
2829	3102
5558	2061
5147	3184
5397	2029
5584	651
2874	3630
341	4751
782	2614
122	1545
3916	4895
173	5625
3882	1624
2206	7
1651	2450
3087	734
2935	257
3068	4392
64	5962
2584	1038
1439	5750
4825	2435
3541	2513
1341	1892
3226	532
686	1776
696	5734
2000	1551
1368	3586
4597	1741
5163	3831
2268	4696
4861	5375
2458	43
5781	5289
1229	1992
385	4413
945	1994
5549	2346
4317	119
3170	439
3983	2242
1982	3211
3527	5486
4322	1769
4521	4737
870	1324
2891	1004
6000	1452
5592	846
3767	2133
3815	5859
2945	5072
5273	4335
4552	1861
2169	2574
5111	3143
2902	4842
89	2435
1639	2708
2318	599
4950	5854
764	2211
2663	3182
1414	5793
2797	3089
1057	5004
5995	3199
458	329
4255	3314
2854	32
3584	4014
1300	2426
3417	5981
4170	131
4661	5610
1540	4123
2391	2913
5247	3057
400	4344
4527	3939
3868	2054
4066	5308
4011	3562
3704	802
4310	3049
3956	3642
3878	866
378	2776
5410	2753
5977	1825
2950	3896
3298	4610
3090	5491
5455	209
4498	2967
1678	298
2126	1543
3115	2124
4706	3932
4811	329
2028	1570
5401	2438
244	5399
5068	1625
2097	691
3308	2945
3731	1663
5485	2631
2207	4996
3985	5271
3825	5916
1636	1806
1506	5913
1961	3032
3689	4632
4987	3033
4321	900
615	3927
1972	840
1652	2307
1130	4108
966	2073
2144	3712
1661	1169
2852	666
2243	5799
4452	1287
1364	3999
5776	3079
5490	5887
1726	3171
1195	459
4068	3501
2556	843
3500	4375
186	1227
3280	5445
5053	4843
4404	1459
3688	4722
4898	5773
4408	2039
5998	4564
4953	1823
3695	2553
4881	2674
5565	1690
3518	4705
3480	3037
5740	4711
1343	3408
4112	200
1001	5558
603	5745
3457	1421
1878	3683
3105	3931
2306	4510
3557	2449
5730	223
2314	5196
4804	4893
3342	1685
1567	2077
5478	1973
5649	1879
528	3836
2240	462
4660	453
3125	1006
4282	3609
482	2578
2804	5050
4247	5448
5437	5915
381	1313
5534	4868
4242	3005
5227	3667
5161	194
4082	5765
1947	96
2145	1983
463	2347
632	177
3807	366
5579	3307
697	3350
1083	1954
5515	4411
1251	1929
4356	5179
3327	4741
3649	695
2380	618
5142	2333
3462	2086
4932	5320
1108	4105
3054	3372
1451	2226
3091	1396
3670	1338
4073	1419
1601	822
9	1121
3300	4224
5561	624
4298	798
1886	1787
857	1584
1131	3406
2863	549
3854	748
2807	3663
767	3768
836	1551
4971	5031
5398	1847
419	537
5128	2698
4223	1682
2915	4564
2454	801
187	4507
3373	3796
5220	2062
5569	4726
1365	1231
1418	4706
267	4492
1941	186
3779	4894
3955	4188
4260	195
1797	5226
5564	3822
3982	4628
5755	3731
3246	3150
2357	2170
2799	3549
2278	2741
5493	2143
5169	3755
1366	1631
4044	1497
1015	3940
4608	3830
3029	923
1910	1378
4547	3159
2142	4199
4774	2096
623	4882
4923	2040
5543	2847
1694	4238
2771	3835
4189	4482
2415	2410
2586	5749
4075	5723
3473	1139
3795	3543
22	1174
5297	5921
311	1794
1012	4291
1308	5992
1924	776
4276	157
2973	5995
5194	3460
4733	5444
379	3731
478	5383
4135	5429
2195	5827
2264	5349
5441	2084
148	3103
5318	5155
5529	828
5162	4398
5756	2675
286	5478
1002	5719
3455	1410
3561	1133
1168	3064
1226	3220
1487	5829
2838	2887
3579	228
3218	4437
5951	4480
5556	3868
1183	1321
467	3047
3811	5508
1895	4562
2552	3193
1375	3244
1900	3814
1573	3586
5843	3518
1553	1805
5771	2631
740	4838
1345	5898
4762	3250
3620	1757
5384	1361
1136	633
1104	4246
2646	3111
562	793
2709	2588
2544	2379
1628	1386
2215	356
3806	5053
5729	3649
4528	1229
3913	4424
3852	2063
4533	748
3923	3902
2594	2268
3332	2381
1107	5861
4470	152
2192	2715
1318	1440
4921	5837
2177	1041
2575	5940
5818	352
4395	2466
5204	1255
233	4820
2472	2712
4301	1883
1604	1854
3869	3581
2110	5243
3634	3768
3440	4074
5061	1151
1271	4047
2388	363
1501	4077
3341	5756
1728	5924
4104	4729
4121	2081
5481	4953
4723	1244
3606	4948
5228	2302
778	4664
1655	4224
1073	5896
4434	5433
2615	864
2334	2472
134	4696
2638	5771
4945	4449
4653	689
3451	1956
5374	405
2436	5305
3843	3717
2937	1684
2041	3943
5616	243
4477	1649
1876	5492
3718	2423
2017	3283
1023	968
5590	1137
1971	2579
5252	5986
1773	2985
5931	2910
2936	1686
206	2207
5018	1164
3986	1237
4483	5166
4005	2644
5420	2776
5942	2657
4535	4513
123	112
4817	180
4029	2458
1103	4773
3232	1162
1184	1991
5135	5123
1475	1604
5253	112
1681	4746
1128	5752
160	564
3545	5381
4744	321
2812	1314
5967	5722
830	3683
67	4987
133	1643
726	5403
2221	4604
104	4920
4500	5963
4042	5976
4902	4919
2404	5692
4735	3775
5405	2814
5415	3907
4607	4951
2247	1949
3698	180
766	5103
1646	4437
4126	4755
3513	4483
4296	561
4730	4769
5390	4625
435	5606
4827	3756
2705	419
3181	170
501	593
912	2483
5167	1225
4718	5981
530	4008
4537	13
4399	2959
82	52
2956	2814
4954	3580
1800	2954
3590	2023
88	3605
423	499
4787	1299
2030	227
5030	914
1881	3165
3770	1445
608	3437
437	1586
5791	3892
5741	1989
1352	2416
1578	3863
4780	4876
3399	1328
4460	415
5842	3693
3164	1745
5703	4431
4518	2429
826	4042
3963	867
5545	5955
3233	4720
4233	2816
4402	1502
3846	2042
371	5026
3710	1044
1206	2047
4293	1785
51	3768
3812	4280
484	5886
5517	3933
5777	5094
158	1311
5895	3673
4002	4245
1775	1995
3526	342
3641	2234
2488	2142
4473	409
3433	2161
721	693
3061	2634
4640	1350
3803	2721
5242	955
4933	4679
1680	4140
1534	403
5476	366
5917	5549
2121	126
224	3100
710	3900
4334	524
5406	4844
5984	5339
5033	2037
5713	5198
275	1373
3365	4419
1269	774
1465	2047
3703	3921
1916	3393
3482	3751
2930	4978
4418	372
3252	2945
3351	2388
2835	3224
2397	2298
902	1123
995	4687
164	1647
1036	1192
3474	798
638	1419
4601	2623
2982	3153
1242	1322
274	4338
4269	1406
3380	2460
5505	2004
1585	4921
3890	1301
3287	3035
5454	1121
3582	4696
3721	3273
4387	417
5800	1934
4863	2988
704	752
2317	1410
4053	2898
1189	793
3148	4805
5107	3533
4747	4328
2464	3517
4206	3612
5814	1182
5294	4500
1149	5495
5853	1572
1272	3103
5502	4327
3157	1136
2132	2315
4944	3939
4796	2743
4997	1279
5069	4443
3724	3356
5174	3886
5849	124
4634	3393
1986	4802
4000	813
1965	970
2974	5066
4442	5946
4040	4655
3354	1283
3118	2555
5407	5708
861	3750
4754	4710
5700	3776
2141	997
3674	5781
5237	120
714	2351
1700	5136
4924	5563
3444	2742
4446	4211
5553	1724
4873	27
825	49
2632	2164
4967	4055
4701	424
2931	4809
2871	2656
235	4269
1293	211
1732	5444
4084	791
2867	5696
893	1168
192	1128
5658	3393
314	3284
976	2028
729	1456
4048	4009
5510	5473
4548	4678
3877	3411
3426	412
865	2841
5908	738
4490	3911
4556	5535
3544	2971
3009	1628
57	4338
3112	333
5181	1239
730	5639
4430	279
4615	4822
343	1413
2531	3972
481	1715
845	2528
899	4508
5261	2207
584	2691
3141	4921
521	713
611	2765
495	3296
1404	1220
4784	4259
2539	3314
4456	4564
508	1187
3020	3419
4779	3354
5369	4695
741	4187
3019	4863
4943	2804
3979	294
2826	1286
3524	829
5054	3604
2737	3957
21	5863
5522	125
4847	779
5073	3195
1674	1023
4519	1775
1979	3990
3340	3486
3042	2381
1793	5523
3628	2471
1529	4040
5707	3085
2825	2782
4949	3054
3706	2309
5325	2753
2549	2539
4542	4919
5910	3174
3701	579
3114	2881
3738	2323
2905	1234
485	4938
3038	1602
3225	104
4927	1890
1563	3572
2049	3282
4911	348
4995	1324
2008	4894
3097	232
4378	333
487	3445
3848	1116
3576	4759
2866	217
4288	2393
2154	3928
4435	5184
5657	1177
5183	2079
2312	5511
1430	2638
3536	3093
2033	2780
5524	2949
5997	75
4816	3883
1613	2730
2252	4300
3654	2755
5576	2860
5408	4738
5365	2778
4111	3287
5200	5221
1859	2306
5307	5100
5664	504
4703	2404
2463	3798
3234	4051
3629	4906
1541	1501
4901	1255
2564	3374
1304	3041
303	1471
127	1173
1213	2706
5083	1787
4555	658
2576	5077
2288	194
4318	4498
205	167
5201	3502
5850	4361
3851	1171
1042	675
1774	707
5804	5928
3076	1921
1319	2410
2817	2414
4635	5542
3506	540
5841	4343
1154	4487
1360	3723
394	2344
4381	2244
1342	1920
3953	5660
1290	5825
4225	2022
5684	847
4856	2740
2622	1991
2411	2349
700	1837
4337	723
1802	5351
190	2282
4080	4983
2792	1418
3719	5442
4425	972
4702	2268
5301	3089
399	1902
3151	4937
2046	3679
3320	3174
2400	4497
5093	2894
4657	5215
913	1009
5758	1524
3564	3487
4940	5103
4484	820
4517	5460
4290	2649
396	5751
1160	2566
3471	2627
3337	58
1699	2162
3178	2024
3043	2225
3127	1067
5572	185
5907	2338
4324	496
3491	4291
1922	4971
3568	3052
3431	3486
4143	645
5546	2337
4346	23
2012	1234
5010	3261
5290	3679
1593	2491
5456	2741
312	3839
5395	5046
270	1209
3924	94
3866	4450
4165	1718
2191	2800
3859	1271
3459	3846
4315	1186
3324	4472
3898	5422
473	5780
3281	2433
4464	3949
357	13
4179	5247
3022	1203
234	5264
4004	3192
4421	5407
3596	429
1282	2803
102	3352
5285	4291
2808	2568
3707	4435
269	1175
4502	4266
3692	3267
3725	2484
16	2029
2230	3502
5618	2773
4654	2602
4984	546
5411	2955
5126	992
4268	139
4052	3876
1548	3043
1919	4036
4451	233
68	1854
3461	4140
5484	848
3291	3921
2624	3666
5302	2228
1055	373
3947	2485
3655	2916
2820	2731
2125	3336
5178	589
5620	1097
2254	927
4958	1439
5332	3876
5347	1500
3179	2195
1933	74
5016	448
3160	3295
2447	5646
2571	1831
3266	2877
3176	554
4647	1508
2060	2337
2823	4390
1155	1701
3348	1600
5607	386
1325	4477
4429	638
4785	3175
591	3931
4947	466
3974	5665
2636	3690
3918	190
3080	808
2598	52
5336	2644
5235	1123
4016	3413
5766	4242
2350	118
4536	146
4447	1731
1761	3037
1409	214
4091	4822
4325	5988
2149	291
4691	1234
3254	4122
5288	1169
967	3424
4676	2579
5949	2392
2683	730
4626	2831
4496	57
872	5221
5343	4968
890	5309
3871	699
5790	799
2687	163
5348	1433
4980	1860
5567	3193
2934	5968
5554	4903
130	2058
4303	5178
3152	1523
5382	2150
3736	1372
4393	1108
4307	4331
5651	1494
5732	4800
3443	1361
4824	4911
4131	4846
3897	2415
2899	4874
3275	488
4354	2843
1367	2716
5847	384
4374	2622
2806	4767
4739	5042
3454	3119
3599	317
1656	1003
4076	3250
2796	502
4915	1283
3889	5875
1411	5358
3696	3328
5145	145
5743	3590
3560	4130
5835	4548
5989	4243
1935	4488
2610	573
1786	1106
3992	1002
3293	4489
687	5469
3276	885
282	2387
5262	5165
398	3035
5471	5260
1112	1438
3198	4483
3136	5128
2112	1142
3529	1504
5920	465
5754	2596
2839	1216
1923	2632
5617	2574
1031	3077
3558	3507
3828	583
5327	5414
4717	911
2224	5984
3449	30
3873	4513
5727	1111
0	0]]></test_input>
<test_output><![CDATA[149341]]></test_output>
<test_input><![CDATA[1000
-78
41
35
7
22
39
-22
-83
108
-121
-32
-54
91
39
-5
-57
-71
83
-26
-11
-96
-116
-78
115
-60
-121
-55
81
3
121
35
-11
62
-110
-68
-66
104
-57
69
-24
-36
-43
25
-80
-12
-125
116
-72
-41
39
-33
-84
-110
107
-17
38
107
81
47
-49
113
117
91
-56
88
-109
-49
72
-124
72
62
-122
100
29
-89
-39
1
-63
-123
29
-41
-106
71
90
-29
111
-1
-96
-3
-103
94
53
104
24
-32
-13
-88
50
68
-21
-109
50
63
78
-85
102
113
-114
-85
106
-104
-64
96
-88
4
69
-70
32
75
-87
35
101
61
-53
15
-24
26
62
-43
121
3
-16
-67
11
-81
9
90
-72
95
22
26
5
20
103
27
102
-1
-75
64
5
57
9
-123
-65
-76
-40
-113
111
114
115
-120
112
-12
-97
41
93
-10
127
24
27
89
-69
117
26
97
-37
-81
-41
32
-12
-99
-90
50
-121
-54
-82
-85
-90
16
53
78
88
104
30
0
63
0
-81
124
120
-114
-104
71
-61
-27
49
-25
-28
-59
4
80
73
-8
-117
-97
-20
-102
59
10
123
-71
-63
23
-73
30
-117
13
26
105
-118
-88
-68
100
54
17
119
-111
-45
13
73
5
-13
117
-5
121
61
-26
0
-97
108
-71
-96
-78
-101
54
86
81
-65
4
118
-115
117
-28
18
65
-2
-96
31
-94
-121
61
-44
22
-82
120
83
74
67
113
-117
126
75
-95
93
36
75
17
-3
-86
-61
-50
-100
-108
-8
-104
68
-51
-10
-38
3
63
-42
-33
75
-95
61
66
-103
-112
37
-90
85
-30
-32
-88
-7
55
89
18
118
-48
-98
81
-44
-91
-101
42
24
-79
40
-88
106
-111
71
89
119
77
-90
-70
21
118
108
-17
37
113
50
-73
-66
18
78
-96
-120
109
88
119
101
-24
-25
3
87
-107
-100
-13
-98
-65
98
20
32
-61
-13
-57
14
33
-97
-77
-59
-45
73
-73
-14
-34
-78
34
-6
38
-6
39
-103
-122
99
-117
-55
32
89
-95
-27
-14
-81
120
14
-85
44
83
-50
-68
70
89
-5
-79
45
-114
-34
-62
11
2
-107
-91
-118
73
-74
-89
-104
42
53
-5
103
-101
-120
82
-73
-18
8
-84
87
69
-101
109
-23
75
-112
-77
-25
38
-54
-25
-29
-89
33
-110
19
-60
5
114
12
73
100
-50
-50
-54
-50
6
1
-36
-40
110
126
-123
-66
92
17
-16
76
-128
125
101
-2
116
-63
121
102
-108
-102
-126
-50
16
73
78
31
64
-106
21
1
55
21
-85
68
-102
-88
-6
127
-77
69
-80
-10
-63
-6
53
-63
-110
46
-32
43
84
41
106
89
-87
-41
-93
44
-7
-56
99
103
12
124
-60
21
-40
-34
-114
37
-105
14
-13
88
29
99
125
93
105
-79
68
58
122
-57
100
-19
100
60
-82
83
-94
108
-98
74
-82
-67
-115
18
-49
39
40
-6
50
-13
33
56
61
-62
37
24
32
-46
13
89
-83
125
88
-45
105
2
-39
94
-29
-120
-83
-16
68
96
112
5
40
-117
-80
68
-84
124
-94
95
-56
30
20
59
-32
25
-93
81
-107
82
46
84
-31
-80
-117
19
99
38
120
-94
-9
-18
-44
-76
-118
18
15
76
45
49
-33
-107
103
-128
52
13
-48
15
111
-23
-37
78
-50
-74
-12
-49
43
60
-53
77
-25
-89
-17
-18
33
-23
-98
-59
43
90
-36
-101
62
-95
-62
-17
108
-40
25
59
-41
-21
39
121
33
65
-55
-26
35
-97
-62
6
-30
73
83
-24
-66
106
12
-85
-19
-75
-31
65
40
77
-128
115
-92
-30
-30
37
68
29
32
-36
13
63
-119
125
-38
5
-15
88
81
-50
75
100
21
-1
123
-52
61
-89
101
-85
6
95
74
20
-60
117
84
86
31
73
111
126
123
-10
91
29
-72
53
-1
75
28
127
1
-21
-115
114
-109
49
4
118
-112
98
62
-96
-57
-37
-75
-41
-105
85
-50
53
-68
103
84
-81
104
76
37
-7
-107
-25
43
-92
-102
4
-114
-118
-3
-31
40
107
-119
-19
58
-40
-96
-49
93
80
-46
-86
-69
-86
-82
-96
126
-78
-41
-107
-119
23
91
53
102
-123
65
56
-128
14
97
-28
-109
-50
121
-44
96
-49
124
-7
-91
42
45
-34
76
111
-19
48
-29
71
-47
125
76
88
-8
60
-74
105
28
14
-52
-57
102
67
43
-25
-121
-96
26
76
4
95
117
-85
-47
120
-21
78
34
31
106
-74
126
-114
-42
-124
21
4
1
-102
83
14
-40
125
-75
5
-38
-3
-36
-40
-49
25
-32
11
-74
29
-26
0
-1
13
-11
118
-6
70
5
79
-112
99
89
-106
49
94
15
-64
13
-9
-10
50
-121
90
-97
4
-26
-4
-73
5
78
-58
-109
-1
-16
117
13
60
125
65
-113
72
-32
-68
109
-7
44
-2
120
-83
-45
-1
-48
-45
26
68
-7
-83
-55
-66
49
83
39
-17
1
-4
37
78
19
121
-38
-19
67
2
47
89
-8
53
-36
-63
-75
92
-109
91
-21
-17
122
4
18
90
-33
39
-9
-1
40
-33
88
127
8
96
-82
53
-7
-109
74
4
-26
0
772	372
898	772
326	372
693	372
263	772
611	326
420	372
943	772
842	898
729	842
17	326
643	420
58	372
123	326
535	58
467	611
75	535
917	535
194	58
155	194
945	372
974	123
385	772
102	420
984	194
257	943
361	984
327	984
165	327
205	17
330	898
952	102
219	772
749	943
568	17
294	385
759	693
576	385
939	772
371	939
428	330
249	372
503	194
419	759
896	219
824	611
389	371
55	917
357	123
784	428
360	263
990	772
344	749
854	576
918	419
101	419
268	165
104	389
248	389
658	984
965	294
472	102
2	428
496	535
148	155
329	326
661	55
235	361
844	772
474	205
236	467
321	952
607	148
646	329
19	419
915	385
377	360
645	661
967	824
845	385
118	420
154	329
608	658
872	896
220	19
640	918
197	268
408	915
180	845
11	148
493	845
80	357
143	759
665	154
832	945
567	643
825	824
768	917
592	915
173	768
612	759
273	263
696	75
223	17
156	611
59	101
162	592
714	984
909	205
684	493
619	608
501	17
753	965
836	118
701	576
355	896
135	896
919	236
717	568
282	249
508	102
328	321
340	472
368	759
308	135
394	330
52	749
655	197
783	729
350	389
633	308
264	633
650	223
941	155
192	693
106	967
274	156
523	75
304	257
189	990
5	360
960	274
782	385
532	842
125	896
27	523
95	118
214	389
882	328
546	939
139	768
324	661
184	717
507	784
641	118
773	55
92	568
349	749
122	783
827	917
732	967
113	371
35	75
28	257
320	197
332	827
438	104
232	139
393	696
618	611
813	693
364	197
702	273
458	965
427	143
277	106
621	324
446	59
675	836
881	394
800	984
149	118
384	361
422	945
31	372
596	180
511	75
424	511
68	102
788	749
935	389
469	304
573	75
651	612
680	967
346	919
922	19
386	357
191	469
107	304
38	340
998	825
550	205
387	75
870	420
670	696
744	220
334	264
476	422
860	882
543	693
672	386
838	952
549	567
833	52
572	327
213	833
996	220
536	824
789	643
575	349
452	2
582	896
533	438
42	759
289	800
937	371
843	749
354	476
91	550
676	2
681	289
145	472
352	882
757	384
494	945
792	843
763	909
648	572
76	945
999	326
425	213
225	792
487	329
417	235
151	550
580	670
938	732
426	346
743	469
921	618
292	661
459	824
959	361
631	106
423	919
463	784
382	759
497	921
70	76
597	180
704	419
682	792
142	493
215	389
747	257
866	943
823	670
26	836
561	139
591	377
53	633
178	155
309	59
976	75
30	782
291	324
111	225
404	535
211	941
127	693
369	676
897	833
171	113
605	148
913	2
206	205
395	75
632	568
819	511
202	377
86	446
259	645
388	165
54	743
815	633
239	937
407	211
147	896
69	52
454	395
927	26
907	332
141	236
953	344
958	939
994	953
13	567
41	320
218	148
65	355
477	387
875	178
491	189
793	202
614	139
894	26
957	681
146	123
711	793
67	68
233	684
415	423
260	732
152	487
659	935
961	232
705	643
818	205
790	17
44	621
706	423
363	744
657	915
224	420
679	155
637	621
668	608
736	711
495	965
929	561
785	845
513	747
770	92
430	69
873	646
695	961
553	225
245	661
64	363
652	215
112	424
723	184
510	546
25	386
228	76
848	427
916	147
351	104
600	729
196	763
401	744
505	922
880	684
325	211
132	92
856	385
795	909
131	363
443	274
217	326
663	532
103	633
403	788
226	913
221	294
538	352
950	896
914	723
397	191
978	935
864	633
504	711
133	218
392	236
826	344
442	618
8	927
237	632
391	825
77	355
204	184
314	572
891	773
585	958
635	984
229	237
336	896
158	860
692	549
167	790
89	189
153	860
441	496
578	668
867	220
448	59
319	508
851	133
520	619
500	364
489	714
322	76
216	508
649	582
771	919
954	229
735	196
599	641
451	167
799	520
506	611
667	344
944	494
409	384
252	580
955	344
51	388
6	156
71	575
589	954
685	650
7	711
923	640
629	867
726	795
383	31
587	58
765	41
708	489
936	393
416	749
594	600
566	53
766	422
482	661
445	717
254	143
737	215
531	226
73	141
338	334
571	487
807	965
157	147
817	259
471	58
616	955
255	13
678	998
310	5
791	191
88	766
359	308
584	943
834	680
988	223
303	944
32	415
396	64
647	156
140	508
544	113
262	864
300	650
453	217
144	469
738	148
796	228
150	334
906	147
356	646
904	914
615	505
879	873
579	648
285	219
461	974
124	770
777	415
240	152
780	922
889	167
794	355
166	872
660	240
72	612
138	103
534	322
375	506
519	679
802	550
687	277
307	580
374	918
182	408
694	374
345	76
246	643
49	891
724	385
276	749
465	794
707	939
728	824
46	394
739	773
903	314
175	374
283	310
381	978
137	425
989	773
376	430
560	465
12	657
18	273
318	714
63	880
9	659
811	670
606	226
524	371
488	59
980	790
181	984
754	387
981	732
574	629
413	592
884	981
528	658
577	30
284	216
210	575
617	216
244	461
951	617
786	263
47	76
492	670
94	489
642	811
863	118
748	204
405	732
622	446
207	584
868	747
186	906
231	59
542	842
130	255
270	167
84	218
353	508
379	739
933	353
654	870
752	651
539	310
85	139
893	260
669	153
365	54
869	355
979	274
761	654
267	695
947	635
801	213
87	73
21	838
120	426
983	944
185	92
690	532
10	866
769	41
857	711
190	772
829	807
299	397
170	577
275	981
174	106
982	999
901	127
483	113
431	84
435	864
839	984
781	133
926	501
169	408
40	51
20	523
119	678
436	446
751	990
272	67
972	763
251	453
545	667
767	403
808	236
644	424
208	381
715	678
861	834
627	579
160	215
117	219
626	616
517	46
432	356
731	580
367	611
725	843
247	771
390	85
526	492
991	73
624	998
362	359
56	651
556	592
730	618
234	951
816	843
301	75
529	489
287	190
455	907
478	909
97	921
809	780
347	310
23	118
858	106
271	192
129	936
613	567
604	458
311	495
691	476
699	214
885	917
973	726
134	491
548	556
774	186
787	768
433	474
878	572
758	857
620	754
485	723
555	11
865	46
60	367
200	832
718	869
305	904
296	825
512	72
820	332
179	264
399	403
810	284
583	38
733	641
821	597
335	528
177	856
230	774
970	483
986	711
159	967
840	927
269	707
559	424
261	269
814	305
563	818
183	255
697	377
298	783
569	670
946	553
683	291
581	367
48	75
39	839
812	767
862	641
509	854
830	863
828	965
447	510
33	122
110	607
480	946
562	251
412	208
128	467
34	681
83	328
908	349
671	178
81	395
499	356
721	232
995	89
656	531
198	566
776	463
779	420
686	142
883	692
540	792
522	420
975	510
418	793
366	952
212	599
266	122
265	270
136	783
713	559
722	282
855	106
473	827
45	708
847	451
258	875
516	721
859	883
547	660
806	77
762	110
199	304
209	683
243	224
625	738
837	430
740	624
934	693
902	351
521	921
527	800
341	213
719	349
846	179
222	308
93	505
595	86
479	69
323	702
993	397
168	614
756	389
90	787
666	423
720	699
764	472
628	976
653	577
602	826
968	978
797	968
343	389
886	93
241	637
14	641
163	789
874	128
331	960
662	91
342	935
161	53
440	955
716	965
987	241
598	55
43	901
61	476
835	197
1	869
172	771
593	686
775	344
317	355
227	838
925	97
402	438
439	495
486	376
370	583
464	906
636	482
710	477
79	142
253	435
603	506
288	136
746	463
888	117
457	369
109	177
899	362
78	363
411	854
727	858
992	276
911	54
948	128
414	230
971	595
279	198
98	917
378	765
931	879
803	442
755	545
121	843
698	944
449	652
114	587
256	605
798	285
742	929
964	687
108	523
15	431
278	216
66	19
62	874
841	577
36	756
537	455
634	144
498	85
912	845
930	465
962	791
638	55
831	687
514	206
969	719
557	811
187	142
410	83
963	500
293	236
315	696
429	658
876	616
977	5
306	277
406	477
74	580
601	875
525	831
24	476
530	578
565	720
750	381
337	663
16	486
484	34
956	224
50	121
481	200
741	138
552	761
895	763
734	202
890	234
238	549
280	650
564	530
639	649
985	177
250	355
316	107
502	528
852	401
380	104
630	666
37	720
373	43
966	800
609	695
437	562
558	646
286	184
689	495
96	710
295	844
456	534
518	983
281	549
176	158
623	329
115	961
877	216
462	227
201	304
910	110
745	746
588	907
297	183
586	134
778	381
709	248
688	337
900	250
712	776
312	502
997	343
570	230
541	380
421	58
188	620
203	446
1000	310
551	37
116	612
554	117
444	387
339	631
470	964
892	826
664	672
703	75
475	659
313	16
822	604
850	829
3	874
677	636
333	503
928	119
673	346
760	796
942	452
105	729
949	754
193	880
590	150
466	248
348	152
853	382
515	900
57	426
400	378
126	241
82	513
804	287
164	565
932	183
302	915
920	804
99	217
29	61
905	72
849	930
398	172
358	395
460	200
805	781
490	632
100	754
674	549
450	394
290	193
887	987
610	971
924	169
195	74
468	540
940	266
871	950
242	957
22	481
4	788
700	671
434	862
0	0]]></test_input>
<test_output><![CDATA[25849]]></test_output>
<test_input><![CDATA[4000
113
61
66
-87
-1
-111
-112
33
-76
90
-71
93
29
6
65
94
-118
-77
-97
85
-76
68
-7
91
-93
-76
48
98
-49
-85
28
107
-122
79
25
-6
-115
93
-62
-57
10
120
-4
-73
-95
-63
55
10
-34
-89
-16
-42
-45
1
122
-76
2
90
-1
-71
125
-117
-62
-88
75
-112
-90
101
14
-108
-12
-83
-29
78
89
5
-118
-112
46
-16
-57
29
-4
101
7
-68
64
-128
71
-118
107
120
50
-108
45
-47
-119
-91
-13
-45
-56
93
-81
58
7
-125
-41
47
30
-100
-80
119
12
-67
-52
-21
-102
-99
-47
40
59
-18
125
-121
55
-18
-25
80
8
57
8
42
4
-31
121
-42
61
-64
126
29
-90
13
68
7
119
46
103
78
-46
-51
-73
18
-90
46
60
-50
-44
-64
120
-117
-112
-14
-21
84
10
71
-35
-23
78
-83
87
-72
105
11
115
8
-50
25
-43
120
-8
116
122
-88
80
-14
-79
54
80
50
102
-20
-23
120
-90
55
34
-72
96
-37
3
-15
105
-26
-79
-67
-61
-30
-38
37
31
79
83
-71
-96
81
0
-31
-30
-91
-11
110
59
-39
-38
116
65
-67
-108
92
-116
21
34
53
-67
-112
-60
75
-66
-2
99
-5
76
-67
45
-59
-77
116
-128
-93
-39
4
9
-103
126
-68
45
-114
-62
-51
-89
90
-24
-3
115
32
89
-97
-21
-34
-20
-62
49
66
100
-87
-52
-64
59
123
-106
-31
-98
60
-43
-34
-72
-4
-88
109
51
78
-91
-37
-4
-4
-64
91
71
-7
110
-98
-44
-105
11
-93
112
-6
121
-47
-66
-51
11
67
55
51
-95
99
112
1
20
-70
-101
42
-44
6
81
123
-49
-115
-113
-120
-107
-78
-2
-26
-70
-58
119
-102
124
32
-58
-46
-90
112
-82
-45
-75
80
46
51
56
28
3
72
125
4
110
-32
105
95
55
50
-88
66
-14
21
7
82
-127
112
29
-42
-38
-14
49
17
11
3
88
-50
123
-6
-34
60
114
-112
-25
-4
-37
-108
86
121
73
-31
-18
120
57
-114
-73
-16
-105
100
-92
27
-125
-107
114
-51
84
-86
-45
5
-35
-66
-52
-63
-16
-22
92
23
33
0
94
-126
-52
124
-80
122
90
-73
-107
71
-65
94
88
22
71
35
51
77
-109
-78
110
28
-34
-25
-53
84
-122
62
34
125
-57
-117
73
35
-55
-21
54
112
-35
-6
104
0
3
70
-125
-16
-79
4
58
56
-49
2
113
59
6
-35
-93
-99
58
116
-126
85
85
-100
-34
3
71
22
-56
-125
75
-66
-9
-62
107
4
107
-48
70
-96
79
55
17
-126
36
-116
-36
8
28
67
22
116
-60
-57
84
-99
-26
-53
78
-27
-82
-38
42
106
11
54
-2
-127
88
-33
-112
96
60
-14
96
26
-49
52
-24
-47
-2
-17
34
38
48
-3
75
-11
42
34
-25
64
47
-97
5
104
108
3
-60
-93
-108
69
22
-86
-56
16
-60
-78
-71
94
-78
-98
16
72
101
115
14
28
-62
12
111
-79
24
15
-107
-9
97
31
-30
-46
-59
83
102
41
96
-25
-70
58
69
50
43
48
-61
-40
27
-9
-25
65
-91
79
65
74
-128
31
-21
58
38
12
-56
-9
53
75
10
122
21
-77
-9
-128
-37
23
-20
-126
109
-46
-94
-24
-25
-93
-80
122
62
-68
81
23
36
21
104
-87
43
6
-63
88
44
21
-102
-2
-22
13
98
-37
-13
80
-64
-117
-57
109
-41
52
60
-11
-55
4
33
-117
121
-37
34
59
-106
68
-21
13
-43
-86
-111
-39
125
-55
45
92
41
98
-54
-116
-55
51
-127
41
-21
38
-30
-107
57
-55
-106
-27
66
-2
67
56
125
-12
-80
71
-118
85
42
62
-68
-63
38
-53
-43
124
39
116
16
99
-30
45
101
37
-96
42
8
-81
-27
-14
51
-24
79
-75
37
-97
-64
-33
107
-63
-64
-19
94
-48
28
127
-19
-112
-45
-81
-100
4
51
-94
-51
-104
64
92
62
-96
85
-39
-44
1
14
89
-105
46
100
-5
-3
87
26
-115
107
-35
89
-93
-7
8
-105
-26
118
-4
-67
-81
-84
-23
-120
-43
-28
-125
47
-61
-83
-78
71
-51
-38
-118
-28
-60
-54
125
2
-57
-20
-49
35
93
-127
75
57
-63
-92
53
-59
125
-120
127
65
58
2
63
-68
-41
71
97
-60
-72
-10
-103
-120
97
89
-100
62
67
-24
-112
-61
-43
14
-63
-127
-25
48
-107
-106
52
-20
-62
51
54
-98
-66
65
62
41
120
75
-61
-12
69
-104
-6
50
29
-105
-88
103
7
-127
53
39
-46
57
1
33
6
119
-5
93
26
37
111
-62
-25
9
31
-37
93
-91
-106
-37
117
91
-71
-34
102
-43
-97
113
28
-92
-94
85
-26
39
-74
-128
111
-81
-6
101
-17
-32
-115
117
-94
91
-93
-26
122
-102
-40
-77
17
26
-60
-28
-31
-64
-49
15
-73
118
70
31
101
21
-81
84
-73
-121
90
-117
-87
45
57
-64
-41
126
-15
-47
53
-15
49
-124
0
29
67
-52
-11
31
-31
72
-64
61
73
13
-73
-55
-108
-91
-56
71
67
87
-80
-46
27
-87
110
-69
51
36
-8
116
75
87
44
-84
95
31
9
-68
124
37
31
66
-45
-89
68
11
12
124
-119
55
-36
82
109
-105
-38
59
80
90
-114
104
42
-23
-53
51
124
15
63
99
-121
93
73
-84
-67
-51
10
118
117
-91
-65
-32
-30
-98
78
3
70
70
30
123
99
-93
44
36
50
25
92
33
-40
-115
13
35
-42
-53
-17
-25
-128
37
25
1
-80
93
86
-39
-69
-58
-64
-13
-92
-91
-111
115
-112
-35
53
-32
122
-52
-92
40
40
112
-18
-28
94
-50
23
-34
81
-108
38
-48
94
-3
121
111
-4
-11
91
-88
-16
126
-39
42
-64
82
-47
36
105
-55
75
80
84
-2
12
48
-121
45
105
-104
25
96
90
108
-24
75
-49
-85
-114
116
71
-84
-112
-105
-98
-88
-39
72
38
121
103
-38
-6
-95
69
-128
-113
-114
-71
-78
-116
29
-66
-46
-36
92
-76
16
1
-108
87
-117
-85
-121
-18
-72
-119
-10
-60
8
95
102
-36
-59
89
36
-31
61
-97
-121
92
35
41
117
42
50
-43
40
44
19
-74
50
64
-127
-81
-65
112
-85
65
27
106
-38
-94
116
48
83
15
-32
17
127
98
-94
-40
73
-25
-87
67
-56
108
89
-73
30
-105
-114
49
-96
125
-34
-128
55
111
31
-78
5
23
41
-52
76
-59
-35
-66
-116
3
103
-107
-20
111
-65
-13
-37
-54
118
-68
-9
76
-81
19
46
58
108
-123
35
-69
11
-125
-45
-24
16
22
120
34
36
-50
-82
-88
94
-4
-44
104
-62
32
-75
22
7
-91
103
124
-98
-52
116
17
-17
-25
56
-52
-26
-57
-118
58
-82
119
-97
-49
-68
43
42
122
16
115
-56
123
-73
-76
-100
121
-107
-39
54
-49
97
70
-70
40
-15
13
62
75
-72
101
115
56
-115
88
-120
115
-83
-69
75
-96
4
99
-110
80
-88
-106
-39
27
-89
-64
44
-17
2
103
72
-89
-7
97
-3
-33
-119
69
-42
7
52
31
-4
-73
0
104
88
66
-62
53
-8
-114
-100
-82
-76
35
-59
-62
17
-127
-120
25
101
-73
-112
74
60
49
98
79
-5
-46
43
54
-61
67
-68
24
-104
-118
-45
79
-61
-34
-100
-28
116
-71
119
71
-84
48
-4
67
90
-128
60
48
-59
-23
74
107
41
-65
-5
3
-91
-66
-23
-75
84
-98
-66
27
-69
-25
-81
32
99
7
70
-73
-58
-95
101
-51
112
41
-120
123
94
-82
74
-127
-86
-10
43
-16
106
-48
-112
38
-43
-90
11
-1
-89
82
-35
74
-57
50
-71
122
39
127
-53
-98
-20
-38
-7
-108
-48
40
105
121
-60
-96
67
99
-39
34
-72
83
96
-53
67
101
80
-58
46
74
-23
101
89
-8
-105
112
55
-96
25
-67
25
-31
-30
0
-81
59
-64
-27
-53
-58
-69
92
105
36
64
52
-19
-76
127
-20
-85
8
17
-58
-84
-102
-34
28
-81
-70
62
-9
111
-53
94
-34
36
-81
-26
-20
76
-128
-40
38
-85
-127
-69
11
-111
84
-6
108
91
109
-121
125
60
-58
-61
45
62
-44
-94
-77
-125
-69
10
105
-47
-66
125
-34
78
-7
-8
38
-121
82
27
117
-73
-83
-119
-19
71
95
-110
-77
-111
-27
16
72
-23
-41
-114
23
-34
23
-80
74
-67
78
-49
-30
87
-103
-29
7
4
127
-90
-100
-24
39
-10
23
117
-57
123
-112
49
96
-117
23
-70
-87
74
75
7
72
22
41
-16
72
34
33
-15
-56
96
111
43
-16
-91
-88
-85
42
8
-109
-17
-114
-117
59
-90
-99
-3
66
-72
51
30
120
-122
-73
5
-84
115
-107
-65
-61
-93
-18
57
7
3
-114
95
-63
-119
30
-122
9
-67
-102
7
-35
120
6
45
113
-21
93
82
-58
-28
-53
68
126
77
27
-18
-17
-11
115
52
118
-108
63
30
13
9
107
57
32
-27
-43
58
-99
45
2
-27
75
92
16
45
92
-88
-21
-99
69
-122
-60
-10
-51
112
-65
26
100
-26
-20
40
-73
-77
121
-23
-127
113
38
107
-92
79
-8
-21
120
18
50
-8
99
90
-127
-42
-86
39
119
33
-122
-101
58
-78
123
2
126
-57
-27
15
-80
93
-44
104
116
-31
25
102
82
8
-95
21
-84
-4
2
-125
-12
-72
84
55
28
-75
66
-1
77
-58
96
-17
-37
64
-64
-90
121
95
-64
-45
-87
-27
37
-8
119
4
110
110
103
126
98
-86
-84
11
-20
-66
-102
-5
40
34
94
28
-66
-75
-19
-34
111
-1
58
-75
-19
-71
-84
-65
-16
-113
-49
-89
-122
36
74
-55
-86
87
17
-105
25
-59
-37
59
97
-114
-41
126
59
93
-102
-24
26
-94
92
40
4
34
101
-73
-95
-78
-62
-71
-110
63
60
36
3
18
-117
35
-124
82
-58
-67
20
-53
30
-78
127
-19
-52
-91
-21
24
72
-128
-83
23
-68
21
97
-22
-72
1
57
-56
39
-42
-107
100
-126
121
-44
112
67
-56
106
95
-99
-128
51
112
106
94
8
-24
101
-123
-113
-98
-103
32
87
-67
25
72
36
-58
-14
40
-121
-44
94
95
-78
36
58
-91
-117
-44
-70
-78
-1
-21
92
92
-103
-102
26
-1
83
-62
-28
33
-84
-75
77
86
-6
65
-123
98
2
-21
-121
-98
-58
120
-109
-99
-98
-78
-33
14
-118
104
-118
-28
-57
-73
-47
-75
-96
-120
-123
96
-121
90
-68
-13
100
66
-56
-52
45
47
101
-2
-73
115
54
-10
-52
127
115
94
125
-18
-36
65
-71
-58
-15
112
31
-6
100
37
17
51
-49
-25
10
-49
-93
-83
49
42
96
70
46
29
12
-8
60
-59
-34
104
127
-122
58
-71
-103
79
-30
-8
120
31
106
-72
113
-56
-20
-7
-109
-13
-2
79
53
100
-31
64
-46
127
-5
-19
23
11
-121
-11
57
55
-116
-106
-116
-38
11
21
82
-1
125
96
-48
-95
125
-13
-88
-77
-63
-8
98
100
78
-78
76
-96
-20
27
-124
-38
-40
-52
83
9
-70
30
-68
-16
-42
-113
85
-93
-122
103
86
71
-24
-101
-16
25
-44
-15
-32
-78
17
101
67
-119
-56
-53
-84
-71
56
-73
116
4
-84
-102
81
24
-86
45
42
18
110
19
42
65
-105
-70
20
44
31
-126
-42
-42
-112
33
96
64
117
70
-74
48
15
124
68
49
74
81
115
-37
-17
-72
121
84
27
-83
117
23
-16
23
-69
-12
-118
-14
108
88
53
-83
75
-49
-35
-47
-53
-57
-58
-28
109
-105
125
-115
72
-64
14
-7
-23
114
119
124
94
82
93
124
-114
122
-2
-117
-52
-63
103
-45
-85
61
-26
-73
19
7
-61
-73
-108
62
43
-108
-5
79
109
-75
35
115
105
-54
14
121
68
-81
52
-59
97
-109
27
-103
-115
89
40
-109
122
62
-75
119
111
-67
100
47
61
-80
-78
16
117
-73
-49
95
-40
-35
-83
20
15
121
86
-35
-99
83
-124
102
17
8
107
-40
-128
-80
-38
-96
50
-67
-126
113
-100
38
-107
-116
-114
-58
-108
63
-82
-1
98
-85
37
-94
-100
-53
-104
19
45
-78
90
-88
28
20
-32
83
-87
8
117
-127
-103
12
46
65
-50
74
33
-87
26
26
-46
117
85
-57
-18
-14
-83
-106
60
27
62
4
-48
1
-29
80
-126
112
75
57
-98
-49
79
9
-35
72
-126
-46
-108
41
10
-8
44
-118
-81
-17
-46
49
50
70
111
-78
-32
-27
-37
-38
102
-109
78
78
-25
-69
23
112
76
111
-112
-126
-36
-83
81
14
12
-31
-92
-123
-104
-84
57
38
-46
-28
27
33
58
-36
-29
-3
80
-27
44
55
-90
20
70
44
57
70
47
56
1
98
-66
32
-57
-34
34
-83
55
-123
-117
-102
54
119
39
-79
118
113
80
48
71
78
4
113
-80
-50
-107
-54
-66
-105
-95
-77
28
121
69
38
-28
-10
-114
76
-75
2
48
85
6
7
123
-89
-71
44
-118
60
-13
-41
-66
69
44
112
107
20
-126
105
-48
56
83
123
77
-22
10
50
-48
-88
57
-85
-111
31
-23
-99
-1
78
46
-106
-7
-23
-2
-121
66
-5
66
-125
47
-48
46
-60
-93
18
-50
-17
61
50
-30
-104
-48
9
-20
9
20
-64
-121
63
-101
-19
-6
54
6
-2
13
103
120
-37
28
-114
75
-57
105
-80
2
-121
-74
93
127
-57
20
51
119
-71
-10
-93
34
-1
-119
-8
55
-53
72
-108
23
69
-53
125
72
45
-33
25
38
-63
-36
54
-43
-31
51
77
122
113
71
8
-85
-1
126
1
36
-91
-105
-51
-69
49
62
57
-106
-124
-35
-45
-101
56
-74
-83
40
-122
47
93
4
102
108
72
-106
-9
35
33
85
34
-84
-84
-128
122
88
-56
15
103
4
-84
-23
-124
-18
113
87
69
-57
-47
-71
-35
9
46
120
95
-118
-43
59
35
82
-123
94
107
-87
43
-96
70
117
-16
27
-75
-61
117
122
13
-92
93
102
-100
58
13
65
-113
18
-81
23
19
-76
125
-47
-69
121
60
-84
34
-99
6
-22
-47
-107
77
-56
99
-93
29
-81
-25
-89
-95
-82
-123
56
-23
40
101
-13
-22
-54
-52
19
-57
-64
-120
67
79
41
-113
-80
-58
-56
-29
97
-24
-4
-72
-53
43
-14
-39
-96
69
25
72
-23
-18
-42
36
84
-25
122
-48
-49
59
113
82
85
-59
-69
-7
8
-14
-95
67
-127
-56
-96
-3
100
39
-86
-84
55
79
-114
44
116
-93
-76
-105
-36
-83
13
105
15
97
74
-31
90
-90
76
-86
-48
18
-36
-70
-100
-11
-99
123
-107
-102
62
40
19
-55
-12
122
1
-112
40
-123
52
68
109
-36
-5
-62
-76
-4
-8
-6
-61
-24
46
-81
-29
16
90
120
-39
119
-121
11
24
21
-35
-70
53
123
-70
62
-101
-75
4
-76
-128
116
-67
-27
24
109
-41
-54
8
-4
74
80
29
13
101
88
62
60
97
2
-97
59
60
43
56
116
-59
52
118
-16
-13
5
48
120
122
82
-36
-6
-96
29
3
46
77
125
-14
120
98
-99
-77
17
76
7
59
98
-39
35
-27
-80
74
-6
31
-2
-87
64
99
47
93
-110
106
108
-5
-4
-100
-59
95
-66
-54
27
-4
80
31
61
112
-93
84
81
91
-86
36
118
114
25
0
-89
-49
109
3
-30
-117
44
40
-118
-113
110
-69
11
-89
-100
13
-68
-39
120
108
9
-12
93
82
-47
107
-56
-35
13
100
24
127
-77
13
-110
-9
-38
47
-88
-128
30
5
123
72
70
78
-98
35
36
-95
29
-127
-67
1
-66
-98
-86
-79
-122
-8
-66
73
127
6
-23
10
-71
39
92
111
-113
-39
-18
4
43
43
-65
123
77
117
27
-3
71
70
-95
-66
77
-98
-92
-44
-21
93
-47
73
-41
-4
18
111
-23
123
-77
115
104
-102
-60
53
-121
76
-66
87
47
105
105
-107
-1
-93
-4
84
-110
-69
-122
125
0
-11
-114
-117
-89
-55
-10
-29
43
-37
38
100
-69
45
102
64
-106
-109
-118
10
-50
104
-43
16
76
-128
24
-22
21
93
26
83
-52
-90
60
56
119
-44
93
15
-122
47
-4
106
17
-7
-100
-52
97
-23
109
-69
-78
-37
40
22
55
-59
59
-87
95
-19
38
-1
87
89
37
119
-48
-121
15
-102
2
95
126
-84
-16
102
48
-127
-18
52
-83
-109
97
40
42
81
-57
90
-82
-71
-9
-47
115
40
-87
-9
-113
113
56
73
-45
45
-89
83
-12
83
-29
-36
-24
9
71
94
-109
-71
101
-71
-93
102
4
39
-71
65
101
115
-55
119
-53
102
-61
78
57
-125
115
112
126
-12
-90
-122
111
-61
-114
9
116
77
103
85
70
-12
91
0
-10
21
-93
105
50
58
-16
-108
-60
-112
9
53
91
-101
-75
10
-114
40
-37
110
30
-125
-24
44
123
-21
113
-111
-118
67
26
-59
-90
10
-74
91
-27
-115
-81
38
-100
91
-88
78
37
-6
98
-92
-33
-40
-36
51
119
-124
-65
23
102
30
-8
-109
-69
13
-89
93
27
-17
56
60
6
-42
-49
-43
91
-79
-22
-62
31
8
66
-27
122
-19
-14
-4
2
47
-38
117
61
-48
70
-125
96
-71
-53
113
93
-83
114
55
29
124
25
75
10
121
21
-71
-47
45
28
118
102
77
99
-15
72
-22
3
-20
6
-24
-95
-118
2
-79
78
-87
117
42
-84
113
-77
-25
82
45
-79
-101
114
90
-60
-46
-71
-2
-85
-30
119
60
-48
30
0
36
-53
78
82
-48
40
92
-8
-84
106
80
46
21
79
126
69
38
86
-2
73
-50
127
93
-30
38
82
-110
120
2
34
52
-102
-57
-109
-22
-95
124
90
34
-112
35
68
6
63
73
122
-85
-71
-36
3
-116
-30
61
-118
56
93
-106
98
71
-84
110
-57
-110
-103
122
103
-92
-43
-74
33
107
-32
-75
12
51
40
53
-69
-42
117
-9
-65
44
-124
-50
110
-55
-14
-11
-29
-24
93
-91
70
-94
-59
-25
78
100
56
-88
3
-97
-82
11
-55
-63
50
3
-102
101
66
32
-109
-58
121
-87
-78
122
107
-20
-34
93
-47
-46
39
-53
-26
-74
80
18
16
119
-118
38
-61
-52
-125
-105
-94
-40
-97
-63
-24
-1
-123
67
7
-9
-34
-78
-113
34
89
-114
80
27
-13
116
-61
-113
117
-106
-90
78
62
105
-25
-95
66
-99
-61
-33
83
82
47
59
-96
-119
119
-32
123
-40
37
64
95
99
36
-88
49
7
37
24
-58
-40
66
83
-90
-50
-31
50
15
-69
-36
61
61
-128
-33
124
-23
-127
17
-117
16
86
-10
-19
-11
-60
-108
-94
105
-21
-44
-4
74
-64
44
-82
74
-66
123
38
-15
-39
52
29
-26
-76
-65
108
106
19
28
33
37
-109
-54
-46
37
-103
-25
49
36
-120
-104
-31
9
55
-85
-120
-78
-94
123
38
-15
-33
20
-91
-44
84
-104
-79
42
40
-30
-55
66
-9
104
-106
-10
-54
102
124
-24
70
57
112
12
35
8
9
103
-32
-86
-39
22
-75
-60
-3
-111
-54
50
-13
49
-90
-87
-84
-16
-22
-102
-30
113
63
89
-84
64
-115
126
80
90
110
-116
88
-16
-30
-48
-24
104
68
-116
78
-91
124
85
-37
-120
119
-70
-15
-74
-44
38
94
-100
-32
8
-24
-79
-59
48
41
-5
-2
124
-98
-43
14
-75
-6
-17
114
-76
-64
-106
-44
-55
16
54
-127
93
-63
29
29
-43
-79
-127
-106
-70
89
-59
86
23
-91
-8
-67
35
2
-97
-50
32
-72
-76
40
-125
122
-18
56
85
59
67
-82
-39
68
-84
45
111
-124
40
71
-72
39
3
-88
-5
106
88
-111
-56
-83
-43
-119
-37
-55
-66
79
66
-91
52
18
-61
4
-72
-28
120
-95
-21
109
-68
126
-105
-36
75
121
-13
35
-92
32
35
100
-78
-58
-1
-90
-84
-41
21
-51
58
104
-15
-55
-39
18
-100
13
-128
1
98
67
-124
72
-40
62
-71
119
30
48
-38
112
98
29
42
118
-91
-113
92
-121
-62
-116
-80
-20
-84
-59
96
14
-9
16
58
-117
-102
24
-114
-119
-13
83
74
75
11
53
100
2
28
-92
120
-27
80
-85
-77
-125
-52
114
-17
88
-19
110
31
-97
-47
-43
-18
104
26
85
-93
-22
-18
5
72
26
66
-100
11
125
89
-31
-28
58
-121
98
120
115
59
105
62
-43
61
44
-32
110
51
68
-28
-65
106
96
-117
19
-45
59
-7
15
76
-53
-105
-119
33
-68
-74
-98
-45
28
117
-2
24
88
-28
-117
34
103
3364	1930
1798	3364
3866	1930
100	1798
844	3866
1662	3866
784	1662
2509	1930
2352	1662
2270	3364
377	1930
3682	1930
78	3866
2215	1930
2306	78
1224	3866
2022	3866
3393	3682
3711	784
1253	784
1532	377
1075	2215
2470	1224
614	1532
312	3364
3469	1224
3186	312
698	2215
3529	3364
894	2270
801	2306
1685	1075
3165	100
926	1075
1078	926
2414	1253
2091	1532
1765	2414
2104	784
2657	2509
74	78
1874	74
1265	1798
3950	784
343	894
1701	100
176	614
215	2270
1490	343
3813	377
8	3186
326	801
993	2270
1275	1490
750	1685
2917	2104
845	2022
277	1224
3359	2352
676	1075
1120	801
2404	1120
3512	2404
3511	784
717	3866
2686	750
1180	3682
3029	2091
3272	1180
61	1930
1809	1930
1274	1078
2089	3529
1918	3364
2851	1765
434	698
2311	3512
2434	1809
807	2091
2165	3029
2041	844
1581	61
964	2509
3847	2022
2357	2509
3171	1701
1064	2165
3653	2434
259	1532
474	964
3939	2215
703	1490
2268	3866
3935	277
2395	2686
59	1581
1134	3711
1775	2357
838	2404
179	3935
1020	2215
319	100
1394	2686
2866	894
539	277
181	993
2653	2414
1083	2311
2134	845
460	179
1981	2653
2466	2215
2694	326
2840	3171
3804	61
520	1918
2396	1180
3318	1120
3439	1078
2024	1020
1518	100
840	894
2492	2866
1658	179
3825	3711
3757	1075
278	2917
2415	1532
3992	278
870	2470
3447	3529
349	1981
2846	278
3547	1809
856	277
571	3186
2368	2306
1015	3469
569	78
1061	3511
1888	2686
1735	2268
2015	520
3326	1274
1444	1798
1823	2311
2545	926
3465	3825
2164	3359
917	2840
2554	3653
1647	2134
896	2404
2020	3165
2858	1444
444	1581
2775	3547
2026	181
309	750
1730	277
3441	845
523	1730
878	1658
65	61
2245	2545
1024	1581
393	78
3003	1658
456	614
2335	2851
3488	698
3570	1775
3070	3529
660	277
1063	3804
2789	3653
2614	319
999	1444
1671	2653
134	3653
1397	703
3765	3511
1695	3813
2651	1730
3759	278
2222	2089
781	807
2142	2164
1334	1671
1546	2215
1822	703
3900	312
1700	312
1596	2024
348	377
3040	1444
3365	2694
609	1274
3406	1823
2195	74
670	74
3414	2554
1382	3318
341	1064
2174	2470
174	2395
1523	670
2561	1981
1043	2614
3691	2554
3470	1809
407	326
152	2089
1117	2222
720	2858
138	2686
1438	1647
2911	2195
2076	277
3946	2694
3390	3900
1604	2270
3782	2015
1909	2026
1148	1134
105	1581
788	326
2541	1822
560	3511
3224	1775
262	2840
3537	1265
387	3757
1389	1918
3472	1389
600	1043
3476	1394
3222	3847
3803	474
2826	2415
2326	2091
247	1546
3714	1075
585	2789
3012	3393
3382	3759
3642	2335
2005	600
688	3714
2011	434
1838	1685
603	2846
275	3382
681	2840
2226	1334
1122	717
1866	2195
1095	2911
937	2306
1990	3691
185	781
3060	1685
833	3040
2077	8
1233	844
3450	999
154	1274
330	407
3172	3364
384	460
986	3992
2809	3803
329	2215
273	1265
2729	1438
3927	1148
1947	2357
125	2311
1364	1083
404	3825
1496	319
2232	2005
2187	3406
2408	2561
1764	3318
2042	3488
3267	896
1388	1274
2052	1444
3517	1122
1300	3691
2781	3390
3986	2653
2416	2809
1097	3224
2489	1981
2353	2245
342	3171
121	309
563	2164
2259	3782
2386	2024
2019	720
2947	788
3794	1947
2704	993
961	273
1562	125
2793	2232
2718	185
1708	273
1125	2076
2112	2846
716	2866
1479	1685
3586	993
2994	993
2310	600
3567	2232
3063	3165
325	560
3519	1300
1553	3439
440	3488
3292	1043
1715	1438
3281	179
3214	2416
2399	275
35	2386
3457	2840
2761	1930
317	152
1872	563
2422	152
3036	3186
3780	1947
1972	2052
3969	1822
1877	717
996	3757
1165	278
3572	833
3525	215
2933	179
1150	3517
871	407
2847	2104
80	1947
2765	717
3798	1394
733	1708
2546	2174
3430	1394
481	3450
507	1930
3933	325
2071	3525
1867	460
441	1823
86	3586
3058	2270
3516	1546
3741	784
551	999
1487	3757
1183	35
2639	309
13	387
2709	61
2331	2729
1153	326
36	961
149	670
3166	609
755	2306
504	681
161	176
574	2015
586	894
957	3691
1510	3060
2279	750
700	2809
2360	2657
2867	3529
2336	2546
3261	1233
1278	1695
1241	1278
219	1496
2069	1658
236	507
3251	755
3344	3547
3490	2165
2720	3511
1485	3529
808	1150
274	3537
1141	603
981	3465
304	3476
726	149
458	1671
3936	326
248	236
1540	3516
1281	2331
2181	2005
1076	1024
2433	3470
2220	325
1478	2069
748	551
3639	1444
1176	2335
3859	384
798	3711
2087	2222
3100	185
3826	3936
3836	700
368	3058
1255	1388
3981	3281
420	2541
3582	2422
1991	2222
3197	1134
542	3511
2577	1701
3410	304
286	1888
3356	2933
1237	1043
2482	1485
167	3866
2753	870
3391	286
1949	1024
336	3457
3700	1972
908	1265
1353	2076
3576	3759
608	273
828	2866
693	2042
1215	1444
2098	3465
3218	125
768	574
2956	870
3102	2851
2038	2226
1488	2554
673	1838
498	3547
2204	1224
1792	3488
2016	3267
2202	2489
931	2561
2824	1064
857	1596
165	336
2169	2704
1800	3430
3264	2408
2135	878
2873	2181
2324	1523
1341	2259
2101	3326
3996	3517
3283	1275
2373	13
32	273
63	3691
3293	2793
324	2404
612	3186
2006	1735
1890	2112
3677	2069
2003	3935
1154	3765
3342	330
3896	2135
412	2994
1693	2561
1615	981
3713	1389
3687	2135
3290	3992
1355	1990
2450	2775
1901	2270
3446	2331
2119	1581
3372	1255
3701	341
1398	571
3630	1838
3553	444
1594	1553
741	2232
3869	312
300	61
2001	3700
3991	2042
1170	1125
2717	312
1813	2311
1857	3765
2103	1176
3436	2336
3594	1809
1904	498
2896	3576
1953	2077
2102	1334
2772	2187
2085	878
392	3866
2083	2091
1249	3700
1333	3490
2186	2306
2243	3700
3552	3267
3273	3364
2446	1061
1501	3457
1235	2259
2379	2824
1268	986
3468	3996
3880	1838
2737	2042
201	3525
3695	2775
2995	3267
2619	3359
168	571
3886	2083
2723	277
3389	3012
389	539
2974	1510
1803	986
347	2840
1729	179
712	2657
3686	1485
1818	185
1515	964
172	1972
1503	300
1821	2006
2693	3741
2193	3933
1864	1265
3868	343
1761	2119
2538	2422
2955	3686
1752	673
15	1693
1157	2310
604	3224
2448	2102
2212	1562
1769	1708
2206	2169
3948	3273
1348	604
903	2360
1592	3465
3189	1215
911	986
1848	3847
1739	748
550	3166
948	138
2975	2789
3719	2933
1588	86
1279	3757
658	154
2459	3100
3377	347
364	3166
41	2955
2963	2335
3624	2243
1676	481
1491	1125
2132	2181
1717	857
2973	247
173	3186
2370	1020
2755	3826
2872	3457
640	523
1606	1972
2423	324
446	2546
1325	1141
2937	2135
408	917
3129	1606
3303	2434
1737	3677
1374	3389
1482	59
2600	673
231	174
47	3197
3819	2489
2347	319
2354	2772
3703	3414
1277	2737
2762	1496
582	856
677	833
109	542
2425	1134
1251	2085
3351	2268
2333	658
3451	2414
1071	460
2801	3063
1299	1592
2327	2324
1840	458
2323	1701
2596	3290
2988	2222
3433	698
2618	1823
321	1676
772	2546
3693	2336
296	259
946	3950
1198	2370
1026	2041
240	563
1677	1864
1663	2651
945	3582
512	2762
190	460
3131	3166
554	100
1644	393
3304	614
3362	2089
2017	2554
2043	3372
3920	957
2430	523
1841	368
1965	2729
2170	1333
2827	1299
1365	2541
1403	1701
1649	3570
2556	1403
3137	2220
3325	3391
669	3372
1520	446
3654	2704
3882	1518
95	1838
3479	387
1608	1658
2922	1677
370	3273
2092	1251
266	441
1476	1334
3613	63
3632	444
2863	1281
588	2863
234	404
2340	755
595	1444
3605	13
591	1658
3801	248
1942	2212
540	3693
3383	676
1886	1546
67	1180
628	3935
3008	1026
1295	856
3504	1341
2705	1444
1633	1388
346	1348
3141	1965
2343	2354
651	2360
2441	3003
2075	2973
298	201
1751	3218
51	3171
23	2206
1944	312
3767	1476
427	604
52	1024
2685	1944
183	3992
2108	2470
2790	434
1743	8
1950	1141
2864	3359
1549	2134
1318	781
2282	1823
3497	948
1192	78
2121	2101
2582	3654
375	3936
1661	1739
783	2399
19	3701
265	1701
2490	1026
3726	3757
3636	265
2751	1348
2871	65
2908	277
1853	1078
3839	1388
3132	2809
2647	3470
79	8
2550	604
3535	3868
289	2202
2850	51
1985	3529
2500	420
471	266
3965	277
1784	2091
442	2717
820	3711
1851	961
3310	2973
1462	2809
983	3344
1820	3859
44	1820
3588	274
1538	3801
413	1157
731	3605
1670	3780
2612	1491
3360	2386
1638	1800
2288	1730
2555	957
1516	1153
1628	801
564	2433
459	3476
2829	80
3573	983
1639	3003
1339	2975
2608	1503
1842	3430
728	3383
3411	2614
1831	3102
457	1540
3413	247
644	3552
2332	1485
3005	2232
3710	3886
2688	23
1806	1751
584	911
589	2373
2462	2020
2527	1078
932	1581
553	95
3156	2206
1682	2003
952	3936
578	2379
561	2974
3190	1606
1927	3804
725	389
1706	460
1308	2017
288	2459
1411	2639
1	3981
91	3303
1667	1752
3581	3700
1139	3686
241	2922
3309	3825
1175	1596
3471	712
3505	1821
2925	3470
1934	3868
3930	2041
2629	3930
3289	2423
3099	2204
1796	2195
391	2343
2366	2103
2166	3639
3317	2718
1463	1523
2097	1170
1692	1485
2907	840
371	3351
883	1235
1021	44
2804	23
1271	1546
809	2600
2318	1838
576	3927
3565	2863
2597	554
2264	100
3117	628
3110	1821
546	1658
3626	1886
3973	2089
305	1596
541	3804
3917	2423
186	91
2791	2871
3987	2089
3000	2651
1276	1877
285	32
650	2243
2025	3439
3252	2016
495	370
2878	550
727	3058
2394	3283
252	3360
3564	2336
3528	3695
3268	612
3103	828
851	2166
3901	3981
2912	3351
3810	3573
2012	1792
1102	945
1464	608
3327	3936
3492	2220
921	278
2672	190
662	1639
2703	733
3418	3377
544	1803
3489	347
2970	1700
1443	3165
2928	23
2081	3933
1745	1866
3944	2751
3592	3505
3746	870
55	1076
3615	1739
2289	1515
967	2368
1935	100
2675	3798
3094	460
3387	2204
3143	3447
1361	1649
2039	644
1010	2846
575	2215
3957	2076
2823	3930
1292	2596
528	2703
1776	670
1844	3535
379	3626
3771	3292
2940	1701
2806	1339
1524	298
2659	1532
821	2019
3543	967
2888	165
1230	3418
469	1944
2156	1251
2314	3944
1754	553
334	105
1263	3882
2727	3261
2744	3682
189	274
1417	1706
2921	3433
3763	983
1346	3535
466	65
1863	3326
1129	3189
3690	8
1092	304
3856	2395
116	1776
637	1606
3531	3100
3897	2672
3320	3592
3246	173
1869	2871
3226	2657
297	2343
1527	259
1668	585
3830	2195
2730	2318
1778	851
2578	3137
3112	1947
2900	1365
519	512
918	3782
3871	1901
610	2202
3124	2806
1544	2482
621	2020
922	3058
2880	1904
904	2940
400	3927
2034	3804
2525	1095
2362	551
2302	1117
3784	1717
3298	59
3877	2336
1720	3950
2838	1869
357	3441
3551	3930
2066	2142
1435	1840
3818	1355
943	957
2654	1639
3941	3632
524	993
815	3439
965	1064
1534	138
1003	1809
944	3695
1243	3757
2283	1346
1199	312
2635	2730
3232	553
925	3741
611	420
163	3917
841	2434
3208	1355
362	2165
1738	1482
492	660
1019	1661
3097	1549
2074	2703
261	297
979	391
1830	3686
3515	3264
2774	3900
3875	1183
691	1841
3793	1981
1380	3342
2587	1806
3266	2011
1393	3531
2424	3996
461	564
1085	312
3381	3094
2674	174
66	693
3154	1154
3867	3391
1294	2864
2405	1668
2100	948
825	2012
3236	524
1731	185
158	79
156	801
3466	285
2522	2270
969	1869
2294	1348
2836	720
514	1233
2113	2310
1635	3293
3932	2872
2078	878
1402	3690
3925	2772
2557	1890
212	2102
2161	1268
835	3364
1723	2282
3972	1224
920	2186
1505	3630
303	2840
1461	2025
2593	2289
2984	569
1328	768
1033	2006
2834	1348
2683	551
2228	698
2465	1299
2839	3387
2904	3099
2223	95
565	1230
3275	925
2968	2025
2319	2353
2469	324
827	2994
1282	2490
2548	2639
1429	2847
2320	219
2427	595
2977	362
1349	1102
3748	1588
3247	2619
3806	1942
3752	1476
694	2896
365	1776
3828	1010
1899	2264
1852	2038
2939	305
572	727
3785	3100
505	219
71	1649
1113	1346
3618	3117
351	1842
16	2354
10	1165
3111	712
1351	2469
89	346
102	588
1976	921
509	2994
284	2639
426	574
583	2639
3474	801
3892	8
2040	3327
2946	3570
3340	325
2488	275
2213	1765
3229	1334
1379	3594
3079	1806
4000	2103
2985	3268
939	1765
1642	1796
487	961
1819	3298
624	2555
790	728
1358	3586
3188	3166
1508	1361
2779	944
246	2791
2634	781
1637	1141
597	611
1205	3839
157	3383
2010	528
1828	524
1531	2135
2219	644
3223	2283
92	3063
3620	3551
1203	2466
126	288
1373	2675
3623	1503
3822	3528
846	305
464	1844
124	2737
1001	1662
2325	3411
914	2737
3598	3094
2889	3362
376	2896
1376	466
1418	2245
3903	3232
982	74
429	2026
1744	3165
2014	2373
2126	3925
3027	47
3532	3036
2387	3868
1245	3529
2367	519
2565	644
2785	3701
3949	2433
758	324
2726	288
3649	2619
562	2851
1288	3029
1248	154
2663	3275
1772	925
476	3801
1448	1803
2860	1738
1138	3222
1996	2723
2905	1546
2348	1729
2307	2582
3486	2394
3513	3582
2837	1796
642	1482
632	2156
2812	1549
2833	3701
3421	3511
3379	2963
3645	1935
3399	2446
2481	979
1042	1668
1590	1376
1923	3714
2149	100
3033	2730
2030	1682
2621	1129
1732	1230
2067	2545
3709	2970
769	2066
2013	2804
1680	1019
629	3317
2054	3880
1115	1411
2035	3605
250	1063
2567	1604
3599	3490
2767	1604
594	1277
229	3413
861	673
557	3859
570	400
593	3252
3883	365
527	189
1636	1078
3982	595
2733	539
661	772
1077	600
814	1830
2303	41
3616	600
3234	2119
2750	2608
3571	922
3668	2204
2192	3564
3761	2039
1974	772
787	807
1763	846
619	1778
990	3869
607	1373
1710	1463
2480	3571
1970	2522
2483	2015
2831	2170
3080	2288
531	2790
3764	2283
3874	262
2725	768
143	637
315	3965
2496	2395
641	563
3542	13
3672	1763
3587	441
3533	2614
3487	939
3817	2181
3481	3542
3392	597
710	3822
1497	1379
2426	1139
3675	2928
2841	2767
1605	1844
3961	3214
395	3632
223	3950
879	3746
1044	3537
3860	1581
1296	939
976	3351
2503	3719
916	2326
1147	2142
2211	2674
577	1271
3661	3356
2467	2651
1835	481
2162	3817
49	644
2893	3746
3846	3920
2690	650
1304	3624
3274	1255
2073	2922
1272	2459
2532	1263
2670	809
2372	1642
410	3957
2315	2211
1002	3822
3520	2368
2820	2635
3152	1700
1919	1531
3341	1482
1530	2639
1657	1021
1360	298
799	1393
2225	3166
1270	1141
320	1274
2224	3668
1054	846
2171	357
3754	3793
3052	3470
2803	2220
3082	3828
2745	3553
2580	240
3890	2279
1371	990
1952	961
1907	894
2390	19
159	2164
559	3818
513	2228
3546	1796
2738	1886
2317	3341
3032	1139
2364	1015
2965	2259
2460	3836
690	920
3	3154
3184	2737
2586	3949
1601	948
1939	727
373	1649
3213	63
1665	3504
3775	572
3850	3846
3518	2434
2656	3719
323	3032
3384	1241
876	3972
3872	1682
745	1775
1286	3948
1585	1972
3020	1129
151	2446
1167	2675
467	3941
2722	3529
418	3632
1881	66
1614	3920
1514	781
843	3124
508	3224
2689	2900
3077	716
3735	594
2197	2040
2909	3213
2736	2596
3606	661
3706	3519
1080	3020
27	343
1568	3752
3958	2858
1954	1402
1726	1514
1006	3143
1920	3112
1350	91
28	2204
2865	347
2706	844
3809	2245
3459	3439
1297	3188
2341	3856
1409	1358
233	2812
394	3897
3621	3393
1262	918
2610	2781
1855	61
2189	1761
2236	1700
3420	3188
1962	1763
21	1665
2461	965
3035	400
868	2460
510	163
1211	1720
3431	939
2945	3935
2485	379
2992	2737
2678	1125
2105	3616
1702	2069
3943	1863
264	1676
328	2985
3181	102
2796	3390
1959	3981
3291	2767
3295	798
101	3389
3660	296
1453	2386
3146	755
3604	19
1421	3379
2475	691
958	1002
2936	3197
1109	2718
3762	1863
556	2091
994	1170
1046	3267
2009	365
164	513
3438	572
1931	820
2581	3077
2938	2492
3119	461
2514	1462
3799	2496
1377	2785
3140	3112
3221	2441
1825	410
1451	3762
3455	3713
2952	1738
3066	2362
764	1717
316	2302
3984	2492
290	2965
3766	3620
1239	3775
2534	1211
674	3528
1564	370
1404	690
2044	1775
306	2554
2337	2492
3862	2762
3536	1418
3300	1828
2447	2490
2260	2925
69	1738
3191	375
2661	1534
3694	1516
1473	1271
2954	3
635	74
777	35
1997	3077
3373	3420
1643	2922
2533	373
3894	467
2771	542
1513	3771
723	2433
2558	2785
227	1249
3067	1295
2924	3102
155	1176
2854	1205
2004	469
1721	3438
2885	1377
3294	2772
1502	1949
3861	3570
2758	2533
819	2727
865	2112
638	3986
680	2362
2452	2085
1366	149
2862	632
794	768
112	3700
282	1959
530	586
314	883
1876	2937
3315	1518
1238	3890
46	3969
1961	2100
3043	2357
2784	1899
482	1237
60	1
2086	717
263	2841
2644	2618
1363	376
3206	434
2929	2686
701	3981
2238	801
933	2466
3030	3487
445	393
1428	429
3425	364
1829	3411
984	219
2903	2325
2570	2197
2892	1398
3575	2688
3480	3447
558	3701
1048	2354
3195	59
1260	3480
1578	1726
1425	3377
1951	1076
204	400
2808	3890
1619	176
2671	2963
1283	844
1195	1901
3499	777
98	827
130	492
3118	3874
776	1328
9	3043
3829	2314
2172	2016
3840	324
2350	2166
1519	1661
1250	444
388	1508
1884	250
1204	3511
132	2475
2401	2772
3753	670
39	3691
3831	2264
2563	2077
3061	388
1105	1438
3717	1588
599	2755
3193	2015
3755	130
45	3875
2874	2767
1843	3384
869	2992
3895	2888
1566	2653
1053	597
3562	10
3788	3274
2810	165
2117	541
202	2871
3203	1638
42	2779
2949	3146
3354	3043
3177	2793
433	2834
3979	1497
1507	673
971	772
1673	1355
2144	3040
2792	309
1634	1682
991	2483
1419	3221
2835	2396
3123	16
3297	2924
1086	2193
873	943
890	1855
1782	2232
615	964
3073	3856
1340	876
449	1706
1629	2170
2713	3362
2217	2949
1144	250
1136	510
1966	3027
1917	362
3733	876
1492	1249
490	3810
403	1985
1259	157
2728	3529
649	1248
1442	49
1719	638
3666	1553
1905	2144
2814	1176
142	931
1081	74
2627	3867
2150	1661
3400	1638
3296	1503
2296	2744
3641	650
2652	183
3926	1985
941	3177
2856	2672
2770	3504
1630	971
915	644
2701	2019
1103	300
1613	1490
3106	3943
283	320
2359	8
3209	662
2530	1373
2099	1389
1227	418
1836	3480
537	1949
37	542
1313	2865
970	1379
480	3700
3722	815
1481	2135
1098	801
1814	3373
1210	2341
1575	1920
2002	1606
3876	3636
1058	1754
107	615
602	961
437	1524
226	241
175	2302
367	3344
3995	1828
3814	1744
3328	1667
1060	3533
3016	1353
3216	3780
3648	2593
3093	612
1921	274
652	1752
1226	2949
737	2103
3768	2054
2036	3103
1305	1680
1646	336
2786	442
1539	815
1570	495
1220	1518
1084	920
3477	1796
3081	1239
3852	1848
2037	370
1777	2043
3631	3780
1875	1275
3113	1720
836	514
2958	3327
2649	2854
525	1105
291	101
855	3987
3715	3995
2458	514
3311	937
3702	2202
3699	3189
906	1708
3161	3106
1623	3486
754	151
1816	1473
3321	1393
646	728
2250	3677
1217	916
3584	2925
2377	688
888	387
3440	1800
3262	2938
992	343
1307	2525
1728	3991
3286	1265
1408	274
1746	3
1133	1262
127	1136
453	1260
3544	527
257	1133
3774	754
893	181
3740	3961
3707	3012
2154	3754
3913	3782
3173	2871
3503	3356
3055	845
1895	288
581	507
1968	46
1624	121
1727	3973
3241	1857
1571	1614
2585	1921
1151	2426
2111	2647
2756	2433
3549	3613
1194	3768
2312	1380
1688	922
1323	1064
1771	2485
1856	3110
3056	3430
3126	3341
3021	2448
1114	3161
1616	1481
2145	1305
708	3519
353	865
3338	156
1030	3132
549	1103
385	2314
685	44
2196	1981
378	717
1504	3547
221	614
3454	2097
2032	3880
3781	2016
3366	3939
1846	3487
203	3111
1069	584
2028	2653
2330	1215
1780	768
3583	98
3607	1487
826	69
552	1226
1018	3901
973	3106
672	2872
763	2009
3458	945
2328	2532
3556	1078
1975	158
2519	1351
818	1720
590	1061
258	1355
740	2075
3909	2427
3629	562
1427	348
2491	3195
1827	2671
3039	3939
43	554
2681	1442
2218	3481
2136	3511
1289	158
2523	418
689	3055
1347	1744
1839	303
1573	343
3749	3594
1824	2829
930	3733
2603	1144
761	3406
3975	3699
239	1798
2	2652
1422	2470
949	570
3805	915
2660	476
1945	67
1669	172
3461	750
1089	3512
2253	508
1066	1644
1110	3505
1858	3616
3332	2973
3367	1305
1786	2866
2991	98
2316	303
3336	588
2516	1606
2861	3354
2816	1382
2258	2946
72	3965
214	1018
1399	3295
1335	1282
1231	600
3760	1721
2358	2796
3670	3719
2444	2423
2895	3894
2420	2563
2506	1282
423	2228
1483	3425
3878	1827
2944	1397
1683	3382
4	3274
998	672
592	3474
1718	2034
451	1633
3404	991
1750	2577
2286	2627
616	1796
2748	3897
2967	737
1978	2703
3550	1492
1854	2652
1155	2466
147	1170
832	461
2064	1341
859	1507
1591	65
2143	2621
118	3497
729	1514
3048	492
3259	3008
899	565
3401	581
3881	3876
1218	2161
596	1752
3980	703
2263	2956
2511	1823
2897	1205
1301	1286
2453	278
443	3517
414	2525
1714	3275
3651	2511
2584	1952
169	563
31	282
3242	1947
479	1952
912	1562
2369	2496
648	646
3951	3364
3843	3551
279	1513
2031	2212
3750	1061
2419	258
3128	906
2479	316
2979	3584
789	3606
3041	1670
2916	2317
2818	3817
180	2348
213	3094
3170	1519
254	2354
630	2674
2662	591
3086	3327
1537	1786
199	1881
3136	2482
2763	3946
2676	2810
1073	1399
2632	1682
2526	346
1090	733
3585	1488
3574	3536
29	1253
2297	3826
3855	509
2769	2340
1447	616
6	3321
1234	1604
1132	871
2502	2939
3772	1122
2163	3843
2569	3382
3287	1299
1808	3058
486	2156
605	3234
529	4000
779	28
374	1120
2280	3393
3026	10
1801	1540
3619	231
2964	2952
3054	443
3145	183
3288	1245
3194	282
2780	576
1548	558
2203	173
1940	992
3899	2279
975	277
3627	3032
3269	3294
1000	1307
382	3763
1697	3583
2477	410
800	408
2673	3920
1055	176
3357	609
2088	2587
1140	3713
3792	577
1293	737
3964	130
2616	3438
2273	870
2788	1026
3091	1875
2406	1220
3602	586
2668	2219
863	1262
3456	3476
2152	1634
117	2864
1469	2596
805	2297
1008	2563
251	1366
2692	2965
1367	1527
2158	3920
2598	1021
3789	1921
3115	1743
1434	274
369	3766
3090	105
470	1904
631	67
2295	2925
3013	3872
1256	2755
682	3706
332	2215
1212	1497
1599	2892
2205	2447
3432	1026
2047	1966
1967	609
2365	716
3179	1353
3906	3389
358	1688
3419	3535
1119	1245
1889	3903
1933	298
2740	1813
1327	2763
2757	769
439	3013
1317	263
2919	2975
53	126
1035	965
3092	258
1584	3549
1424	2459
1560	1262
1264	395
2999	1102
162	593
977	1966
308	2790
866	1289
2711	3551
1672	994
3610	783
2435	888
224	1985
3577	768
1542	2004
1072	691
73	2469
1556	3487
887	1531
1240	2801
416	2647
3656	1538
1898	3817
2708	1380
886	2452
1660	894
806	3232
2859	1283
3403	3461
2375	1697
3787	1949
675	3186
1956	3229
2747	1098
623	2761
339	1771
2752	879
1107	391
170	1002
3692	2317
2918	3090
2568	1249
2130	820
235	3430
216	3433
2855	3294
1007	3765
2269	3588
1116	296
3879	652
70	61
428	1341
2645	3706
633	98
3730	407
3910	590
3849	2723
2537	2483
3674	3141
2564	3933
2285	2370
438	486
1039	3668
2910	2921
93	1360
2191	1830
2173	1107
1815	2232
2875	1483
1022	3190
3072	2910
2817	49
534	319
3721	585
2090	1305
2521	2332
2167	3166
2476	303
1903	1293
2574	2453
1123	846
3059	1442
3655	1761
77	964
547	733
3168	3764
1684	784
2046	3903
3210	3156
950	3672
573	1721
465	325
1747	3936
1969	3879
3558	1404
2110	3592
1400	159
26	414
771	2596
3139	3733
196	74
684	2064
2356	2522
3231	3687
2766	1198
153	2373
2969	2420
2429	1399
3256	1226
3422	3749
119	3722
1850	2713
3597	3470
3923	42
1338	3748
3680	1024
744	920
1550	1548
1749	2167
3786	1255
3955	528
1027	3781
3334	2024
3044	552
2739	321
50	2017
3330	1658
2382	3486
1254	1277
803	1752
847	91
432	1953
3776	3480
3248	3867
313	1141
2185	3801
122	1515
3959	2917
3678	2185
269	1604
3977	2101
2927	3126
3228	621
1005	2905
2124	3630
1971	395
606	2032
2486	1571
177	2790
3107	610
1595	728
2876	3421
683	2839
2385	1726
3491	2908
2902	1746
687	1841
3954	2781
1797	32
417	3927
793	2608
707	971
3993	1743
516	2166
2664	1829
1760	876
1552	789
988	1822
1126	3267
3838	563
2719	3377
3153	2073
756	1909
1957	2117
3934	1642
360	3944
2606	3899
198	240
2950	3886
3302	2489
3378	234
2844	2187
2646	2476
267	1300
3915	2004
1785	138
3001	492
3634	883
3729	932
665	583
831	2224
3394	2525
3047	2426
3884	73
2027	1708
390	1927
1395	3387
3697	2110
497	3040
1472	1504
3105	3394
2021	2855
954	1129
489	1816
506	2991
567	2717
1794	3455
1011	2862
2941	3780
2346	3632
2050	3418
81	26
3423	1081
1370	2103
1579	3917
3347	2856
62	2829
848	1624
3841	3026
499	2720
3130	471
2493	1523
2129	93
2542	3822
3580	512
1587	1472
450	1692
2094	1595
1805	2827
2494	1658
3893	1075
3098	362
1164	3058
3797	3300
622	2098
2943	3897
2807	3828
1631	1183
2695	189
3237	3828
2588	1876
3301	1672
2060	3021
1767	805
2410	267
3617	688
1873	1863
1521	807
1758	1255
860	529
209	546
2560	3383
1711	1192
3207	1504
2051	373
2966	1634
131	2323
752	172
2255	3939
3928	154
1431	1606
2151	1776
337	2801
3088	2771
3467	2897
2321	1935
3737	37
2721	1218
1032	3289
919	3789
475	149
3120	2238
3665	689
587	2083
3997	62
2436	2453
2842	915
340	3079
2417	999
2591	1584
2227	1327
3667	1519
1557	3486
3745	1089
448	3364
2508	2639
2329	1365
1166	59
2665	3186
1525	1374
3125	2367
2345	2424
494	3781
1811	3287
1252	1081
1609	1524
3353	3111
1734	2336
276	3100
270	2220
2948	3765
3832	2814
2832	534
667	975
747	1542
1213	3081
1191	986
2536	3283
1762	124
2266	2659
2504	3874
3889	3283
566	2694
2898	788
1973	1921
1987	2226
2623	1739
2309	328
3157	1380
3204	1164
2274	1552
3545	3846
2942	525
3408	861
1641	1204
1882	716
743	482
3816	3438
568	1301
3376	3477
2128	3172
666	2842
1545	3564
2201	3439
746	3764
3323	1327
2293	514
1384	586
3230	3197
1052	982
3339	1562
3350	254
3696	1538
137	855
1691	3008
1298	2490
3912	932
184	3951
3684	2260
2595	190
3277	346
3212	2928
858	185
3918	457
796	2051
3473	574
3720	2232
3133	531
3355	883
3673	1105
2624	2333
3211	2399
875	1418
738	3686
83	2859
636	2763
1900	329
2930	3917
811	1800
228	1453
1190	1673
1312	1117
3718	2603
2853	3816
3122	413
1285	2382
2638	448
1915	1900
2033	2686
739	596
3449	793
2190	2910
2499	1010
1565	461
2275	2069
2993	1469
711	796
1709	2690
139	3518
517	2896
1506	78
3249	890
2622	508
1748	2405
3201	451
255	3032
114	173
2778	315
1343	2984
1724	2775
2845	3592
3464	1453
3990	3583
301	3168
1065	2280
3031	2580
2300	1435
715	1971
2571	1927
1790	3301
1964	119
302	3061
987	2634
797	1388
1257	286
1795	2871
1174	3749
3396	1263
2658	680
2562	2302
3989	286
2363	236
2355	1816
3278	2635
1893	2434
3998	1521
1650	509
500	65
2338	3896
280	3480
1722	777
3108	1
668	51
942	883
3374	305
1329	2480
97	3894
399	3139
1791	349
2118	1952
1124	745
2131	2788
823	288
2140	3817
2802	1516
2361	2083
1426	1194
3578	2621
2344	1402
1536	998
3548	2523
1159	763
812	866
2070	3355
3734	2781
1922	3693
1179	652
1495	2892
2182	607
1310	1335
493	1734
2642	2919
3647	3177
3902	3055
2148	3266
3015	2004
2473	614
237	3367
927	21
2800	1503
1979	648
3475	290
1887	2324
3999	615
3180	1098
2923	2113
2783	1341
3635	3487
985	3425
1779	1148
1440	3318
2798	879
3074	2722
892	77
58	223
2178	3218
1913	3261
795	3866
1330	2610
3217	2867
3087	1519
897	1155
1674	3005
3038	3269
2194	2788
2848	2174
1390	651
2981	134
3176	1308
3851	290
953	1506
1589	2791
3744	3965
978	942
335	1692
136	3111
1082	270
220	602
645	460
1446	3852
2811	3613
2440	912
2464	3470
1016	2187
1998	531
663	3066
2510	1537
766	1335
1535	2871
128	70
1580	3585
2507	3477
3601	860
1352	712
1625	2086
3370	81
853	876
2291	3701
135	1553
3522	2621
1563	3564
877	175
1541	1676
3704	1343
2125	3098
3727	3088
2261	2791
3554	2574
1807	3176
2244	3933
3942	2865
3560	2713
1214	2779
2257	2525
625	1469
880	3694
3534	3139
2398	1490
2857	3826
3579	3236
3463	2011
1432	1072
3388	3425
1980	2016
678	2486
194	678
1891	3173
2749	2508
1017	2838
472	2329
1185	1829
1551	1639
129	1891
2062	1935
1736	1403
3591	941
3121	2181
322	828
3685	3421
363	569
1178	976
3652	3208
1038	1103
1106	1451
468	3711
3485	3892
1896	1438
2072	1782
3314	324
1512	3825
862	3153
2183	875
3260	1039
3885	235
1994	451
3062	1823
1656	2422
2901	3517
1470	2105
2978	558
2018	1683
1201	1786
3163	2269
3429	510
2787	3471
3028	865
3834	1164
3282	3531
1837	992
57	2923
2776	1478
3712	3534
2887	750
3593	1151
2932	2144
2700	2810
2959	2024
206	1843
3460	309
310	1021
2442	353
1324	2154
338	2871
1703	918
749	1904
3931	3513
3135	2089
141	3875
2023	3610
381	2098
108	513
2553	2076
1480	2875
1236	3730
1912	3282
2535	2766
1687	946
2640	3136
182	568
3681	1671
1988	2348
936	565
2472	324
3820	1758
1621	267
3509	314
1740	3124
3963	877
331	2499
2114	1404
352	868
548	385
436	3480
3555	3798
730	1562
830	3693
1291	2704
3907	1076
813	2197
56	2851
2413	3598
1410	2675
2913	3031
3988	206
1094	474
639	52
2139	3152
1188	186
1610	3222
3566	198
940	89
3483	3816
671	394
1381	1107
2517	280
3739	1408
3773	55
653	3757
3914	1255
3723	2377
409	1616
1865	2458
2830	1270
3402	700
455	3876
3025	1898
1337	1366
3386	3631
2998	1301
1766	155
2184	2019
2879	1264
697	3948
1273	3387
2439	1281
150	690
1833	3598
3743	2358
2304	1066
3795	2485
217	3040
1982	3231
1450	680
2449	3291
2180	3906
1127	3793
2397	3780
2292	1472
780	2519
3240	3449
2539	3432
1789	853
2079	755
3187	3311
1486	3003
3658	3079
366	3987
3510	3852
1528	79
197	504
3756	2913
205	320
1924	942
2599	1278
3284	3639
3530	1730
454	783
2987	2965
3159	1851
3109	750
3929	2335
837	3201
2053	604
3705	2260
3424	3556
786	3786
3345	2211
191	1939
1509	71
2877	2752
1757	79
1911	3383
3502	698
3498	3660
1475	2164
3732	3480
350	2174
1936	438
3596	1758
2093	3173
3835	1248
702	3378
210	2465
3608	2645
2252	3036
3569	1210
3371	3026
2906	3469
2322	3404
2609	3327
1354	3536
3037	61
3205	2860
1049	1985
1522	1881
3271	1016
1937	2244
1999	2964
1206	3862
1200	1621
885	497
3947	258
3777	3294
2813	3894
496	893
2262	2877
1849	2847
17	3310
3640	2367
2229	2587
2611	2634
3484	1656
522	1682
1455	2527
511	1262
94	568
995	3401
1342	1979
1225	1719
2590	616
1445	2977
824	3859
686	3998
3790	1843
3244	3809
1385	2954
3346	1127
3329	3727
2137	2553
1707	2571
3255	2978
1783	2187
2256	1044
76	3222
872	1971
2520	2656
503	2692
2822	1481
359	3781
34	1869
485	3476
2732	2527
1345	2998
171	3146
2894	353
1112	2072
1742	1147
1430	2791
3821	514
2456	58
2029	1661
2096	205
960	1390
1247	417
113	2929
1326	2872
1781	2488
3978	1530
3352	77
834	2181
2235	199
3683	1338
3747	378
802	128
1654	432
99	3483
1189	798
1690	2096
3857	756
1847	414
913	303
2267	2586
2696	3292
2443	2328
3071	975
3257	3570
1902	2944
188	3699
1405	2803
1057	442
521	2855
3368	1212
1467	937
3417	2114
3985	2903
2298	1065
22	1360
881	520
1586	2635
1070	3115
1161	179
120	1936
2607	3099
3870	3569
3307	2294
3863	1884
3725	2443
1547	1010
2400	847
3854	1707
767	892
3539	2932
1526	1665
1137	156
3742	506
852	81
2869	595
1415	3884
655	621
2667	3292
406	1080
1773	3694
211	1122
18	442
3659	3515
1648	3545
3824	2597
2248	72
774	2071
2061	377
3731	2047
1433	2315
3796	3424
3643	445
2249	3714
2049	625
2177	2310
543	2571
2960	1980
2418	581
2265	3544
3064	3903
2935	2462
770	81
1759	74
383	2453
2768	1210
2702	2664
3514	3702
3611	9
1652	3973
2056	3016
1029	2352
2972	2232
2589	3056
3245	2330
1914	175
110	2143
401	2394
1202	1884
1474	749
1436	2993
2374	2310
732	1276
2572	2265
422	3819
3609	2924
2957	423
3101	2085
3158	2031
1960	1113
435	2858
2147	308
386	3955
2684	3098
2065	3126
3285	91
2986	1443
3095	2173
463	3064
287	406
1712	2665
3769	1308
1128	3680
361	2708
3007	747
804	2733
1555	3354
905	3519
1173	1370
1067	1006
333	1341
1627	339
1439	2541
2637	896
2759	743
3938	2889
3864	2705
1963	930
3919	2995
3924	3685
713	2060
447	3245
111	2001
791	911
2123	349
792	2958
200	3782
1181	3497
3808	391
900	635
3254	1373
1664	346
909	1239
1498	1688
1383	1739
3758	1105
24	1624
90	640
778	3586
3265	3510
1598	1680
3679	2140
762	1249
1412	1677
1406	2181
1602	76
3507	3909
924	1165
816	1668
3791	2023
1062	819
1558	509
2735	1988
1014	2382
2934	457
3050	2769
1484	1296
218	3817
679	194
3313	464
7	1668
2378	510
272	441
980	3566
696	2202
1894	291
187	2720
1229	2581
3827	454
256	3572
3263	3438
2384	3827
2633	2550
2821	2928
3010	2118
3253	3340
2961	1203
3164	2616
3022	177
1620	3788
3637	1185
3335	2321
2176	1443
1699	1819
3348	3325
734	1027
1100	3070
3452	3063
1209	2190
2953	1661
3800	3480
3349	203
3415	1112
2271	1960
2795	2649
1489	3224
1804	1852
2620	191
2407	36
1459	2114
3563	668
657	3061
3956	2211
2951	18
2679	3489
3662	2312
2058	2607
2691	2470
1396	1813
3435	2562
1995	919
20	3768
1802	3056
3921	2993
3521	2163
3243	2979
398	2426
1437	957
1344	2906
1583	1535
2643	1924
1733	1662
1037	2394
1357	3129
2455	940
2884	3929
2699	2215
104	2855
405	3041
3646	3928
1993	3581
2870	3377
2531	858
1989	2441
719	3402
230	1820
1955	1646
1892	1978
2501	3249
2883	3438
311	486
1925	3262
692	2689
431	91
3807	3570
1494	1718
238	1589
103	1129
2146	2506
3650	3237
208	2329
3976	3936
2200	675
751	3930
3600	1134
3967	239
2431	1113
1040	2139
2617	306
1705	1989
2698	302
2048	3230
1152	3187
3970	2006
718	3108
2996	1166
2625	2807
178	246
1926	561
1093	2140
3065	1245
2281	1604
2371	2119
2819	1274
3802	2690
160	2335
2421	3359
2890	1379
478	1278
1607	3206
1222	3012
3331	615
1468	1200
1130	779
1860	104
2734	314
452	1965
634	3646
3215	1380
2157	3677
1401	2858
3493	1289
1314	1636
3385	3809
1928	837
40	2523
1958	1831
2760	2009
2160	1507
2920	1203
2107	3359
2615	3317
2799	2375
318	434
2127	29
1768	3899
699	3771
225	1839
1145	3137
1679	1769
372	1468
327	848
1812	1324
3974	3558
1186	2538
2402	3342
736	3707
3014	2193
2797	2633
3506	2405
647	3465
2583	3817
424	878
3162	2657
75	2358
253	3965
1787	3058
910	3391
1246	3367
1574	1560
3369	3727
3495	1570
3004	1887
3258	685
3305	3824
1698	1361
2843	1847
1099	1097
3945	2535
3002	3314
1929	1089
951	640
3270	1313
3358	836
1681	3195
249	1314
842	361
1362	3475
1984	2475
1511	2194
244	795
3227	1249
3319	2458
2381	3958
1456	819
2231	1427
1932	1795
397	3241
3603	3229
2392	941
2559	1443
3069	677
3151	2590
515	1406
3034	1406
1182	2954
2641	732
1810	2047
532	3230
1817	2453
402	3912
3614	1212
473	2353
3644	2745
2498	2186
3994	3132
757	943
2376	1896
618	1355
1645	61
2284	608
2982	2955
3174	3586
415	2078
3220	3137
3443	2352
2153	1742
1593	2397
3361	3605
462	3415
785	3867
2551	3061
2741	49
3848	1570
3898	1975
1561	3683
3960	450
3149	446
2403	1900
654	2521
123	678
884	978
2601	3460
773	3032
1458	1308
3380	2139
3019	129
714	906
3276	2968
1457	349
3078	1026
3728	3758
1454	1224
3144	401
2899	1017
1675	1122
3148	1700
3085	3701
735	3474
3494	1262
3612	296
3971	589
425	1625
3116	2306
2997	2400
2080	3332
3589	1064
1517	3715
1597	1151
483	1116
3198	2423
2926	2987
1284	91
704	786
2579	1289
891	1915
3142	469
3844	748
760	3838
989	3933
2782	950
85	2426
307	1061
3155	925
2576	2281
3333	725
2393	2394
501	1451
724	253
2313	3483
3428	906
3322	1308
1770	546
1131	1656
955	970
54	2370
2437	2460
867	1038
2743	1263
759	1276
2349	50
1091	4000
1992	2555
2825	2859
477	3172
2604	2317
2666	3036
1009	1642
1686	2494
2057	2288
3409	3806
2063	648
2457	2728
1799	3992
580	513
895	3026
2188	3787
643	2128
1142	2002
30	1849
1056	981
2505	1966
2045	2969
659	2936
3628	2888
2971	2266
2409	529
1290	2601
33	3703
3185	439
354	2755
1319	2038
1694	954
1228	3085
2682	1784
2133	2331
2512	3086
3308	3814
1387	3454
1655	2909
3911	3957
3375	2215
281	2317
1368	1064
1156	2366
3299	2933
3337	3414
1320	969
3053	2271
3916	1818
601	529
3199	229
1906	399
2380	803
2445	180
87	697
2237	886
2962	2357
3200	1875
2116	2039
3250	3098
3524	2606
817	3479
1543	1540
82	3756
2712	586
1938	1020
242	1165
3114	122
2214	2279
1386	3598
1375	309
2388	1835
2246	1827
2000	3422
356	1776
3891	2906
1832	102
3045	20
2630	2441
2008	399
3540	2293
1258	2772
3595	3415
3500	1831
1169	2662
829	3645
1465	3892
3219	657
2566	1850
3633	2225
1572	2761
3225	3001
232	1345
1261	2568
299	87
901	3060
2710	2938
3343	3965
2707	2154
3011	564
1378	905
2239	90
1104	2909
2990	989
5	3762
2454	3285
68	405
1611	1010
1302	2133
2389	15
2277	2054
3966	408
1577	2172
3953	2118
3526	3269
115	524
1883	852
2138	167
2828	22
1088	3875
3235	1611
1331	750
1028	351
2655	1923
2478	2093
1232	285
3590	3111
3751	3890
2209	1973
2552	3819
2983	1806
2179	3071
1160	1100
2497	3920
2931	3259
3169	2943
1477	3168
518	1586
2815	2880
195	2956
3770	137
2240	2757
1050	3982
344	3050
2120	2949
3724	892
144	2400
1826	2600
1499	198
3812	68
2199	2601
1689	3286
664	249
12	3756
1193	2259
2613	1363
938	3642
3068	1805
166	2427
2680	2608
722	1089
491	2728
966	2328
1051	1203
579	999
1096	1611
765	1988
1420	2647
3167	39
3279	607
2754	3254
1941	2067
3412	3056
1216	3086
245	1055
1287	1701
294	2560
1569	474
411	3376
1309	554
3663	1594
2528	2040
2687	3575
3858	3216
1034	720
2230	3572
1013	2987
2547	2426
3395	1685
2334	785
2095	2284
3922	2618
1036	1903
3238	220
1870	1198
526	3548
2626	3249
2592	1971
2106	2440
2278	3225
1391	45
1774	966
2168	643
1948	10
345	2456
1885	2547
3888	375
3689	1851
2716	458
3192	3455
3527	1953
1678	3572
963	639
3175	2969
3407	3884
1303	3499
380	760
3089	86
3437	1613
292	1671
2628	540
3083	1769
3523	1250
2636	3893
1916	791
1118	3683
1413	1425
3462	1145
2339	3225
1788	97
1143	3597
3416	1402
2915	3535
1559	3951
1753	1684
1316	3921
2159	885
2543	35
3736	1378
1471	1760
3196	3915
2549	1263
1617	2036
2602	2336
721	1292
2594	966
3716	1035
3501	858
3127	2831
3427	346
3671	2410
2650	3354
1336	2959
3084	2024
2059	3486
3887	2962
3018	1526
25	927
1441	3195
1755	3623
2471	2506
2882	2212
2669	124
355	308
934	77
3104	2807
1414	227
3075	2924
260	319
1163	1504
1079	950
3937	166
3051	908
419	2095
1111	2915
1946	919
3482	3330
1651	1398
3538	2760
2247	2312
907	1461
3009	2525
2731	1489
3023	2381
1074	422
3147	3655
882	685
1834	224
2976	1701
192	1781
207	3592
1108	31
1582	3941
3676	2237
1207	2469
1622	31
38	1334
1452	793
193	1038
3778	463
3496	712
2724	446
293	2444
1269	1471
1554	2142
3324	2990
2631	173
1208	3797
2241	3446
3426	3640
1121	3284
2411	290
1023	3881
295	3722
956	660
2412	3745
1529	1744
3049	1993
1793	779
1908	2415
962	3606
620	147
1878	2022
3202	1596
2484	3839
2254	468
2573	750
1632	1763
3312	1706
929	579
1219	358
3076	910
2115	2790
1466	3271
2207	1383
1146	214
1359	752
1640	3733
695	1580
706	1873
2697	3976
3442	3792
2518	3764
1047	3825
3138	3947
626	3173
935	475
3738	2580
1311	847
2272	1044
2794	2817
1897	1066
1576	3193
3837	3656
2242	3627
2849	1018
598	3304
3622	3438
3160	3650
2746	3477
3811	516
2914	1373
1666	2833
1045	2879
2234	950
1618	1008
3316	3382
1356	3876
3561	1514
1861	2912
3940	51
2109	3939
3233	2614
1392	1222
3669	3618
2308	1404
627	3528
396	2678
1149	808
3908	454
430	1853
3657	2643
1172	3954
850	1457
3042	673
1910	2588
959	1967
1879	672
533	2376
3664	3821
902	2214
3397	2636
1756	2132
3178	3125
1322	2694
1184	2459
2210	689
968	3520
3057	3918
3239	1545
11	358
3134	265
3698	1141
613	2022
1031	787
3006	141
2886	543
3688	1754
3444	1594
2989	2955
3783	1153
3478	440
709	3875
1242	3910
1306	547
1600	1755
88	1690
1171	3277
617	633
3873	735
1196	1877
3280	1705
545	627
775	1528
849	2640
2287	3792
2276	2160
2677	3481
1244	1468
2383	2431
1321	3969
96	961
1168	1606
1653	3659
1177	1660
271	1228
1862	504
3904	3234
3823	2841
2141	1465
3306	1055
3842	609
874	1168
2764	1027
2513	693
2305	2561
3962	3695
2198	3998
421	1723
2524	2277
222	1819
2714	3901
2175	421
1012	42
3046	3630
3398	680
742	3324
2055	2222
3853	2005
2881	2401
947	1157
3150	3167
2487	897
1871	1167
1603	1616
2082	13
782	1377
3096	3302
1449	1017
3559	3407
3952	1780
1315	3697
146	183
2463	34
753	2124
2742	1839
1696	126
555	427
2432	2591
3363	978
1460	937
1725	623
3625	608
2540	1359
1533	4000
3865	560
84	1286
3182	1527
997	2810
3557	3000
1162	1550
1567	2330
1068	843
1369	2376
972	346
3638	177
2605	3499
3017	2316
810	3283
536	3289
1713	1766
1187	1568
502	3898
2515	1530
1197	1969
1223	442
705	1777
2251	1269
2868	3990
106	3801
145	637
1059	2555
1880	1913
48	1522
3708	3064
1612	3430
3983	801
1943	46
2468	1867
864	2800
2391	2597
923	1497
2299	3627
2648	3840
1407	3261
1986	2261
484	2047
3434	3644
1704	1
2007	3165
822	953
1741	3795
535	3149
1004	101
64	2385
1025	3229
1101	951
140	3638
1266	836
488	3742
1493	1615
1135	2255
3968	2236
1845	2662
2805	2004
3779	2586
148	3098
2544	1677
2715	451
2474	2823
3568	2005
1372	3796
3541	1190
2777	2031
2575	2592
14	1339
1221	1101
2451	3439
2495	3268
1423	427
2891	3189
1500	1328
3024	1777
1716	90
2529	3522
538	1486
839	2804
2068	2899
2428	1786
2290	3777
1332	232
3845	3924
1626	2503
1280	2668
2438	1182
889	1757
2342	356
2122	1294
3815	2615
974	1130
2852	2970
1158	1017
3405	2194
1087	2238
1977	2210
1859	1465
2084	1748
2773	1600
898	180
1983	2650
2208	842
1267	2359
3833	1999
1416	3396
2980	885
2233	2321
928	550
2155	2642
1659	1516
854	3956
3445	1600
1041	110
1868	802
3508	2152
3183	542
2221	2501
3905	2673
268	1806
656	2703
243	3869
2216	1827
2351	3067
3448	3346
3453	2525
133	1697
2301	2204
0	0]]></test_input>
<test_output><![CDATA[99871]]></test_output>
<test_input><![CDATA[7
1
1
1
1
1
1
1
1 3
2 3
6 4
7 4
4 5
3 5
0 0]]></test_input>
<test_output><![CDATA[5]]></test_output>
<test_input><![CDATA[2000
71
107
24
-78
53
41
-126
-57
57
-113
59
32
-32
-57
79
-22
-80
11
-88
-72
3
32
-127
37
21
32
29
-70
91
125
-72
18
22
67
-66
59
41
-99
59
96
39
-101
-110
-91
-79
50
115
83
-1
-123
7
53
-68
98
109
66
23
16
106
123
23
72
92
23
46
-127
112
-34
18
113
21
-45
-56
-48
-79
21
1
95
-110
7
-86
41
39
-81
-65
8
112
92
96
108
-77
-116
38
88
113
12
-73
-83
-104
97
-104
-85
-6
103
67
-75
-2
56
122
84
-107
79
-38
127
112
-18
-77
26
113
-68
23
-68
95
-77
49
-75
-35
57
-40
80
-99
-115
100
85
-47
101
-63
-46
-30
-42
-62
27
101
115
-73
16
75
-71
65
-98
87
-85
101
-119
-42
-71
-32
104
-118
-26
-70
-15
-25
42
30
118
-126
21
105
-80
-58
-74
-127
-68
-24
-69
104
99
30
-39
17
-98
12
111
114
89
127
102
-38
120
94
91
-123
24
-34
0
110
23
-12
-65
100
-42
16
-95
96
61
8
111
22
0
82
23
-54
33
119
80
101
-73
-60
-127
-56
-19
67
-33
96
77
-22
-42
-6
63
17
-85
-39
-52
42
95
6
-88
-84
-42
-24
112
80
57
20
48
-128
-104
102
40
12
-44
81
-48
32
-68
115
25
115
118
109
-10
-64
33
-15
27
122
-72
29
4
-68
57
7
58
127
7
-103
-46
15
-115
-97
54
-64
37
30
40
-36
56
-25
3
-31
-90
109
68
-23
104
-44
74
106
116
74
90
31
-32
-102
-26
70
75
-2
15
12
121
53
104
70
61
-42
-3
97
-100
-28
-108
-100
47
-94
50
116
-55
-87
-31
96
90
55
-79
-65
19
-54
-3
15
-53
-18
-17
95
-94
83
70
7
-28
34
87
-106
48
-111
82
12
-39
-74
-57
74
-116
-104
105
-58
51
-116
17
-125
26
-65
6
65
80
15
123
-15
81
31
89
107
-31
-86
63
99
59
23
-57
-103
107
78
12
81
-7
-53
105
3
-57
-16
-125
83
60
-96
-119
67
-94
9
-70
-88
-51
-63
40
-37
-2
21
-68
-80
7
-98
123
-84
-81
21
7
114
87
103
105
127
-34
12
13
23
-61
-107
14
127
-119
-123
-75
109
96
98
60
-67
1
12
-41
101
-38
77
-11
-85
107
-80
-62
-106
-16
-105
-15
-94
64
-120
-70
-73
-11
-56
30
92
-51
43
114
41
80
42
27
122
-77
54
-105
107
-3
76
-67
0
104
-54
69
-93
10
-127
-118
-44
-76
11
-113
28
27
94
64
66
53
-94
-5
-62
-26
64
79
123
-36
60
4
-88
-72
-60
91
17
110
9
-106
-125
-18
77
-69
125
4
61
-106
44
124
-126
-3
-103
-117
-109
88
34
106
-51
96
39
68
-59
38
5
82
-35
87
72
69
21
-65
28
-28
36
13
5
-10
-56
-42
-48
98
90
-36
-54
-107
-91
-113
47
36
-8
-44
-27
-78
122
6
106
21
-66
58
12
-76
-105
-56
88
51
46
7
-44
83
81
87
-15
19
14
101
59
28
-127
-86
-45
91
-22
53
31
-16
2
-85
-64
71
-112
-116
-60
-124
55
-73
29
37
-110
49
82
-30
-125
34
117
-40
-57
32
85
-25
-50
-80
-12
89
-54
10
60
-60
7
29
-19
49
122
-45
-38
125
-100
-106
85
0
121
19
-24
109
3
62
70
-7
-83
-106
-128
-64
53
-86
124
100
-63
-36
-92
-9
46
101
-37
27
-91
-103
-75
103
111
108
-25
13
10
54
-4
-70
124
-77
74
-66
-25
78
37
109
94
-97
82
-59
-9
50
-66
81
33
-118
112
76
56
101
-67
10
87
66
-69
-108
110
33
-8
-109
-108
-118
107
111
-98
-48
-86
-73
-16
-105
94
-60
-109
-108
-12
-103
-120
-108
-106
14
92
-64
90
46
-3
31
-71
-35
-52
92
66
-66
-13
-54
-113
83
-7
-91
121
102
-108
-101
-120
-88
-66
-118
-83
-103
10
-116
52
-89
57
49
-12
-102
8
11
-55
47
77
112
68
3
66
123
-96
-77
33
84
-8
66
-15
-79
-72
-69
-97
-99
82
23
80
121
50
96
-10
64
-13
23
33
15
-45
-44
25
-28
100
44
41
-91
-123
-41
61
101
-111
18
-80
-28
-42
67
95
84
73
-36
2
99
119
-127
-68
117
-65
109
-16
49
-65
18
87
64
12
-1
79
81
38
7
118
97
-85
-96
120
57
-54
-119
37
56
-5
-80
-57
82
-19
82
-78
89
-64
100
28
123
117
50
47
13
-93
70
93
-121
107
-117
-12
-49
-83
-78
-14
-70
124
-43
26
-48
-48
90
71
79
123
27
1
115
95
-61
78
-11
-35
123
-54
-47
-111
-57
-6
77
60
-86
-34
55
1
17
-59
110
-43
111
101
-92
49
-92
43
97
9
35
-48
75
2
84
45
-90
-32
55
80
23
61
75
-49
-83
-127
-82
92
33
14
-123
-102
93
-69
-98
48
60
-124
84
27
-111
-128
-77
72
106
19
-35
98
-106
100
-84
-23
100
17
-103
-124
-82
34
-35
-104
22
60
-42
25
-112
23
-85
-96
33
50
51
-66
-26
-58
19
-111
87
-8
39
-108
-51
82
36
-69
66
116
123
-64
88
7
-128
-73
-99
-13
-53
-23
14
-46
-34
-33
-38
-92
9
-67
104
-60
-117
-46
-102
27
-6
108
84
-109
-27
-15
56
-50
-73
43
-76
25
-34
-28
63
-101
45
-77
-33
-46
127
21
-17
65
-98
-65
31
98
99
51
-68
-30
30
-110
50
13
55
-79
-49
-120
22
110
-55
62
65
69
-125
-100
-60
30
12
1
-42
105
-24
112
-71
109
20
-119
-30
-35
68
-73
90
-83
111
-86
100
35
-115
8
96
49
-96
95
-17
2
-15
95
88
-45
-100
70
43
4
78
-101
36
111
78
31
81
-8
-70
1
119
101
20
81
-77
113
-3
-73
93
27
63
101
49
68
17
74
-79
121
-105
-120
-59
14
-87
41
-91
108
-43
13
-8
-85
-89
39
62
100
39
-22
107
-64
-92
-3
-44
-43
-80
54
79
51
108
-58
-106
-71
6
-79
-19
-82
127
-126
5
13
-78
60
31
31
-110
-109
116
79
-77
92
-43
59
12
67
-113
7
-5
-68
-111
-10
-119
60
-47
59
-16
-88
-21
12
90
14
11
-7
-20
-109
14
124
3
-84
-28
-47
-67
-111
57
7
-68
-17
84
88
38
-35
63
-74
-16
18
40
-90
93
85
7
81
-63
52
-127
-40
-117
-7
12
-23
-126
-38
85
-112
79
112
-33
79
60
107
-20
112
59
-125
-96
-102
42
-78
100
-93
85
-96
-119
-91
61
95
45
84
-104
88
99
-114
-104
-123
-114
52
112
-31
14
57
21
29
31
-8
65
-107
-3
-53
-66
-126
77
-39
-31
113
-72
47
85
-12
-39
19
25
-105
89
-108
-52
21
88
102
41
-52
15
-19
-50
111
-76
-104
65
-5
-98
112
52
-20
-86
-15
8
-80
-35
24
-111
92
75
-67
25
-98
55
35
-89
-14
123
-50
-127
25
43
-108
-17
-56
117
-9
66
-99
-53
-78
21
86
69
-110
-45
69
64
-121
121
-1
76
-5
-99
85
69
98
-80
-123
-65
19
-128
-79
-89
86
0
-113
40
-66
76
99
-52
-71
-24
42
-28
101
72
24
41
-91
-106
69
-93
117
-81
-92
-54
122
111
52
-20
-35
46
122
-50
90
-118
46
-106
-108
103
53
-24
-84
53
-49
80
17
114
18
-32
-102
111
-105
26
-46
86
115
16
-109
108
104
-55
-42
-108
93
-25
-55
21
12
-121
34
-100
-5
105
-77
-123
-83
81
63
86
25
-84
-115
-116
91
119
-70
-101
-86
93
-45
48
-118
31
-92
-71
66
57
-54
39
-111
-61
16
-14
-99
-107
-8
94
44
-82
-105
-2
22
-41
-90
118
-5
-125
-41
-124
49
-6
101
66
0
-74
-17
-91
18
13
-122
74
37
17
5
114
3
-75
-96
75
-76
49
-64
113
-14
-89
15
-76
-35
6
-50
28
-16
47
111
42
52
86
96
97
-77
-85
37
5
48
58
-87
35
21
16
-42
-47
-83
-96
99
-73
-109
101
-19
-50
107
-56
74
104
-49
67
26
113
-116
-57
-98
-12
15
91
-50
-32
26
7
-91
13
-68
-16
-64
122
127
-60
39
-39
-29
88
107
77
11
-112
-15
114
-73
-128
-115
-98
114
-48
82
102
13
101
-87
100
75
61
-95
56
-34
-101
-122
-51
-110
101
-75
-34
-55
-54
-82
-72
39
39
107
65
-114
44
-15
57
77
59
36
-64
-108
16
-33
24
44
-89
68
-83
100
90
81
82
79
75
-76
-50
44
1
-31
-105
38
86
97
-35
62
-112
109
-54
-123
-50
-69
9
-114
-90
-104
-123
35
12
55
115
55
117
73
-110
28
61
-51
-79
-10
70
42
115
112
-29
123
79
-83
-12
42
-38
-126
82
-64
73
-30
109
-5
49
-103
51
34
-110
61
52
-107
20
98
4
-88
-112
14
-31
-79
-46
109
-106
96
-98
-59
-97
79
-16
-85
-114
-38
-120
120
-82
49
-90
-9
-27
-85
19
96
-33
94
96
-118
104
-20
114
92
26
-97
63
-123
57
-71
-46
108
-37
5
-107
106
76
-78
-49
56
-80
97
108
-93
-22
125
-3
-121
-67
-53
-1
-6
49
66
96
-56
57
28
63
32
-110
45
-12
-116
-18
116
80
38
82
-16
37
10
-67
-76
9
7
10
62
88
-102
23
5
120
28
39
81
97
58
-123
79
92
-90
107
101
10
12
33
-61
-87
72
105
59
-109
-42
27
82
7
-119
13
-105
44
-128
53
51
83
87
18
-62
125
-102
71
97
29
127
-118
8
31
-44
-68
27
40
54
89
59
32
-124
19
98
-18
-109
-70
47
-126
35
95
126
25
18
-71
60
-68
-48
-56
122
10
19
-73
-65
56
-52
7
-93
86
89
-22
-103
-44
-4
-19
13
68
-116
-38
-81
97
106
-35
14
81
-73
-27
104
39
-60
77
-64
-84
-54
-68
50
95
-36
74
-124
-70
25
-28
-3
-73
38
-15
122
-109
-36
53
-66
-46
61
-10
10
-125
-83
94
-19
-59
95
33
94
-118
13
96
8
-101
-20
-52
-27
-35
-33
14
14
-46
-22
103
-46
98
-22
-109
5
-36
-124
-12
-102
56
92
-20
117
-97
-121
-117
122
45
66
106
-22
-11
-28
-42
-17
69
17
49
117
44
49
-106
60
58
32
-68
43
-121
39
29
1079	1577
56	1079
140	1577
1203	1079
92	56
484	92
1677	1577
362	1203
506	484
299	506
1730	1203
258	299
438	92
1658	1677
224	438
1834	362
86	438
1576	86
1859	362
1247	56
1287	1677
1857	1576
1933	362
814	56
606	1658
1636	1247
853	140
1497	56
1666	1857
1912	853
1667	1287
1481	1859
1728	1912
788	1666
933	1857
838	1658
1142	506
1573	140
1054	1497
929	1142
1656	1857
1916	1834
1025	1658
1867	1658
62	1054
1325	1247
202	1142
572	1079
1155	1287
1265	1859
1542	202
125	1155
343	1265
1333	1265
950	362
621	224
494	606
1849	1677
1792	343
576	224
1344	1636
1922	1481
734	788
571	494
1159	572
1000	224
301	1265
554	606
1412	576
57	1000
446	202
906	1933
330	1497
1476	362
1913	1576
239	1203
1297	1867
286	1333
1077	1247
1583	301
596	853
1009	571
577	1577
1909	438
164	343
1688	1913
1887	572
975	484
1951	1576
443	1576
1521	1922
1607	1203
548	1913
582	258
1340	1203
105	1000
1269	582
1614	1730
1761	1297
1207	1265
97	140
527	582
661	1761
1841	1933
642	1576
1192	258
1789	1521
1585	838
1418	1497
1256	56
944	1521
1801	92
658	330
297	658
1900	62
82	224
1169	438
1474	1728
847	1576
809	1867
389	1857
867	1287
562	975
824	202
832	929
1248	1256
1058	1287
138	1000
1609	1859
1966	582
637	1576
978	596
1018	1573
843	1614
1897	1933
1460	62
1584	978
1317	1203
285	1966
1467	1325
523	446
1901	978
468	92
994	285
977	1913
434	224
936	389
1280	1203
1531	606
600	527
999	975
1452	1966
1213	1666
463	621
1030	299
751	1849
418	224
19	554
451	1018
209	1542
1939	140
1316	814
77	1636
1724	1666
139	1966
598	1867
252	57
382	1058
1640	446
1250	1922
1926	554
1561	1573
29	252
1683	29
842	1025
819	1909
1043	362
922	598
25	125
1814	1576
851	596
379	642
1080	1000
1456	598
45	29
557	97
1969	1939
1499	950
1387	1724
959	1909
887	824
1004	451
765	77
1432	1640
597	621
1252	867
356	362
1782	1333
777	202
1300	936
1225	1761
190	1252
136	1250
399	1933
875	527
1800	418
711	598
195	239
1747	1724
1286	494
1120	379
1530	1297
423	1966
461	356
692	711
507	125
1754	1859
1433	239
1895	418
1257	343
12	1460
1483	887
460	1432
179	1688
1380	842
335	105
822	461
1368	765
1654	1155
968	572
729	97
635	809
698	875
1177	777
1471	1004
1538	1080
28	1159
891	1913
1430	1814
1528	875
490	1009
1738	734
1119	1043
939	1119
1881	297
104	1789
1232	1474
110	1583
1478	1688
1084	922
726	1325
112	202
864	125
1994	1636
1630	975
866	1792
980	1867
1779	1340
1992	62
310	819
663	56
210	1912
731	1159
255	57
502	1043
640	104
759	1430
95	57
675	994
670	1344
1952	1340
1506	936
905	1079
666	195
367	765
972	1506
1370	1300
608	446
962	731
1856	468
245	1951
646	692
1686	1585
983	1155
1551	1433
860	1800
1803	92
1464	299
1826	944
1305	1250
1027	978
680	819
368	423
68	1009
984	680
1335	382
810	1467
72	1895
1150	968
623	1120
207	1203
1372	1585
194	258
94	891
1750	239
743	1531
307	1372
1001	864
234	1080
1060	571
1330	1803
1513	1789
315	1471
912	1966
1352	335
1906	1573
870	1317
1762	56
1708	1027
1518	866
1437	527
1657	1207
1261	860
549	209
1231	1159
1196	299
1339	1577
1925	255
1016	1300
511	1754
417	92
1024	608
1608	1476
488	1607
1007	1800
892	635
1145	1297
326	819
391	1800
785	1551
883	507
573	743
218	460
1022	950
1868	330
1229	451
854	310
237	1412
766	843
1885	984
930	1538
203	301
81	1054
339	1325
1595	367
1949	1030
1564	1000
592	549
964	164
1581	640
1668	62
2000	1483
248	463
1469	968
1721	814
1981	1387
1424	1909
338	1754
1563	977
1195	1119
1613	1464
1046	1564
426	1561
1284	1469
383	1901
60	1636
952	1630
1511	549
1208	1231
1877	1926
1832	1418
1967	301
830	606
1133	870
1361	68
74	1430
1429	237
1997	1506
636	1481
262	28
768	1909
715	729
1505	1640
667	1009
436	94
1314	1922
1862	549
508	711
1853	1584
493	1155
1793	1630
1953	891
79	1933
141	1476
163	962
979	785
1005	646
1128	1925
292	527
1820	1456
78	1203
228	82
1572	1464
1346	1024
1858	1636
215	1922
349	1286
1127	1564
1304	929
1228	237
664	933
1917	255
919	79
1034	163
1550	1862
1947	661
1696	1229
514	1686
935	1826
59	1953
273	1577
1191	262
1263	1779
108	77
1209	906
619	1561
1013	860
259	983
632	1868
1508	606
27	86
198	980
1057	1191
1179	1803
9	1789
722	1951
1638	573
599	964
1482	597
1199	1119
1104	493
1288	28
1189	912
1837	929
288	1528
166	984
821	637
808	1418
515	190
233	1228
71	1256
1337	1034
1975	768
796	1531
694	1471
1899	1801
1740	105
1569	1476
1751	1054
1167	860
1596	507
75	975
1039	663
20	1043
836	1518
958	255
1697	1248
841	930
369	1261
1415	929
1920	490
1200	929
1648	1596
1617	1550
1438	362
1064	822
329	1120
360	1648
969	29
1687	1832
1124	215
674	1009
1998	1432
610	1992
645	743
1777	1521
1816	1561
580	1265
535	1269
1116	912
1251	842
1354	979
1600	623
404	1841
270	1636
442	1789
1633	905
1334	1569
321	1415
1190	315
948	958
716	210
1421	1638
1955	1528
852	1658
1221	582
477	1421
1062	1213
1620	434
1038	57
995	1754
459	1761
376	292
359	646
1737	82
1544	1079
1854	1438
48	635
868	1992
1488	1304
1984	636
1819	493
934	1159
973	1119
825	1906
411	1046
420	1232
1309	1573
1019	164
1031	1849
1698	1897
1723	1104
627	1169
604	1895
1828	1430
393	207
1653	48
1588	255
1691	367
172	576
1699	667
1089	310
1935	195
220	1614
1770	125
1152	1816
500	62
1678	1828
199	830
1353	262
1756	1142
902	463
1095	1325
1294	922
275	25
444	1452
1760	768
1700	20
1611	1334
1644	1777
1486	1803
325	969
531	125
1021	493
1293	321
1431	1728
1714	488
533	233
1267	1730
302	1080
1806	1062
115	533
67	1955
1491	663
728	852
64	533
401	436
1042	999
967	841
1244	1060
1771	438
602	1297
1944	1256
1709	983
168	1039
1818	645
89	623
290	20
1938	1232
1240	164
1458	297
232	979
300	905
1090	1614
193	349
1804	1542
342	572
1539	1280
591	1209
358	906
1489	842
1671	1104
754	934
24	967
370	557
1928	442
1968	1195
758	765
298	163
1348	1617
497	596
1641	1969
1652	1877
714	964
1978	1998
518	642
1473	1544
673	360
638	443
764	255
1168	1244
1891	358
783	841
1094	1887
1556	1042
450	232
93	1030
1674	729
1884	515
1479	1666
745	1232
1115	722
263	383
542	1928
1157	1478
1748	1906
491	1269
1995	1885
760	1984
35	1640
55	596
347	934
498	666
1681	1804
684	1159
42	1826
1547	843
397	1926
1185	1452
127	969
257	680
803	343
1059	391
1310	1294
1534	715
932	866
656	1046
544	1671
657	1653
586	1617
1149	1115
556	1534
1242	514
869	1257
1181	1054
504	1499
295	302
291	922
850	1203
1755	1168
1811	864
1135	1294
174	1668
1015	404
1495	1899
1006	1949
1602	404
240	1816
746	734
643	1801
83	549
706	108
1976	1658
155	110
467	1738
1865	288
725	255
1472	1951
1218	1596
5	1849
1989	382
652	1789
101	591
306	1185
1722	411
545	1229
834	306
840	67
73	599
1802	1748
1052	1800
681	1895
558	1354
778	922
142	389
762	1596
1718	1916
1753	1561
845	1641
569	959
1306	948
1003	1789
327	545
1227	1748
1692	684
1008	460
1957	1955
988	905
889	1531
1851	743
685	27
903	443
371	783
1964	1079
1088	1080
1343	1550
135	2000
144	1330
1082	209
521	1415
1562	339
625	1909
874	110
407	1751
584	1344
1029	258
792	542
1336	725
1821	638
212	1696
351	493
991	694
595	1709
811	549
863	1709
1204	734
771	1933
226	1218
1165	771
1512	1564
1423	1913
1050	1614
223	698
894	1814
1946	1293
1037	1094
686	729
372	1891
1791	580
1163	627
1164	1724
795	958
1763	1530
23	1021
46	1658
51	1052
957	824
1108	1584
14	95
837	1508
1455	1387
279	1294
437	1089
158	1531
462	866
414	1613
8	602
1302	905
1049	698
1318	853
188	468
1810	1811
693	1361
265	233
361	1021
47	1213
486	521
736	1031
713	1724
1889	1751
364	1421
629	608
1731	1708
1184	1293
1374	248
1999	936
427	245
1161	399
439	1455
676	1155
1453	1640
559	1683
873	1488
1465	1269
947	9
180	1709
1937	1728
923	1167
1919	1305
1375	1678
466	1464
1278	1821
1122	841
669	1057
1883	936
1072	635
495	1944
1035	515
1426	894
17	358
151	1013
1911	1372
470	573
1533	1337
256	1952
1795	335
750	1330
1655	1648
1202	1250
480	1544
1410	1152
925	1853
388	1806
1874	1928
1986	1547
1073	1000
184	256
1174	2000
213	635
1205	359
1541	151
403	477
1099	1953
1363	978
1102	466
1519	602
1720	1658
1373	407
171	263
997	1209
701	1269
1767	444
6	285
225	508
197	494
1679	104
1224	414
1552	203
1215	1325
128	1655
1924	190
268	1518
311	437
1051	1531
374	1562
1484	1090
1463	57
568	71
314	1576
672	1006
1071	73
1416	1116
238	994
303	1738
250	1133
1194	889
899	948
410	646
1502	1658
447	559
898	220
614	701
1972	393
570	72
1180	1653
1659	743
735	853
319	1469
1682	463
1026	1666
1262	467
1833	1854
1311	661
1105	391
251	580
928	356
611	193
1780	494
1774	1035
1734	1034
1579	531
953	1638
1631	1858
1915	947
565	875
208	279
767	711
971	1251
1929	127
924	1938
1358	1426
770	1008
131	5
1362	645
1503	1968
798	1018
1626	1868
1255	1737
449	1481
872	1489
1355	1194
1222	1928
145	484
1144	1257
119	310
976	1947
1515	903
1470	1387
1798	115
1091	964
1954	598
276	45
780	55
880	1464
1680	1115
1864	973
886	933
525	273
882	1007
517	934
266	967
1186	929
560	1058
305	1731
116	1885
1684	778
1942	292
740	1947
878	295
1056	451
1259	86
1993	1821
791	515
129	1858
282	1034
1970	232
718	1473
561	842
1298	1970
323	1803
1741	42
512	1297
1447	1179
690	1723
1040	535
118	556
316	1318
405	635
106	957
1214	407
1377	55
951	403
1132	470
588	1090
1824	1001
1017	850
1527	1471
1384	1064
1624	652
100	760
1689	951
634	467
496	882
1113	79
98	1656
1575	796
812	983
304	1681
823	446
217	1901
622	1992
147	1132
1405	1926
341	791
1676	304
655	1335
1241	1859
593	1474
833	414
797	1038
992	1177
1893	771
123	232
1662	1288
429	1284
820	257
1279	584
1710	285
1987	155
648	1680
162	1483
1956	1426
1961	891
1382	899
501	1709
848	12
1559	1262
445	410
707	912
699	1964
1568	28
1388	1159
352	302
1769	1791
1087	163
756	1049
1156	597
1404	627
1319	535
659	5
1391	634
1239	1363
914	1804
1645	1099
1146	1495
678	1864
748	1731
574	257
816	680
499	195
1601	282
211	164
594	162
1875	1682
1216	1770
1567	1512
552	1804
1914	1156
775	1826
1210	434
1739	746
996	777
1125	286
1002	887
986	393
1331	1608
865	1588
336	996
1364	427
191	100
1869	797
1675	1482
392	275
763	810
954	659
1727	1709
1109	1868
931	459
671	1387
154	1692
1894	225
43	777
167	686
66	718
1386	1029
1234	1864
1719	388
214	1039
691	797
1965	1780
774	1049
1466	914
1908	681
1592	1013
1219	1113
421	1180
1020	632
1694	508
1890	629
1632	694
855	1453
911	1071
1921	743
87	1318
761	1849
946	1071
134	45
1545	1928
773	1203
1170	1229
37	224
1281	1222
1427	1127
926	1579
416	125
615	1054
1707	1302
1554	460
1477	655
377	1497
3	288
1923	934
1948	1087
204	1077
1637	6
1444	1080
464	323
34	245
893	215
38	1128
710	1453
1980	1382
161	992
1085	1458
1041	953
1468	872
1794	947
1078	1370
402	1002
320	1005
813	495
472	1382
350	832
1665	1718
422	748
1198	347
1548	1699
550	999
50	1127
628	1447
328	675
1462	135
345	1087
465	1562
1413	468
277	934
647	110
1807	798
479	758
993	110
1130	1502
742	1241
36	1547
478	468
908	1699
1369	1244
331	364
246	298
394	496
612	1155
355	1150
907	370
1535	971
1950	1692
1398	323
1032	1550
916	1923
181	1495
96	1288
1736	1874
1553	1502
1996	225
626	886
782	465
1282	1750
1323	1981
1977	376
247	912
802	1346
724	948
1557	1052
373	1637
1635	672
380	252
807	1466
1619	210
1301	1913
260	765
91	848
1514	1996
945	610
1045	426
1982	1334
784	1803
1092	512
1788	1539
1732	1095
1960	328
1823	1665
1650	1609
1081	632
1507	6
1985	135
205	397
1713	416
712	1654
1744	232
1701	1922
1822	265
1400	1564
322	1763
536	1181
1522	707
458	586
333	232
1558	1985
90	434
76	197
1273	670
683	205
1178	1915
1420	380
1114	1811
1141	1386
177	1361
1414	1120
1918	1916
206	746
618	765
1126	1481
1350	496
1537	115
1442	764
1825	23
111	1714
942	1632
456	1900
13	962
1158	1881
149	1832
609	1951
1742	1739
1147	297
1717	262
884	1804
312	999
613	1019
1878	1595
1815	1980
271	1818
293	1141
49	66
1651	1738
1061	1099
1342	875
1785	1352
1846	410
1014	984
723	442
1927	499
1131	202
52	894
961	260
216	1302
741	556
150	417
1440	57
1112	407
249	574
1206	1340
1448	207
704	1512
16	1145
156	872
187	1576
1328	837
475	1216
435	691
1733	939
1137	111
457	1102
489	1826
1628	262
1492	883
1271	884
1936	1651
1236	1915
400	1977
1504	480
1598	760
982	1488
901	1386
1910	1252
1237	468
697	1031
1485	1116
1805	992
1324	883
1321	724
965	853
668	1184
687	742
160	1460
679	108
1852	389
1401	27
1154	479
1991	383
566	944
186	1644
10	1998
1958	1278
230	679
1249	1662
858	1255
620	731
425	646
1312	565
1663	860
122	374
1	1678
1943	351
1326	486
1011	552
1835	1938
473	507
99	140
1773	1875
378	290
1173	1102
1086	907
937	391
1356	571
30	1755
583	1951
1322	1975
1570	711
1784	1003
1246	339
547	1657
278	795
1270	445
1036	246
1176	746
641	1005
1136	35
747	1421
1873	1469
357	533
520	228
153	1059
989	364
1096	1037
1389	1926
1532	1302
318	613
827	988
264	155
121	561
757	79
779	358
1945	1773
1610	1034
54	959
781	1300
717	693
487	1890
1408	707
963	1700
1118	1671
769	1794
793	1492
469	611
662	922
1197	197
727	883
1940	572
1366	1370
1223	1377
1139	713
1589	1333
1047	750
242	500
719	1478
1716	1815
173	72
1664	1638
702	10
1876	1943
539	1924
1385	335
1033	773
1121	1413
541	361
1098	1432
1799	215
955	1400
387	451
58	1573
1449	488
269	521
616	810
1332	1404
513	1851
1786	1548
170	110
607	1037
1647	494
732	1460
1863	1748
1574	866
956	151
406	750
1292	405
130	872
1349	597
1182	304
1931	1583
84	74
348	657
1695	1319
721	1739
1100	1089
1110	1375
538	1533
581	1738
1586	779
253	995
1123	130
1230	1210
455	383
1808	1485
1845	973
1443	729
1283	1141
920	223
219	1806
1860	393
1285	2000
176	1613
1217	577
44	1105
776	223
1523	1486
146	1761
1759	499
1183	1518
1143	1926
705	1581
296	1491
1434	1922
1075	1773
137	1881
650	622
1260	643
1726	1369
1543	691
1817	1054
1069	1658
755	1608
440	459
1134	1
1764	1474
524	188
1605	1321
1813	1049
1829	25
733	572
985	370
1615	1920
1254	1584
1599	1943
682	1183
555	1949
737	781
1715	443
1861	460
1172	1531
909	1408
1625	486
196	870
526	1431
800	193
430	199
1238	824
1498	1420
1076	484
1329	903
39	1458
730	348
503	936
589	1508
1403	1020
1419	459
33	1996
1757	1110
1934	780
419	989
918	721
1830	320
182	792
1235	125
703	731
1871	401
1685	1437
1365	290
1068	1052
200	1633
1277	1733
159	1970
1560	887
631	188
1711	907
241	1085
987	1203
1494	1528
688	950
1898	727
1425	570
1673	1498
1941	1309
340	1893
1411	1883
1524	535
1840	878
1093	260
192	1914
790	238
579	1374
1988	54
1872	1250
1313	819
381	1183
1932	381
1879	1810
21	1921
752	439
1243	1205
846	1802
1028	1889
804	1349
61	770
644	1958
1758	823
1299	250
567	597
235	1961
1621	86
1275	1614
1345	554
1327	36
551	1036
1990	878
395	1999
695	936
132	1410
1566	1760
998	140
900	300
1055	887
1776	1105
1597	459
546	977
1376	48
244	325
1381	336
938	737
1729	300
1604	230
15	414
103	315
1148	825
1979	647
1536	643
1781	411
363	129
1220	307
1296	1924
178	1008
309	767
1475	1202
1549	1828
1555	858
639	1750
540	1319
344	562
1493	1684
1417	612
1070	1689
1107	763
1083	667
1896	922
1066	1748
590	1619
398	75
1886	690
107	640
1341	83
897	1285
1496	87
1582	1014
689	1814
585	1248
543	1483
904	1381
26	790
1593	713
492	579
677	265
817	342
881	149
1752	184
1162	1961
720	961
519	1131
1962	1885
1065	1179
1634	59
483	57
1457	938
1907	865
1101	1158
828	123
32	1442
913	595
1812	1758
448	1527
1367	451
1639	326
424	639
1378	1972
1746	1757
553	555
126	258
1226	657
829	1644
353	1424
1618	1066
1693	1710
409	265
1510	1761
1749	1466
1053	1088
80	545
654	1967
578	213
1487	1470
175	889
856	1698
1702	470
317	980
1843	1829
332	1278
365	1230
1672	325
1836	417
366	699
1706	1032
927	1579
1063	582
287	1910
831	912
1501	1535
530	382
1888	209
522	200
1383	1425
1612	554
1393	1075
40	458
603	1313
1622	891
482	748
1850	398
1526	767
412	1567
871	1202
981	962
88	569
109	975
485	1481
1390	199
509	475
960	38
1371	1916
839	1319
799	89
587	1553
915	1016
1187	1940
794	922
63	902
1290	551
890	1474
18	1221
700	1335
649	1488
384	899
1106	1596
1705	1628
1571	723
1831	1570
974	1122
346	647
289	577
1439	1820
943	1075
1827	1717
564	216
1153	1837
1480	39
921	1734
1023	1007
1160	830
624	1639
1138	1943
1067	494
709	417
1010	329
1642	1852
1175	343
1392	1720
313	555
849	1267
453	1054
1704	991
861	873
510	196
1253	952
1743	771
1394	462
1790	1282
1266	960
229	1548
7	909
910	1138
165	843
1661	42
1591	712
563	224
474	111
31	1230
879	1888
431	1570
70	1807
133	836
261	331
633	685
1103	1702
1315	119
877	1337
120	919
970	182
835	929
1902	1380
1044	1976
1211	1221
1660	108
1303	750
236	989
949	603
337	856
114	836
696	1659
1441	1840
1289	794
1959	1817
1402	1537
413	380
1580	1569
148	337
1074	779
605	546
806	370
1703	1062
1048	1723
157	171
386	1991
1347	1802
1201	883
1590	1704
1461	627
308	882
428	1780
575	21
1775	373
1725	1955
1930	395
283	1577
272	502
334	204
385	627
1140	627
452	1761
294	1334
117	1837
1880	560
284	1259
69	1065
941	521
65	1426
231	450
1540	404
183	861
1295	423
222	1662
1264	514
143	742
1379	564
432	1416
201	15
1842	1925
1409	234
1351	893
102	1252
1627	303
1796	200
1974	928
1268	1679
1603	213
41	1560
1670	1371
1546	114
1258	1015
1623	220
280	1228
1338	957
1587	1744
862	1979
390	430
1407	380
1188	1072
1129	1217
1212	134
354	1864
1649	569
1866	1239
786	1942
1320	1808
1594	677
1307	561
1272	1513
481	447
1745	746
990	948
940	872
917	394
243	1303
1111	677
805	1785
1892	1807
888	827
1428	1738
408	102
1451	1999
1963	563
651	1837
1446	832
1171	1826
1643	640
1245	1909
1233	1090
1844	1495
885	450
789	1353
1882	861
537	291
1848	386
630	1704
2	1366
966	781
454	429
1772	316
476	322
1783	612
1490	418
895	1774
601	1795
1838	1068
1517	337
744	1851
1855	1127
1509	644
818	1242
844	619
1097	1221
227	668
660	1417
85	731
516	1857
1520	497
324	208
254	603
185	735
1903	1090
896	1552
375	1898
152	393
281	932
1839	1211
739	1632
1359	627
1422	39
1809	411
1578	744
267	1485
1291	27
1606	713
859	624
1904	1359
1765	1503
1905	693
876	1201
1193	769
505	1709
1629	882
1712	1980
1565	1387
1360	1838
1973	586
1012	193
1406	1788
1787	1318
1274	1352
708	1779
1870	531
113	444
528	940
189	121
1397	633
772	1873
753	267
529	1229
532	1407
738	785
1525	1966
471	1609
1459	295
1399	609
22	1937
1450	1101
396	484
1396	650
1971	1153
1500	1134
124	1597
1983	683
274	1110
415	464
1308	536
1529	795
221	1953
1797	638
534	121
11	60
1516	913
433	1040
441	1535
826	226
787	1331
1690	1880
1766	658
53	1128
1669	1583
1436	982
1117	1399
617	1232
169	1905
1395	1872
1768	770
1616	218
1454	1441
1166	345
653	1039
1735	161
857	700
801	686
665	543
1778	883
1435	293
1151	141
1445	324
749	1970
4	1183
815	726
1276	1678
1847	1796
1357	1630
1646	222
0	0]]></test_input>
<test_output><![CDATA[52542]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[幸运儿]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">n 个人围成一圈, 并依次编号1～n，。从编号为1 的人开始，按顺时针方向每隔一人选出一个，剩下的人重新围成一圈，如此循环直到剩下两人，这剩下的两人就是幸运儿。如果你想成为最后两个幸运儿，请问开始时应该站在什么位置？（设3&lt;=n&lt;=50） </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">有多个测试序列。每行是开始时的人数n </font></p>]]></input> 
<output><![CDATA[<p>第1 行是选出顺序，第2 行是两名幸运儿的开始位置（按升序排列），位置编号之间用一个空格分开。</p>]]></output>
<sample_input><![CDATA[12
20
45

]]></sample_input>
<sample_output><![CDATA[2 4 6 8 10 12 3 7 11 5 
1 9
2 4 6 8 10 12 14 16 18 20 3 7 11 15 19 5 13 9 
1 17
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 3 7 11 15 19 23 27 31 35 39 43 5 13 21 29 37 45 9 25 41 17 
1 33 

]]></sample_output>
<test_input><![CDATA[5 12 15 20 30 45]]></test_input>
<test_output><![CDATA[2 4 3 
1 5 
2 4 6 8 10 12 3 7 11 5 
1 9 
2 4 6 8 10 12 14 3 7 11 15 5 13 
1 9 
2 4 6 8 10 12 14 16 18 20 3 7 11 15 19 5 13 9 
1 17 
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 3 7 11 15 19 23 27 5 13 21 29 9 25 
1 17 
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 3 7 11 15 19 23 27 31 35 39 43 5 13 21 29 37 45 9 25 41 17 
1 33 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院
吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[开心的金明]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的 很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早金明就开始做预算， 但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查 到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />
<br />
设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />
v[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />
<br />
请你帮助金明设计一个满足要求的购物单。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行，为两个正整数，用一个空格隔开：  <br />
N m  <br />
（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）  <br />
从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数  <br />
v p  <br />
（其中v表示该物品的价格(v&lt;=10000)，p表示该物品的重要度(1~5)）  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;100000000）。</font></p>]]></output>
<sample_input><![CDATA[1000 5
800 2
400 5
300 5
400 3
200 2]]></sample_input>
<sample_output><![CDATA[3900]]></sample_output>
<test_input><![CDATA[2000 8
800 2
400 5
400 5
500 3
200 2
430 4
540 3
239 3
]]></test_input>
<test_output><![CDATA[7937
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[恺撒密码]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">恺撒生活在充满危险和阴谋的时代. 恺撒面对的最困难的问题是生存. 为了生存, 他决定创造一种密码. 这种密码听起来难以置信, 如果不知 <br />
<br />
道方法, 没有人可以破解. <br />
<br />
你是恺撒军队的一个上尉. 你的工作是解密消息并将之提供给将军. 密码很简单. 对明文的每个字母右移5个位置以创建密文 (如字母'A', 密 <br />
<br />
文是'F'). <br />
有如下对应: <br />
<br />
密文 <br />
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br />
<br />
明文 <br />
V W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br />
<br />
只有字母需要移位, 其它字符保持不变, 所有字母均是大写. <br />
</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入为至多100组数据. 每组数据有如下格式, 中间无空行. <br />
<br />
一组数据有3部分: <br />
<br />
起始行 - 单独一行: &quot;START&quot; <br />
密文 - 单独一行, 包含1到200个字符, 组成恺撒的消息. <br />
结束行 - 单独一行: &quot;END&quot; <br />
<br />
最后一组输入是单独一行: &quot;ENDOFINPUT&quot;. </font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">对每组数据有一行输出. 即恺撒的原始消息. </font></p>]]></output>
<sample_input><![CDATA[START
NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX
END
START
N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ
END
START
IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ
END
ENDOFINPUT

]]></sample_input>
<sample_output><![CDATA[IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES
I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME
DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE

]]></sample_output>
<test_input><![CDATA[START
F SJB UFWQNFRJSY NX JQJHYJI NS YMJ XYFYJ TK RRRR
END
START
YMJ KNWXY TK YMJR YTTP YMJ HMFNWRFS'X XJFY.
END
START
FX UMDXNHX IJAJQTUX FSI RTAJX TS, XHNJSYNXYX KNSI RTWJ FSI RTWJ XYWFSLJ JQJRJSYFWD UFWYNHQJX, BMTXJ UWTUJWYNJX FWJ RTWJ YMFS ZSPSTBS. DTZ RFD MFAJ MJFWI FGTZY RZTSX, LQZTSX FSI TYMJW XYWFSLJ UFWYNHQJ-
END
START
NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX
END
START
N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ
END
START
IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ
END
ENDOFINPUT]]></test_input>
<test_output><![CDATA[A NEW PARLIAMENT IS ELECTED IN THE STATE OF MMMM
THE FIRST OF THEM TOOK THE CHAIRMAN'S SEAT. 
AS PHYSICS DEVELOPS AND MOVES ON, SCIENTISTS FIND MORE AND MORE STRANGE ELEMENTARY PARTICLES, WHOSE PROPERTIES ARE MORE THAN UNKNOWN. YOU MAY HAVE HEARD ABOUT MUONS, GLUONS AND OTHER STRANGE PARTICLE- 
IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES
I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME
DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[愚蠢的摄影师]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">背景 <br />
&quot;如果两个人相差一秒出生, 其中一个是小孩, 那么另一个也是小孩. 由此可以推论, 所有人均是小孩.&quot; <br />
<br />
问题 <br />
数计系是一个由N个人组成的大家庭, 分别为1, 2, 3, ..., N岁. <br />
<br />
有一次系主任想为全系拍张合照. 需要所有学生站成一排. <br />
起先他想按他们的岁数从小到大安排, 但后来又觉得这样不自然. <br />
于是他建议按如下方案站排: <br />
1岁的在最左边. <br />
每相邻两人不得相差超过2岁. <br />
<br />
这样学生的岁数看起来显得很平均(25岁和27岁的人差别很难看出). <br />
存在多种方案满足此要求. <br />
摄影师不想违反系主任的意愿, 就为每种可能的安排分别拍了一张照片. <br />
</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">整数N, 1&lt;=N&lt;=55.</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">所拍照片张数.</font></p>]]></output>
<sample_input><![CDATA[4]]></sample_input>
<sample_output><![CDATA[4
]]></sample_output>
<test_input><![CDATA[2]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[6]]></test_input>
<test_output><![CDATA[9]]></test_output>
<test_input><![CDATA[4]]></test_input>
<test_output><![CDATA[4]]></test_output>
<test_input><![CDATA[9]]></test_input>
<test_output><![CDATA[31]]></test_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[6]]></test_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[55]]></test_input>
<test_output><![CDATA[1388937263]]></test_output>
<test_input><![CDATA[7]]></test_input>
<test_output><![CDATA[14]]></test_output>
<test_input><![CDATA[38]]></test_input>
<test_output><![CDATA[2092014]]></test_output>
<hint><![CDATA[<p><font face="Times New Roman" size="3">若N=4, 则有4种可能的安排: (1,2,3,4), (1,2,4,3), (1,3,2,4) and (1,3,4,2).</font></p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[成绩转换]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： <br />
90~100为A; <br />
80~89为B; <br />
70~79为C; <br />
60~69为D; <br />
0~59为E; </font><br />
</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，由一个整数组成。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：&ldquo;Score is error!&rdquo;。</font></p>]]></output>
<sample_input><![CDATA[56
67
100
123

]]></sample_input>
<sample_output><![CDATA[E
D
A
Score is error!

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[换位置]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">M个人围成一圈，每分钟相邻的两个人可以交换位置（只能有一对交换）。求使M个人的顺序颠倒（即每个人左边相邻的人换到右边，右边相邻的人换到左边）所需的最少时间（分钟数）。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行为测试数据的组数n，以后n行中每行为一个小于32767的正整数，表示M</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组测试数据，输出一个数，表示最少需要的分钟数。</font></p>]]></output>
<sample_input><![CDATA[3
4
5
6
]]></sample_input>
<sample_output><![CDATA[2
4
6

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[排列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Ray又对数字的列产生了兴趣: 现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行是一个整数N，表示数据的组数。每组数据占一行，代表四张卡片上的数字（保证四个数字都不同，且0&lt;数字&lt;10）。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔，每组输出数据间空一行，最后一组数据后面没有空行。</font></p>]]></output>
<sample_input><![CDATA[2
1 2 3 4
1 2 3 5]]></sample_input>
<sample_output><![CDATA[1234 1243 1324 1342 1423 1432
2134 2143 2314 2341 2413 2431
3124 3142 3214 3241 3412 3421
4123 4132 4213 4231 4312 4321

1235 1253 1325 1352 1523 1532
2135 2153 2315 2351 2513 2531
3125 3152 3215 3251 3512 3521
5123 5132 5213 5231 5312 5321]]></sample_output>
<test_input><![CDATA[8
1 2 3 4
1 2 3 5
4 6 7 8
3 5 4 2
6 4 5 7
2 4 6 8
4 6 8 5
7 5 4 6
]]></test_input>
<test_output><![CDATA[1234 1243 1324 1342 1423 1432
2134 2143 2314 2341 2413 2431
3124 3142 3214 3241 3412 3421
4123 4132 4213 4231 4312 4321

1235 1253 1325 1352 1523 1532
2135 2153 2315 2351 2513 2531
3125 3152 3215 3251 3512 3521
5123 5132 5213 5231 5312 5321

4678 4687 4768 4786 4867 4876
6478 6487 6748 6784 6847 6874
7468 7486 7648 7684 7846 7864
8467 8476 8647 8674 8746 8764

3542 3524 3452 3425 3254 3245
5342 5324 5432 5423 5234 5243
4352 4325 4532 4523 4235 4253
2354 2345 2534 2543 2435 2453

6457 6475 6547 6574 6745 6754
4657 4675 4567 4576 4765 4756
5647 5674 5467 5476 5764 5746
7645 7654 7465 7456 7564 7546

2468 2486 2648 2684 2846 2864
4268 4286 4628 4682 4826 4862
6248 6284 6428 6482 6824 6842
8246 8264 8426 8462 8624 8642

4685 4658 4865 4856 4568 4586
6485 6458 6845 6854 6548 6584
8465 8456 8645 8654 8546 8564
5468 5486 5648 5684 5846 5864

7546 7564 7456 7465 7654 7645
5746 5764 5476 5467 5674 5647
4756 4765 4576 4567 4675 4657
6754 6745 6574 6547 6475 6457
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[数列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">给定一个正整数k(3&le;k&le;15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：  <br />
1，3，4，9，10，12，13，&hellip;  <br />
（该序列实际上就是：3^0，3^1，3^0+3^1，3^2，3^0+3^2，3^1+3^2，3^0+3^1+3^2，&hellip;）  <br />
请你求出这个序列的第N项的值（用10进制数表示）。  <br />
例如，对于k=3，N=100，正确答案应该是981。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">只有1行，为2个正整数，用一个空格隔开：  <br />
k N  <br />
（k、N的含义与上述的问题描述一致，且3&le;k&le;15，10&le;N&le;1000）。 </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*10^9）。（整数前不要有空格和其他符号）。</font></p>]]></output>
<sample_input><![CDATA[3 100]]></sample_input>
<sample_output><![CDATA[981]]></sample_output>
<test_input><![CDATA[5 120
]]></test_input>
<test_output><![CDATA[19500
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[数列排序]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">将一正整数序列{K1,K2,...,K9}重新排列成一个新的序列。新序列中，比K1小的数都在K1的前面(左面)，比K1大的数都在K1的后面(右面)。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入有多行,第一行为N表示行数,每行9个整数.</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出N行,按要求进行排序的结果.</font></p>]]></output>
<sample_input><![CDATA[2
6 8 9 1 2 5 4 7 3
3 5 8 9 1 2 6 4 7

]]></sample_input>
<sample_output><![CDATA[3 4 5 2 1 6 8 9 7
2 1 3 5 8 9 6 4 7

]]></sample_output>
<test_input><![CDATA[2
6 8 9 1 2 5 4 7 3
3 5 8 9 1 2 6 4 7]]></test_input>
<test_output><![CDATA[3 4 5 2 1 6 8 9 7
2 1 3 5 8 9 6 4 7]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[数列有序]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，输出插入新的元素后的数列。</font></p>]]></output>
<sample_input><![CDATA[3 3
1 2 4
0 0

]]></sample_input>
<sample_output><![CDATA[1 2 3 4
]]></sample_output>
<test_input><![CDATA[3 3
1 2 4
10 26
1 3 5 7 9 10 30 50 70 90
15 94
15 21 34 56 87 103 207 210 224 236 250 300 312 324 400
99 237
0    1   2   3   4    5   6   7   8   9 
10   20  30  40  50  60  70  80  90 100
110 120 130 140 150 160 170 180 190 200
210 220 230 240 250 260 270 280 290 300
310 320 330 340 350 360 370 380 390 400
410 420 430 440 450 460 470 480 490 500
510 520 530 540 550 560 570 580 590 600
610 620 630 640 650 660 670 680 690 700
710 720 730 740 750 760 770 780 790 800
810 820 830 840 850 860 870 880 890
0 0]]></test_input>
<test_output><![CDATA[1 2 3 4 
1 3 5 7 9 10 26 30 50 70 90 
15 21 34 56 87 94 103 207 210 224 236 250 300 312 324 400 
0 1 2 3 4 5 6 7 8 9 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 237 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610 620 630 640 650 660 670 680 690 700 710 720 730 740 750 760 770 780 790 800 810 820 830 840 850 860 870 880 890 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[数列问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">已知一个数列的前3个数为3，4，5，以后每个数为前3个数的和，编程序求此数列的第N项</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入N(N&lt;=35)</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">求出第N项的值</font></p>]]></output>
<sample_input><![CDATA[28
]]></sample_input>
<sample_output><![CDATA[25527448
]]></sample_output>
<test_input><![CDATA[5]]></test_input>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[21]]></test_output>
<test_input><![CDATA[15]]></test_input>
<test_output><![CDATA[194900]]></test_output>
<test_input><![CDATA[24]]></test_input>
<test_output><![CDATA[9259]]></test_output>
<test_input><![CDATA[10]]></test_input>
<test_output><![CDATA[440]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[数字统计]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，  <br />
每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数  <br />
字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1， <br />
2，&hellip;，9。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">给出表示书的总页码的整数n（1&le;n&le;2^31-1）</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">输出10行，在第k行输出页码中用到数字k-1 的次数，k=1，2，&hellip;，10。</font></p>]]></output>
<sample_input><![CDATA[11
]]></sample_input>
<sample_output><![CDATA[1
4
1
1
1
1
1
1
1
1]]></sample_output>
<test_input><![CDATA[33]]></test_input>
<test_input><![CDATA[5612744
6723855
6723603
6715603
6645601
6612845
6612845
6612793
6612744
6045492]]></test_input>
<test_output><![CDATA[3
14
14
8
3
3
3
3
3
3]]></test_output>
<test_input><![CDATA[100]]></test_input>
<test_output><![CDATA[11
21
20
20
20
20
20
20
20
20]]></test_output>
<test_input><![CDATA[1000000]]></test_input>
<test_output><![CDATA[488895
600001
600000
600000
600000
600000
600000
600000
600000
600000]]></test_output>
<test_input><![CDATA[999]]></test_input>
<test_output><![CDATA[189
300
300
300
300
300
300
300
300
300]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[敲七]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">输出7和7的倍数，还有包含7的数字例如（17，27，37...70，71，72，73...）</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">一个整数N。(N不大于30000) </font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">统计出不大于N的与7有关的数字的个数。如20以内与7有关的数为7、14、17共3个。</font></p>]]></output>
<sample_input><![CDATA[20
]]></sample_input>
<sample_output><![CDATA[3
]]></sample_output>
<test_input><![CDATA[7]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[29800]]></test_input>
<test_output><![CDATA[13067]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[205]]></test_input>
<test_output><![CDATA[62]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[0]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[整除的尾数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个整数，只知道前几位，不知道末二位，被另一个整数除尽了，那么该数的末二位该是什么呢</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有若干组，每组数据包含二个整数a，b（0＜a＜10000, 10＜b＜100），若遇到0 0则处理结束</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对应每组数据，将满足条件的所有尾数在一行内输出，格式见样本输出。同组数据的输出，其每个尾数之间空一格，行末没有空格。</font></p>]]></output>
<sample_input><![CDATA[200 40
1992 95
0 0]]></sample_input>
<sample_output><![CDATA[00 40 80
15
]]></sample_output>
<test_input><![CDATA[200 40
1992 95
32 7
3444 36
2345 17
15 11
89 13
0 0
]]></test_input>
<test_output><![CDATA[00 40 80
15
06 13 20 27 34 41 48 55 62 69 76 83 90 97
12 48 84
15 32 49 66 83
07 18 29 40 51 62 73 84 95
05 18 31 44 57 70 83 96
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[文科生的悲哀]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">化学不及格的Matrix67无奈选择了文科。他必须硬着头皮准备一次又一次的文科考试。  <br />
在这一学期一共有n次文科考试，考试科目有4种，分别为政治、历史、地理和综合。每次考哪一科是不定的，因此在考试前Matrix67不知道应该 去复习哪一科的功课。他希望能预测出下一次可能考的科目。于是，他收集到了以往的文科考试的资料。从以往的考试中，他发现了这样几个规律：  <br />
1.如果这次考的是政治，那么下一次一定会考历史；  <br />
2.如果这次考的是综合，那么下一次一定会考地理；  <br />
3.如果这次考的是历史，那么下一次要么考政治，要么考地理；  <br />
4.如果这次考的是地理，那么下一次要么考历史，要么考综合。  <br />
Matrix67已经知道，本学期的第一次考试科目为政治。他打算拟定一个可以应对所有可能情况的应考复习计划。因此，他想知道，整个学期有多少种可能的考试科目安排满足以上规律。你能帮他算出来吗？</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一个正整数n，代表本学期总的考试次数。（输入数据保证n&lt;=10000） </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">一个正整数，表示符合规律的科目安排方案的总数。  <br />
考虑到这个结果可能会很大，因此你只需要输出它mod 7654321的值即可。</font></p>]]></output>
<sample_input><![CDATA[5]]></sample_input>
<sample_output><![CDATA[5]]></sample_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[13]]></test_input>
<test_output><![CDATA[233]]></test_output>
<test_input><![CDATA[4]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[2928]]></test_input>
<test_output><![CDATA[2033885]]></test_output>
<test_input><![CDATA[7]]></test_input>
<test_output><![CDATA[13]]></test_output>
<test_input><![CDATA[10000]]></test_input>
<test_output><![CDATA[3605704]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[253]]></test_input>
<test_output><![CDATA[4746999]]></test_output>
<test_input><![CDATA[2]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[57]]></test_input>
<test_output><![CDATA[2702980]]></test_output>
<test_input><![CDATA[9999]]></test_input>
<test_output><![CDATA[4491102]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[方砖问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">用边长小于N的正方形方砖（注意，不要求所有的方砖大小相同，请看样例说明）不重叠地铺满N*N的正方形房间，最少要几块方砖。</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">第一行是一个整数T,表示测试数据的组数,接下来的T 行，每一行是一个N(2&lt;=N&lt;=100)</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">对于每一组测试数据输出一行，为最少需要的块数。</span></p>]]></output>
<sample_input><![CDATA[2 
4 
5]]></sample_input>
<sample_output><![CDATA[4 
8]]></sample_output>
<hint><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">当N＝4时<span class="Apple-converted-space">&nbsp;</span><br />
最优的铺砖方法<span class="Apple-converted-space">&nbsp;</span><br />
AABB<span class="Apple-converted-space">&nbsp;</span><br />
AABB<span class="Apple-converted-space">&nbsp;</span><br />
CCDD<span class="Apple-converted-space">&nbsp;</span><br />
CCDD<span class="Apple-converted-space">&nbsp;</span><br />
A，B，C，D为四块方砖的代号。<span class="Apple-converted-space">&nbsp;</span><br />
其他的铺砖方法，例如：<span class="Apple-converted-space">&nbsp;</span><br />
AAAB<span class="Apple-converted-space">&nbsp;</span><br />
AAAC<span class="Apple-converted-space">&nbsp;</span><br />
AAAD<span class="Apple-converted-space">&nbsp;</span><br />
EFGH<span class="Apple-converted-space">&nbsp;</span><br />
需要的8块方砖，不是最少的。<span class="Apple-converted-space"> </span><br />
</span></p>]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[日期排序]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有一些日期，日期格式为&ldquo;MM/DD/YYYY&rdquo;。编程将其按日期大小排列。</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[15/12/1999
10/21/2003
10/22/2003
02/12/2004
11/30/2005
12/31/2005
]]></sample_input>
<sample_output><![CDATA[15/12/1999
10/21/2003
10/22/2003
02/12/2004
11/30/2005
12/31/2005
]]></sample_output>
<test_input><![CDATA[15/12/1999
10/21/2003
10/22/2003
02/12/2004
11/30/2005
12/31/2005
]]></test_input>
<test_output><![CDATA[15/12/1999
10/21/2003
10/22/2003
02/12/2004
11/30/2005
12/31/2005
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[明明的随机数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">有2行，第1行为1个正整数，表示所生成的随机数的个数： <br />
N <br />
第2行有N个用空格隔开的正整数，为所产生的随机数。 <br />
</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>]]></output>
<sample_input><![CDATA[10
20 40 32 67 40 20 89 300 400 15

]]></sample_input>
<sample_output><![CDATA[8
15 20 32 40 67 89 300 400

]]></sample_output>
<test_input><![CDATA[50
607  420 321 67 40 20 89 301 407 135 15 4 447 241 89 301 407 515 410 321 120 40 321 667  400 321 67 40 209 89 301 407 15 499 440 240 89 301 407 515 40 321 637 410 20 8 301 407 15 49

]]></test_input>
<test_output><![CDATA[26
4 8 15 20 40 49 67 89 120 135 209 240 241 301 321 400 407 410 420 440 447 499 515 607 637 667 
]]></test_output>
<test_input><![CDATA[30
120 40 321 677  40 321 67 40 20 89 301 407 15 499 440 240 89 301 407 515 40 321 67 40 20 89 301 407 15 499

]]></test_input>
<test_output><![CDATA[14
15 20 40 67 89 120 240 301 321 407 440 499 515 677 
]]></test_output>
<test_input><![CDATA[80
407 84 341 408 525 41 322 220 40 321 302 45 215 315 437 447 231 189 304 404 8 301 407 515 40 321 120 40 321 617 637 679 779 767 40 20 89 301 707 815 15 497 447 241 89 301 407 515 40 321 120 40 321 677 40 321 67 40 20 89 301 407 15 499 440 240 89 301 407 515 40 321 67 410 20 89 301 407 15 498

]]></test_input>
<test_output><![CDATA[43
8 15 20 40 41 45 67 84 89 120 189 215 220 231 240 241 301 302 304 315 321 322 341 404 407 408 410 437 440 447 497 498 499 515 525 617 637 677 679 707 767 779 815 
]]></test_output>
<test_input><![CDATA[40
5 491 440 240 89 301 407 515 403 321 120 40 321 677  402 321 67 40 20 89 301 407 15 492 440 240 89 301 407 515 40 321 67 410 20 9 301 407 15 499

]]></test_input>
<test_output><![CDATA[21
5 9 15 20 40 67 89 120 240 301 321 402 403 407 410 440 491 492 499 515 677 
]]></test_output>
<test_input><![CDATA[8
20 40 321 67 40 40 89 15

]]></test_input>
<test_output><![CDATA[6
15 20 40 67 89 321 
]]></test_output>
<test_input><![CDATA[20
20 40 321 677 40 20 89 301 407 515 40 321 67 40 20 89 301 407 15 499]]></test_input>
<test_output><![CDATA[11
15 20 40 67 89 301 321 407 499 515 677 ]]></test_output>
<test_input><![CDATA[70
302 457 215 315 437 447 231 189 301 407 89 306 407 515 40 321 120 40 321 617 627 637 679 67 430 230 8 303 408 125 15 497 447 241 89 301 402 515 40 321 120 40 321 677 40 327 67 40 20 89 301 407 15 499 440 240 89 301 407 515 40 321 67 410 20 89 301 407 15 498

]]></test_input>
<test_output><![CDATA[39
8 15 20 40 67 89 120 125 189 215 230 231 240 241 301 302 303 306 315 321 327 402 407 408 410 430 437 440 447 457 497 498 499 515 617 627 637 677 679 
]]></test_output>
<test_input><![CDATA[60
89 301 407 515 40 321 120 40 821 675 673 671 670 67 40 20 891 301 407 15 151 97 4 241 893 301 407 515 840 311 150 420 321 677 40 321 67 40 20 81 303 407 15 499 440 240 89 301 407 515 40 321 67 410 20 89 301 407 15 499

]]></test_input>
<test_output><![CDATA[32
4 15 20 40 67 81 89 97 120 150 151 240 241 301 303 311 321 407 410 420 440 499 515 670 671 673 675 677 821 840 891 893 
]]></test_output>
<test_input><![CDATA[90
7 2 315 437 447 231 189 301 407 8 407 84 341 408 525 41 322 220 40 321 302 457 215 315 437 447 231 189 301 407 89 301 407 515 40 321 120 40 321 679 678 676 659 67 409 201 899 801 407 185 5 497 447 241 89 301 407 515 40 321 120 490 321 677 40 321 67 40 20 891 301 407 15 499 440 240 89 301 407 515 40 321 67 410 20 89 301 407 15 498

]]></test_input>
<test_output><![CDATA[48
2 5 7 8 15 20 40 41 67 84 89 120 185 189 201 215 220 231 240 241 301 302 315 321 322 341 407 408 409 410 437 440 447 457 490 497 498 499 515 525 659 676 677 678 679 801 891 899 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[最多约数问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">正整数x 的约数是能整除x 的正整数。正整数x  的约数个数记为div(x)。例如，1，2， <br />
5，10 都是正整数10 的约数，且div(10)=4。设a 和b 是2 个正整数，a&le;b，找出a 和b  <br />
之间约数个数最多的数x <br />
</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入2 个正整数a&le;b，编程计算a 和b  之间约数个数最多的数。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">程序运行结束时，找到a 和b  之间约数个数最多的数是x，将div(x)输出</font></p>]]></output>
<sample_input><![CDATA[1 36
]]></sample_input>
<sample_output><![CDATA[9
]]></sample_output>
<test_input><![CDATA[1000000 2000000]]></test_input>
<test_input><![CDATA[1000 2000]]></test_input>
<test_input><![CDATA[131074 131074]]></test_input>
<test_output><![CDATA[40]]></test_output>
<test_input><![CDATA[1 7]]></test_input>
<test_output><![CDATA[4]]></test_output>
<test_input><![CDATA[100 1000000000]]></test_input>
<test_output><![CDATA[4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[最小公倍数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">两个正整数，计算这两个数的最小公倍数</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据只有一行，包括两个不大于1000的正整数.</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出数据也只有一行，给出这两个数的最小公倍数。</font></p>]]></output>
<sample_input><![CDATA[10 14]]></sample_input>
<sample_output><![CDATA[70]]></sample_output>
<test_input><![CDATA[35 49]]></test_input>
<test_output><![CDATA[245]]></test_output>
<test_input><![CDATA[987 972]]></test_input>
<test_output><![CDATA[319788]]></test_output>
<test_input><![CDATA[345 267]]></test_input>
<test_output><![CDATA[30705]]></test_output>
<test_input><![CDATA[768 384]]></test_input>
<test_output><![CDATA[768]]></test_output>
<test_input><![CDATA[10 14]]></test_input>
<test_output><![CDATA[70]]></test_output>
<test_input><![CDATA[102 768]]></test_input>
<test_output><![CDATA[13056]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[最小重量机器设计问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设Wij 是<span class="Apple-converted-space">&nbsp;</span><br />
从供应商j处购得的部件i的重量，Cij 是相应的价格。<span class="Apple-converted-space">&nbsp;</span><br />
试设计一个算法，给出总价格不超过c的最小重量机器设计。<span class="Apple-converted-space">&nbsp;</span><br />
&prime;编程任务：<span class="Apple-converted-space">&nbsp;</span><br />
对于给定的机器部件重量和机器部件价格，编程计算总价格不超过d的最小重量机器设<span class="Apple-converted-space">&nbsp;</span><br />
计。<span class="Apple-converted-space"> </span><br />
</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">第一行有 3 个正整数 n ，m和 d。接下来的 2n 行，每<span class="Apple-converted-space">&nbsp;</span><br />
行m个数。前n行是c，后n行是w。</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">将计算出的最小重量，以及每个部件的供应商输出</span></p>]]></output>
<sample_input><![CDATA[3 3 4 
1 2 3 
3 2 1 
2 2 2 
1 2 3 
3 2 1 
2 2 2]]></sample_input>
<sample_output><![CDATA[4 
1 3 1 ]]></sample_output>
<test_input><![CDATA[10
11
29
10
23
49
38
83
96
100
77
]]></test_input>
<test_output><![CDATA[12
16
4
16
10
4
20
4
4
10
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[杨辉三角]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形： <br />
1 <br />
1 1 <br />
1 2 1 <br />
1 3 3 1 <br />
1 4 6 4 1 <br />
1 5 10 10 5 1 <br />
</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。</font></p>]]></input> 
<output><![CDATA[<p>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p>]]></output>
<sample_input><![CDATA[2 3
]]></sample_input>
<sample_output><![CDATA[1
1 1

1
1 1
1 2 1

]]></sample_output>
<test_input><![CDATA[4 6 7 10 15 17]]></test_input>
<test_output><![CDATA[1 
1 1 
1 2 1 
1 3 3 1 

1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 

1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 

1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
1 9 36 84 126 126 84 36 9 1 

1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
1 9 36 84 126 126 84 36 9 1 
1 10 45 120 210 252 210 120 45 10 1 
1 11 55 165 330 462 462 330 165 55 11 1 
1 12 66 220 495 792 924 792 495 220 66 12 1 
1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1 
1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1 

1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
1 9 36 84 126 126 84 36 9 1 
1 10 45 120 210 252 210 120 45 10 1 
1 11 55 165 330 462 462 330 165 55 11 1 
1 12 66 220 495 792 924 792 495 220 66 12 1 
1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1 
1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1 
1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1 
1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1 

]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[查找最大元素]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">对于输入的每个字符串，查找其中的最大字母，在该字母后面插入字符串&ldquo;(max)&rdquo;。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据包括多个测试实例，每个实例由一行长度不超过100的字符串组成，字符串仅由大小写字母及数字构成</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例输出一行字符串，输出的结果是插入字符串&ldquo;(max)&rdquo;后的结果，如果存在多个最大的字母，就在每一个最大字母后面都插入&quot;(max)&quot;。</font></p>]]></output>
<sample_input><![CDATA[abcdefgfedcba
xxxxx
]]></sample_input>
<sample_output><![CDATA[abcdefg(max)fedcba
x(max)x(max)x(max)x(max)x(max)

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[核电站问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">一个核电站有N个放核物质的坑，坑排列在一条直线上。如果连续３个坑中放入核物质，则会发生爆炸，于是，在某些坑中可能不放核物质。现在，请你计算：对于给定的N，求不发生爆炸的放置核物质的方案总数。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入文件只有多行，每行对应一个正整数N＜＝４０；</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出文件有多行，每行只有一个正整数，表示方案总数</font></p>]]></output>
<sample_input><![CDATA[1
2
3
4
10]]></sample_input>
<sample_output><![CDATA[2
4
7
13
504]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[检查一个数是否为质数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">输入一个正整数，检查该数是否为质数</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入一个正整数</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出Y或者N</font></p>]]></output>
<sample_input><![CDATA[34]]></sample_input>
<sample_output><![CDATA[N]]></sample_output>
<test_input><![CDATA[1117]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[检查金币]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">ACM公司生产金币的设备出了问题，使得最近生产的10批金币的重量出现了波动：本来金币的标准重量是10克，但现在有的可能是11克，有的可能9克，也有可能是10克。<span class="Apple-converted-space">&nbsp;</span><br />
现在只知道同一批金币的重量是相同的，你的任务是要把每批的单枚金币的重量找出来。<span class="Apple-converted-space">&nbsp;</span><br />
你的设备有一个电子秤，但只允许称量一次！<span class="Apple-converted-space">&nbsp;</span><br />
你从第1批中取1枚金币，第2批取3枚，...第i批取3^(i&minus;1)枚...，第10批取3^9枚，总共29524枚。将这29524枚金币放在电子秤上，得到了总重量，就交给你的程序去！<span class="Apple-converted-space"> </span><br />
</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">有多个测试序列，每个测试序列一行，包含一个6位的正整数W(265716&le;W&le;324764)，表示29524枚金币的总重量</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">每个测试序列输出一行，包含10个用空格分开的正整数，分别表示10批金币的单枚重量，注意行尾没有空格。</span></p>]]></output>
<sample_input><![CDATA[265716
324764
295240]]></sample_input>
<sample_output><![CDATA[9 9 9 9 9 9 9 9 9 9
11 11 11 11 11 11 11 11 11 11
10 10 10 10 10 10 10 10 10 10]]></sample_output>
<test_input><![CDATA[265716
324764
295240
324764
265716
299999
300000
320001
267716
]]></test_input>
<test_output><![CDATA[9 9 9 9 9 9 9 9 9 9
11 11 11 11 11 11 11 11 11 11
10 10 10 10 10 10 10 10 10 10
11 11 11 11 11 11 11 11 11 11
9 9 9 9 9 9 9 9 9 9
11 9 11 9 9 9 11 9 11 10
9 10 11 9 9 9 11 9 11 10
9 11 10 9 10 10 11 9 11 11
11 9 9 11 9 11 11 9 9 9
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[母牛生小牛]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman" size="3">设有一头小母牛，从出生第四年起每年生一头小母牛，按此规律，第N年时有几头母牛？</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman" size="3">输入一个整数N。(1&le;N&le;50)</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman" size="3">第N年时母牛的数量</font></p>]]></output>
<sample_input><![CDATA[5
]]></sample_input>
<sample_output><![CDATA[3
]]></sample_output>
<test_input><![CDATA[4]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[20]]></test_input>
<test_output><![CDATA[872]]></test_output>
<test_input><![CDATA[1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[求组合数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">组合数的计算虽说简单但也不乏有些陷阱，这主要是因为语言中的数据类型在表示范围上是有限的。更何况还有中间结果溢出的现象，所以千万要小心。</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">求组合数的数据都是成对（M与N）出现的，每对整数M和N满足0＜m, n&le;20，以EOF结束。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出该组合数。每个组合数换行。</font></p>]]></output>
<sample_input><![CDATA[5 2
18 13
]]></sample_input>
<sample_output><![CDATA[10
8568
]]></sample_output>
<test_input><![CDATA[5 2
18 13
]]></test_input>
<test_output><![CDATA[10
8568
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[演讲大赛评分]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">最近&quot;老王&quot;很开心.他在大一的时候参加过数计学院的&ldquo;软件小组&rdquo;。告诉你个秘密，这个小组是个好地方，不但活动精彩而且有MM。<span class="Apple-converted-space">&nbsp;</span><br />
这不，这个小组举办了一个叫做&ldquo;计算机演讲大赛&rdquo;的节目。这个节目有好多人参加，这不，成绩出来了，&quot;老王&quot;当是很勇敢，自告奋勇接下了算出大家的总得分的任务。<span class="Apple-converted-space">&nbsp;</span><br />
当时有7个评委，每个评委都要给选手打分，现在要求去掉一个最高分和去掉一个最低分，再算出平均分。结果精确到小数点后两位。<span class="Apple-converted-space"> <br />
</span></span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">测试数据包括多个实例。<span class="Apple-converted-space">&nbsp;</span><br />
每组数据包括7个实数，代表评委们对该选手的评分。紧接着是选手的名字，名字的长度不超过30个字符。<span class="Apple-converted-space">&nbsp;</span><br />
输入直到文件结束。<span class="Apple-converted-space"> <br />
</span></span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">算出每位选手名字和最终得分，结果保留两位有效数字</span></p>]]></output>
<sample_input><![CDATA[10 10 10 10 10 10 9 xiaoyuanwang
0 0 0 0 0 0 0 beast]]></sample_input>
<sample_output><![CDATA[xiaoyuanwang 10.00
beast 0.00]]></sample_output>
<test_input><![CDATA[10 10 10 10 10 10 10 beast
0 0 0 0 0 0 0 bird
1.2 2.3 3.4 4.5 5.6 6.7 7.8 pig
10 9 8 7 6 5 4 cat
7.8 6.7 5.6 1.5 2.3 4.9 8.0 table
12.32 23.45 89.56 65.23 32.14 25.123 25.1234 desk
]]></test_input>
<test_output><![CDATA[beast 10.00
bird 0.00
pig 4.50
cat 7.00
table 5.46
desk 34.21
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[班级人数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">某班学生参加程序设计大赛，最后结果及格有超过P%但不足Q%的人。现在给你P和Q，你要算出该班最少有多少人。（数据弱了一点，所以好通过）。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">两个实数P，Q。用空格隔开。每个数最多有两位小数。0.00＜＝p＜q＜＝99.99 </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">神风堂最少的人数。</font></p>]]></output>
<sample_input><![CDATA[13    14.1
67.73 67.92]]></sample_input>
<sample_output><![CDATA[15
28]]></sample_output>
<test_input><![CDATA[13 14.1
12.2 12.3
15 18
22.2 23.5
33.45 33.56
67.73 67.92]]></test_input>
<test_output><![CDATA[15
49
6
9
149
28
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[生日日数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">CCC老师的生日是YY年MM月DD日，他想知道自己出生后第一万天纪念日的日期（出生日算第0天）。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入有多行，格式为YY MM DD 其中1949&lt;=YY&lt;=2006，日期绝对合法。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出有多行。即CCC老师生日第一万天以后的日期，格式为 &ldquo;Y-M-D&rdquo;。</font></p>]]></output>
<sample_input><![CDATA[1979 4 16]]></sample_input>
<sample_output><![CDATA[2006-9-1]]></sample_output>
<test_input><![CDATA[2006 12 31
1984 2 28
1979 4 16]]></test_input>
<test_output><![CDATA[2034-5-18
2011-7-16
2006-9-1]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[盐水的故事]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">挂盐水的时候，如果滴起来有规律，先是滴一滴，停一下；然后滴二滴，停一 下；再滴三滴，停一下...，现在有一个问题：这瓶盐水一共有VUL毫升，每一滴是D毫升，每一滴的速度是一秒（假设最后一滴不到D毫升，则花费的时间也 算一秒），停一下的时间也是一秒这瓶水什么时候能挂完呢？</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据占一行,由VUL和D组成,其中0&lt; D&lt; VUL&lt; 5000。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">请输出挂完盐水需要的时间。</font></p>]]></output>
<sample_input><![CDATA[10 1]]></sample_input>
<sample_output><![CDATA[13]]></sample_output>
<test_input><![CDATA[320 1]]></test_input>
<test_output><![CDATA[344]]></test_output>
<test_input><![CDATA[321 320]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[4983 4]]></test_input>
<test_output><![CDATA[1295]]></test_output>
<test_input><![CDATA[2143 22]]></test_input>
<test_output><![CDATA[111]]></test_output>
<test_input><![CDATA[10 1]]></test_input>
<test_output><![CDATA[13]]></test_output>
<test_input><![CDATA[768 102]]></test_input>
<test_output><![CDATA[11]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[矩阵转置]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输入N*N的矩阵，输出它的转置矩阵。</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">第一行为整数N。<span class="Apple-converted-space">&nbsp;</span><br />
接着是一个N*N的矩阵。</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">转置矩阵</span></p>]]></output>
<sample_input><![CDATA[2
1 2
1 2]]></sample_input>
<sample_output><![CDATA[1 1
2 2]]></sample_output>
<test_input><![CDATA[5
1 1 1 1 1
2 2 2 2 2
3 3 3 3 3
4 4 4 4 4
5 5 5 5 5
]]></test_input>
<test_output><![CDATA[1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
]]></test_output>
<test_input><![CDATA[10
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
1 2 3 4 5 6 7 8 9 0
]]></test_input>
<test_output><![CDATA[1 1 1 1 1 1 1 1 1 1
2 2 2 2 2 2 2 2 2 2
3 3 3 3 3 3 3 3 3 3
4 4 4 4 4 4 4 4 4 4
5 5 5 5 5 5 5 5 5 5
6 6 6 6 6 6 6 6 6 6
7 7 7 7 7 7 7 7 7 7
8 8 8 8 8 8 8 8 8 8
9 9 9 9 9 9 9 9 9 9
0 0 0 0 0 0 0 0 0 0
]]></test_output>
<test_input><![CDATA[5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
]]></test_input>
<test_output><![CDATA[1 1 1 1 1
2 2 2 2 2
3 3 3 3 3
4 4 4 4 4
5 5 5 5 5
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[破解平方数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">给出m个数b1, b2,..., bm,每个数的素数因子都在前t个素数之内，任务是寻找这m个数的非空子集的个数x，使得每个子集的乘积都是一个完全平方数。例如t=3,则前3个素数为2, 3, 5。m=4，这4个数为9, 20, 500, 3， 每个数的素因子都是在前3个素数内，则有x=3个非空子集合{9}， {20， 500}， {9， 20， 500}，满足每个集合内的数的乘积是一个完全平方数，输出这样的集合的个数。</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;" class="Apple-style-span">每组测试数据的第一行为两个正整数t, m(1 &le; t &le; 100, 1 &le; m &le; 100) 第二行为m个数， 1 &lt;= bi &lt;= 109 处理至文件结束</span><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">每行输出一个整数x，对应每组测试数据</span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: Simsun; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">
<pre><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">每行输出一个整数x，对应每组测试数据</span></pre>
</span></p>]]></output>
<sample_input><![CDATA[3 4 
9 20 500 3]]></sample_input>
<sample_output><![CDATA[3]]></sample_output>
<test_input><![CDATA[3 3 4
1 2 3
3 2 1
2 2 2
1 2 3
3 2 1
2 2 2]]></test_input>
<test_output><![CDATA[4
1 3 1 
]]></test_output>
<test_input><![CDATA[2 12 21
2 8 20 9 14 11 2 13 8 14 9 18 
6 13 12 8 3 8 1 5 7 17 10 17 
6 3 19 15 7 18 7 5 12 19 18 8 
15 20 18 4 15 10 14 7 9 3 12 5 
]]></test_input>
<test_output><![CDATA[7
2 4 
]]></test_output>
<test_input><![CDATA[8 18 14
18 15 20 5 15 10 16 6 1 6 17 6 1 2 17 15 13 17 
16 6 7 4 7 2 11 6 18 4 13 12 8 5 2 8 15 14 
12 6 19 10 13 8 2 10 16 4 15 15 16 13 17 12 14 4 
18 18 2 13 15 19 5 12 18 7 13 9 8 17 10 13 15 11 
8 5 14 11 18 20 17 3 11 17 13 11 4 9 17 14 19 1 
10 7 8 11 13 3 19 3 12 11 12 14 4 2 12 10 14 15 
12 9 13 9 16 17 12 15 6 3 11 17 13 17 14 13 4 4 
19 12 3 19 3 20 19 12 8 19 8 10 19 20 3 1 7 1 
16 12 4 16 2 6 15 1 13 3 7 16 5 3 16 16 14 19 
12 14 6 2 11 15 9 17 15 16 19 20 14 14 20 9 4 4 
6 13 16 6 3 12 12 19 11 20 4 13 9 18 7 17 8 1 
4 17 3 20 3 8 12 7 4 12 6 12 1 18 13 20 20 8 
4 15 1 10 2 12 8 11 5 4 20 13 12 20 1 3 3 11 
1 9 2 1 16 1 12 4 5 2 7 15 12 3 9 4 13 6 
13 1 10 8 5 13 20 10 6 4 8 15 8 8 20 11 9 9 
2 10 11 1 18 8 20 11 18 2 3 6 14 16 19 4 3 15 
]]></test_input>
<test_output><![CDATA[57
13 6 7 3 18 14 10 16 
]]></test_output>
<test_input><![CDATA[7 11 25
3 7 14 3 5 13 20 20 20 7 13 
12 15 19 16 8 3 18 16 16 19 8 
3 2 14 16 18 13 7 18 17 8 8 
6 19 12 10 6 2 6 9 19 13 16 
5 3 5 16 7 8 11 3 20 9 12 
17 15 8 20 7 7 1 14 7 16 4 
18 16 17 20 13 19 3 19 6 1 5 
15 8 18 9 5 8 4 9 8 14 8 
18 19 11 1 6 19 6 14 16 12 4 
10 18 20 12 3 20 11 14 4 16 1 
16 4 9 2 17 18 19 10 5 2 1 
5 5 8 1 13 1 20 13 5 18 14 
9 8 3 15 13 11 15 14 18 13 19 
14 18 3 7 1 12 16 18 11 3 2 
]]></test_input>
<test_output><![CDATA[60
5 11 1 6 1 7 10 
]]></test_output>
<test_input><![CDATA[12 9 55
13 18 4 2 7 6 9 12 1 
1 10 17 16 2 8 4 12 14 
10 17 9 19 20 1 1 8 9 
15 12 11 14 15 18 14 7 16 
1 19 15 1 20 6 3 4 18 
16 15 19 15 4 18 11 9 20 
9 7 16 10 19 9 8 10 1 
20 12 12 19 13 15 18 10 16 
20 11 20 16 4 6 9 17 19 
2 10 20 6 7 4 7 7 12 
4 16 19 3 3 13 15 11 19 
20 3 15 20 20 16 1 18 18 
4 3 4 6 4 17 19 5 17 
12 10 12 16 3 10 2 15 10 
14 14 10 3 15 1 12 19 16 
1 12 7 6 12 13 15 15 1 
13 8 5 19 9 4 16 10 9 
14 11 2 20 7 3 1 8 8 
17 14 19 20 2 11 15 13 15 
17 7 12 18 12 17 9 10 2 
19 5 12 7 20 8 5 19 20 
19 15 19 6 17 12 17 12 3 
7 11 15 1 3 18 6 1 16 
10 3 19 13 4 1 12 12 2 
]]></test_input>
<test_output><![CDATA[71
4 5 6 3 6 5 9 8 6 4 4 2 
]]></test_output>
<test_input><![CDATA[2 16 9
2 18 6 16 16 5 18 10 10 16 8 11 6 13 20 1 
8 14 10 4 20 2 7 8 18 11 11 17 15 7 19 7 
15 9 9 18 2 20 16 8 9 16 19 20 2 18 11 5 
8 20 10 3 18 17 5 10 3 11 15 9 14 2 9 5 
]]></test_input>
<test_output><![CDATA[7
16 14 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[破解简单密码]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">密码是我们生活中非常重要的东东，我们的那么一点不能说的秘密就全靠它了。哇哈哈.<span class="Apple-converted-space">&nbsp;</span><br />
接下来渊子要在密码之上再加一套密码，虽然简单但也安全。<span class="Apple-converted-space">&nbsp;</span><br />
假设老王原来一个BBS上的密码为zvbo941987,为了方便记忆，他通过一种算法把这个密码变换成YUANzi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。<span class="Apple-converted-space">&nbsp;</span><br />
他是这么变换的，大家都知道手机上的字母： 1--1， abc--2, def--3, ghi--4, jkl--5, mno--6, pqrs--7, tuv--8 wxyz--9, 0--0,就这么简单，老王把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换，声明：密码中没有空格，而密码中出现的大写字母则边成小写之后往后移一位，如：X，先边成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。</span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输入包括多个测试数据。输入是一个明文，密码长度不超过100个字符，输入直到文件结尾。<span class="Apple-converted-space"> <br />
</span></span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输出渊子真正的密文。</span></p>]]></output>
<sample_input><![CDATA[YUANzi1987]]></sample_input>
<sample_output><![CDATA[zvbo941987]]></sample_output>
<test_input><![CDATA[YUANzi1987
ABCDEFGHIJKLMNOPQRSTUVWXYZ
0512700231
abcdefghijklmnopqrstuvwxyz
sgshdjkhgk45341231321#$%()()()())RRGHJIOIOGRRRUOPOfffff
5645242318789#$$%*@@%$*%gsjtyidslegwrgewgVJGEGGLYERGGLITEGFKYRSEGK
fffffffffffff]]></test_input>
<test_output><![CDATA[zvbo941987
bcdefghijklmnopqrstuvwxyza
0512700231
22233344455566677778889999
747435544545341231321#$%()()()())sshikjpjphsssvpqp33333
5645242318789#$$%*@@%$*%47589437534974394wkhfhhmzfshhmjufhglzstfhl
3333333333333]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[神奇的fans]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">传说fans是一个数学天才。在他五岁那年，从一堆数字卡片中选出了4张 卡片：5，7，6，8。这4个数字有什么神秘之处呢？如果把这4张卡片自左往右的排成：5，6，7，8。你就会发现：原来这4个数字构成了等差数列！当年 fans选出了n组卡片，据说都能够构成等差数列。但是事实真的是这样吗？fans真的有这么神奇吗？  n组数据就是fans选出的n组卡片，请你判断每一组卡片是否能构成等差数列.</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一个数为数据的组数n，表示后面有n行，每行中的第一个数为该组数据的元素个数m（1&le;m&le;100），其后是m个正整数（不会超出int的表示范围）。 </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">如果能够构成等差数列，输出&ldquo;yes&rdquo;，否则输出&ldquo;no&rdquo;。</font></p>]]></output>
<sample_input><![CDATA[2
4 5 7 6 8
8 1 7 3 2 8 12 78 3]]></sample_input>
<sample_output><![CDATA[yes
no
]]></sample_output>
<test_input><![CDATA[13
4 5 7 6 8
8 1 7 3 2 8 12 78 3
1 8
100 1601 513 377 343 547 1091 1074 581 598 360 445 479 1635 972 564 785 700 530 1125 1329 870 496 768 1244 836 190 37 649 292 1210 105 1159 1482 275 1006 1652 1380 887 1227 1295 156 1686 904 309 20 224 751 666 1278 717 1023 207 615 241 683 122 54 1397 802 1057 955 853 1567 1550 1040 411 258 139 1448 632 1669 819 1193 989 394 1465 1533 1142 1414 921 1618 1584 88 1261 1346 3 734 326 1431 1176 1312 173 462 938 1363 1516 428 1499 1108 71 
10 17175 8261 27197 28608 23842 25258 21175 915 9508 15989 
100 26916 29472 11587 21505 2054 15407 5180 16105 13590 995 1970 24338 22072 18401 16582 13036 12975 10932 12007 9972 5261 24433 17643 32382 7790 30870 7263 14769 10598 7736 25372 7379 16184 28510 18203 15559 1225 4776 21643 13523 10452 14900 31264 27047 10974 7873 10157 32155 3693 13845 15093 23097 20085 10397 11967 29435 9491 19028 16424 9557 31613 6885 32317 23030 5690 4372 30665 19276 20878 13658 31596 5446 569 20431 7661 29277 20065 11598 31441 18901 4812 16339 25389 29504 10322 7719 28344 21317 7570 9920 8996 13727 14565 18914 9647 2152 22160 16139 10997 23704 
88 30526 10638 6408 20425 4781 28798 4034 17213 679 19917 19290 1057 6708 22709 5430 18707 15630 3927 14080 10467 2901 9123 9212 28310 30084 3959 19609 28337 19620 13323 20550 16820 8895 2188 390 2020 3992 7175 28743 6733 11673 28297 28272 19720 25357 25989 17081 9914 19343 24437 32191 12637 21954 10948 9560 18499 26947 25580 10787 1879 10460 32476 23396 16295 9467 32668 19727 5407 4706 9779 25635 10647 22815 4553 32057 30993 4031 7945 24925 19259 14015 1481 32028 24124 18499 31213 3550 11948 

63 28682 21384 14711 228 32674 581 17400 3961 29400 20486 22475 771 6259 14026 5119 5923 13090 19924 21728 4292 9906 4618 27339 27040 1412 3483 13120 21766 4671 8932 18489 475 2498 32405 14778 15840 18781 29967 1450 24114 9536 20241 16865 4375 819 18836 11394 31991 3464 19699 5771 20649 4686 8015 23722 10481 25288 5682 25171 28486 18206 2930 17167 
79 5592 23121 6489 11799 21713 25204 25090 8225 19675 31002 26118 28538 13027 6155 11865 24149 26909 24123 19822 10083 10569 8444 31650 14499 9268 7538 21207 4220 14977 24135 27999 28937 12969 10657 27677 23988 4161 2897 10214 5894 28796 20302 4653 2237 4080 97 2272 24095 23965 16161 8589 12431 16171 1314 12233 1118 27251 10346 2770 2019 30785 13092 22131 18638 5208 25497 21288 21433 28343 26715 31107 29184 21019 11459 25806 31187 965 18846 20722 
100 902 1684 307 1633 375 1089 239 1259 1072 1667 290 1412 1650 613 715 358 1140 341 1480 137 1242 1548 970 103 1361 885 1446 1 1565 528 256 460 1616 18 545 1514 698 1106 426 171 1004 154 273 1157 1582 1378 1191 1225 800 35 1395 443 69 681 409 494 1599 1123 1429 987 647 817 919 392 1021 1293 1497 953 52 1344 222 596 188 834 477 120 1055 1327 1174 562 205 511 664 1276 1463 1531 630 936 1310 579 851 324 783 766 868 749 1208 86 732 1038 
100 25737 20605 28196 12184 7991 27351 21802 6285 18818 32437 6808 6507 22193 7693 1308 10358 17671 27373 6176 16068 24399 8892 506 23969 15544 28354 14947 817 29411 7659 25899 21079 11835 11207 19755 29142 9349 14550 2938 26294 5559 22531 12004 28138 20238 21870 30615 6447 25691 23150 31520 13111 5022 4823 17558 12039 1749 14200 17685 9886 26646 8680 10350 11479 31708 19843 25117 30352 13727 27055 1660 7948 31399 24932 17462 2966 1825 31723 4605 12903 10611 31461 25728 18634 18381 22928 151 7294 25600 4422 15809 7260 4500 1862 19665 21561 4628 1975 22244 24590 
99 1464132573 1464132658 1464133202 1464133627 1464132896 1464133984 1464132777 1464133644 1464132760 1464133593 1464132590 1464133882 1464133253 1464132454 1464133406 1464133440 1464132981 1464133712 1464132607 1464132369 1464133814 1464133899 1464132505 1464133525 1464133287 1464133236 1464133049 1464132828 1464133066 1464133865 1464133831 1464133950 1464132709 1464132692 1464132318 1464133083 1464133168 1464132726 1464133100 1464132930 1464132964 1464133185 1464133134 1464133576 1464132862 1464133304 1464132471 1464133848 1464132794 1464133015 1464133474 1464132335 1464133491 1464132641 1464133355 1464133457 1464133695 1464133117 1464133151 1464132913 1464133032 1464132998 1464133389 1464132386 1464133270 1464133219 1464132947 1464132352 1464133661 1464132675 1464133423 1464132437 1464133780 1464133763 1464133746 1464132522 1464133916 1464133321 1464132743 1464132811 1464133967 1464132624 1464133559 1464132556 1464133797 1464133678 1464132420 1464133610 1464133338 1464133729 1464132539 1464133508 1464132403 1464132879 1464133933 1464132845 1464133542 1464132488 1464133372 ]]></test_input>
<test_output><![CDATA[yes
no
yes
yes
no
no
no
yes
no
no
yes
no
yes]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[第几天]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">给定一个日期，输出这个日期是该年的第几天。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，数据格式为YYYY/MM/DD组成，具体参见sample input ,另外，可以向你确保所有的输入数据是合法的。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出一行，表示该日期是该年的第几天。</font></p>]]></output>
<sample_input><![CDATA[1985/1/20
2006/3/12

]]></sample_input>
<sample_output><![CDATA[20
71

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[筛排处理]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&lt;=100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">每组输入数据的第一行含有一个正整数N，表示后面行中有N个随机整数。若N=0，表示处理结束。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对应每组输入数据，输出一组数据，该数据由单独一行开头，内含一个N，表示后面有N个排好序的整数，整数之间空一格。每组输出数据之间空一行。</font></p>]]></output>
<sample_input><![CDATA[12
2 4 6 17 20 40 43 45 60 64 85 98
17
35 75 40 61 56 21 85 61 50 83 52 22 44 68 51 80 38
0
]]></sample_input>
<sample_output><![CDATA[12
2 4 6 17 20 40 43 45 60 64 85 98

16
21 22 35 38 40 44 50 51 52 56 61 68 75 80 83 85

]]></sample_output>
<test_input><![CDATA[12
2 4 6 17 20 40 43 45 60 64 85 98
17
35 75 40 61 56 21 85 61 50 83 52 22 44 68 51 80 38
20
18 34 66 76 23 55 23 54 190 45 34 76 87 34 77 34 67 23 98 76
0
]]></test_input>
<test_output><![CDATA[12
2 4 6 17 20 40 43 45 60 64 85 98

16
21 22 35 38 40 44 50 51 52 56 61 68 75 80 83 85

13
18 23 34 45 54 55 66 67 76 77 87 98 190
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[简单的事情]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">数学天才fans曾经说过一句话：组合数的计算是一件非常简单的事情。组合数的计算真的是一件非常简单的事情吗？请你自己去尝试一下吧！ </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入中的一些整数对n，m（m&le;n&le;20）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">输出其组合数。</font></p>]]></output>
<sample_input><![CDATA[5 2
18 13]]></sample_input>
<sample_output><![CDATA[10
8568]]></sample_output>
<test_input><![CDATA[3 1
20 10
19 8
3 2
6 3
18 9
15 3
15 12]]></test_input>
<test_output><![CDATA[3
184756
75582
3
20
48620
455
455
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[简单编码]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">最近Kingly对编码很感兴趣，于是从网上找了一些编码原则来对字符串做实验。由于Kingly一直很忙，所以希望你这位编程高手来替他解决这个问题。下面是编码原则：（1） 如果访问到字符A，W，F就转化成I；（2） 如果访问到字符C，M，S就分别转化成L，o，v；（3） 如果访问到字符D，P，G，B就转化成e；（4） 如果访问到字符L，X就分别转化成Y，u；（5） 其他字符均保持不变。（6） 遇到END就结束！</font></p>]]></description>
<input><![CDATA[<p></p>
<p></p>
<p></p>]]></input> 
<output><![CDATA[<p></p>
<p></p>
<p></p>]]></output>
<sample_input><![CDATA[A
CMSD
LMX
END]]></sample_input>
<sample_output><![CDATA[I
Love
You]]></sample_output>
<test_input><![CDATA[I high-speed rail link between eeijing and vhanghai and a maglev line between vhanghai and neighbouring Hangzhou have been approved by the vtate Louncil, Lhina's cabinet.
The eeijing-vhanghai railway will "use high speed wheel track technology," the National eevelopment and Reform Lommission (NeRL) the country's top planner said on its website yesterday.
I limited company will be established, which will be responsible for building and operating the 1,320-kilometre line; and private and foreign investments are welcome, the statement said.
However, there were no other information on the vhanghai-Hangzhou maglev line.ENe
The feasibility studies for both projects are not complete so details such as when they will be started are not known.
The approval for the eeijing-vhanghai railway comes nine years after the oinistry of Railways submitted the proposal in 1997.ENe
Though it was widely acknowledged that the project would significantly boost transport capacity and economic development, the debate over which technology should be used to build the rail delayed the project.
Now, the NeRL statement said, various parties have finally reached a consensus on significant issues including the technology solution. "The time is ripe for construction."
eesigned for speeds of 300 kilometres per hour, with the maximum at 350 kilometres per hour, the railway is expected to shorten travel time between the two cities from 13 hours to less than 5.
oinister of Railways Yiu Zhijun told Lhina eaily last week that the 200-billion-yuan (Uv$24.7 billion) project would be fully based on "our own technology."
The maglev line between vhanghai and Hangzhou has also been under study for nearly a decade.
]]></test_input>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[素数回文]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">小王对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在小王想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(5 &lt;= a &lt; b &lt;= 100,000,000);</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入a和b</font><font size="3" face="Times New Roman">(5 &lt;= a &lt; b &lt;= 100,000,000)</font></p>]]></input> 
<output><![CDATA[<pre><font size="3" face="Times New Roman">按从小到大输出a，b之间所有满足条件的素数回文数</font></pre>]]></output>
<sample_input><![CDATA[5 500]]></sample_input>
<sample_output><![CDATA[5
7
11
101
131
151
181
191
313
353
373
383]]></sample_output>
<test_input><![CDATA[5 500]]></test_input>
<test_output><![CDATA[5 
7 
11 
101 
131 
151 
181 
191 
313 
353 
373 
383 
]]></test_output>
<test_input><![CDATA[100 1000]]></test_input>
<test_output><![CDATA[101 
131 
151 
181 
191 
313 
353 
373 
383 
727 
757 
787 
797 
919 
929 
]]></test_output>
<test_input><![CDATA[600 2590]]></test_input>
<test_output><![CDATA[727 
757 
787 
797 
919 
929 
]]></test_output>
<test_input><![CDATA[3 200]]></test_input>
<test_output><![CDATA[3 
5 
7 
11 
101 
131 
151 
181 
191 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[统计字母个数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">给定一段文章，请输出每个字母出现的次数</font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">只有一组输入数据，该数据大小&lt;10KB。在文章中除最后一个字符外，只有小写字母、空格和换行符，没有另外的标点、数字和大写字母等。该文章以&rsquo;#&rsquo;结尾。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">输出格式为&ldquo;C A&rdquo;，C为&rsquo;a&rsquo;..&rsquo;z&rsquo;中的字母，A为出现次数，C和A之间空一格</font></p>]]></output>
<sample_input><![CDATA[here is the input
this is the article#
]]></sample_input>
<sample_output><![CDATA[a 1
b 0
c 1
d 0
e 5
f 0
g 0
h 4
i 5
j 0
k 0
l 1
m 0
n 1
o 0
p 1
q 0
r 2
s 3
t 5
u 1
v 0
w 0
x 0
y 0
z 0


]]></sample_output>
<test_input><![CDATA[OS2.TXT

Notes on upgrading to MS-DOS 6
==============================

If you have OS/2 on your computer, and the MICROSOFT
MS-DOS 6 USER'S GUIDE referred you to the OS2.TXT
file, carry out the following procedure that corresponds
to your computer's configuration. 

If You Have Neither OS/2 Dual Boot Nor OS/2 Boot Manager
--------------------------------------------------------
If you want to remove OS/2 from your computer but want 
to save the data on your hard disk first, carry out the 
following procedure:

To remove OS/2 and save the data on your computer:

1. Restart your computer using OS/2.

2. Back up the data files you want to keep onto floppy 
   disks by using the COPY command.

   CAUTION Do not remove OS/2 system files from your hard disk.

3. Reinsert Setup Disk 1 in drive A (the startup drive).

4. Restart your computer by pressing CTRL+ALT+DEL.

5. When Setup displays the screen about a non-MS-DOS partition
   or non-MS-DOS files, choose to remove the partition or files.

6. After you finish setting up MS-DOS, copy the data files 
   you saved in step 2 from the floppy disks back to your 
   hard disk.

If You Have OS/2 Dual Boot with DOS or OS/2 Boot Manager
with DOS
--------------------------------------------------------
When Setup detects OS/2, it displays a "Non-MS-DOS Partition 
Detected" or "OS/2 Files Detected" screen. If Setup 
displayed the "Non-MS-DOS Partition Detected" screen, carry out
Procedure 1. If Setup displayed the "OS/2 Files Detected"
screen, carry out Procedure 2.

Procedure 1  To remove OS/2 and save the data on your 
computer:

1. When Setup displays the "Non-MS-DOS Partition Detected" 
   screen, choose the "Continue Setup" option.

2. After you set up MS-DOS 6, make sure you can access 
   your hard disk.

3. Back up the data files you want to keep onto floppy 
   disks or a network drive.

4. See "Using Fdisk to Configure Your Hard Disk" in the chapter 
   "Diagnosing and Solving Problems," and carry out all the procedures 
   that appear in the following sections:

   o "Making a Startup Disk"

   o "Using Fdisk"

   o "Deleting Non-MS-DOS Partitions"

   o "Deleting Logical Drives"

   o "Deleting an Extended MS-DOS Partition"

   o "Creating a Primary MS-DOS Partition"

   o "Formatting Your Hard Disk"

5. Restart Setup. To do so, insert Setup Disk 1 in drive 
   A or drive B, and then type the following at the command 
   prompt:

   A:SETUP

   or

   B:SETUP

6. After you configure your hard disk, copy the files you 
   saved in step 3 back to the disk.

Procedure 2  To remove OS/2 and save the data on your 
computer:

NOTE If you have a version of OS/2 other than version 2.0, 
the names of the OS/2 files and directories on your 
hard disk may differ from those that appear in this 
procedure.

CAUTION Do not remove MS-DOS program files from your computer. 

1.  Back up the data files you want to keep onto floppy 
    disks or a network drive.

2.  If your Setup disks are compatible with drive A, insert
    Setup Disk 1 in drive A, and then restart your computer by
    pressing CTRL+ALT+DEL. After Setup displays the first
    screen, press F3 twice to quit Setup.

    If your Setup disks are not compatible with drive A,
    create a startup disk for drive A. To do so, insert 
    Setup Disk 1 in drive B, and then type the following 
    at the command prompt: 
   
    B:SETUP /F

    When prompted, choose to install MS-DOS on the floppy disk
    in drive A. After Setup is finished, leave the startup disk 
    in drive A, and then restart your computer by pressing 
    CTRL+ALT+DEL.
 
3.  Make drive C current by typing the following at the command 
    prompt:

    C:

4.  One by one, make each of the OS/2 directories and 
    subdirectories current by using the CD command, and 
    then delete all the files in them by using the DEL 
    command. For example, to make the SYSTEM subdirectory in
    the OS2 directory current and delete all the files in it, 
    type the following at the command prompt:
   
    CD \OS2\SYSTEM
    DEL *.*

5.  After you have deleted all files in these subdirectories, 
    delete the subdirectories by using the RD command. For 
    example, to delete the SYSTEM subdirectory in the OS2 
    directory on drive C, type:

    RD C:\OS2\SYSTEM

6.  After you have deleted all subdirectories in the OS2, 
    PSFONTS, SPOOL, NOWHERE, and OS!2_2.0_D directories, 
    delete all files in these directories by using the DEL 
    command.

7.  Delete the OS2, PSFONTS, SPOOL, NOWHERE, and OS!2_2.0_D 
    directories by using the RD command.

8.  Move to another disk or directory all the OS/2 files in 
    your root directory except the following:

    EA DATA.SF
    OS2lDR.MSG
    OS2lDR
    OS2KRNl
    OS2BOOT
    WP DATA. SF

9.  Change to the root directory by typing the following at the
    command prompt:
    
    CD\

10. Change the attributes of the five files listed 
    in step 8 by typing the following at the command
    prompt:

    A:\ATTRIB -H -S -R C:\E*.*
    A:\ATTRIB -H -S -R C:\O*.*
    A:\ATTRIB -H -S -R C:\W*.*

11. Delete the files whose attributes you changed by typing 
    the following at the command prompt:

    DEL E*.*
    DEL O*.*
    DEL W*.*

12. Return to the root directory the files that you moved in 
    step 8.

13. Remove disks from all floppy disk drives, and then restart 
    your computer by pressing CTRL+ALT+DEL.

14. Insert Setup Disk 1 in drive A or drive B.

15. Run Setup again by typing the following at the command prompt:

    A:SETUP

    or

    B:SETUP

If You Have OS/2 Boot Manager Without DOS
-----------------------------------------

To remove OS/2 and save the data on your hard disk:

1. Back up the data files you want to keep onto floppy 
   disks or a network drive by using the COPY command.
   
2. Reinsert Setup Disk 1 in drive A (the startup drive).

3. Restart your computer by pressing CTRL+ALT+DEL.

4. When Setup displays the screen about OS/2 or non-
   MS-DOS files, choose to remove OS/2 or the files. 

5. After you finish setting up MS-DOS, copy the data files 
   you saved in step 1 back to your hard disk.#]]></test_input>
<test_output><![CDATA[a 206
b 35
c 104
d 164
e 443
f 83
g 57
h 131
i 242
j 0
k 52
l 107
m 84
n 204
o 323
p 131
q 1
r 272
s 196
t 368
u 141
v 54
w 27
x 4
y 104
z 0
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[统计立方数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有一堆正整数，统计其中有多少立方数。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有一些正整数，其每个数都小于2^32。若该数为0，则应结束统计。</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">输出所统计的立方数个数</font></p>]]></output>
<sample_input><![CDATA[1 3 5 7 9 11 15 17 19 21 23 25 27 0
]]></sample_input>
<sample_output><![CDATA[2
]]></sample_output>
<test_input><![CDATA[10 27 24 986 446 339 643 9443 12895 345664 23698089 2345 567 2334 64 1000 1331 6275 0]]></test_input>
<test_output><![CDATA[4]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[老王赛马]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为&ldquo;战国时期&rdquo;。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。<span class="Apple-converted-space">&nbsp;</span><br />
赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：&ldquo;下次有机会带我到马场看看，也许我能帮你。&rdquo;<span class="Apple-converted-space">&nbsp;</span><br />
孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。<span class="Apple-converted-space">&nbsp;</span><br />
比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。<span class="Apple-converted-space">&nbsp;</span><br />
就是这么简单，现在老王也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。老王有N(1&le;N&le;1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看老王能否赢得比赛。<span class="Apple-converted-space"> <br />
</span></span></p>]]></description>
<input><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输入有多组测试数据。<span class="Apple-converted-space">&nbsp;</span><br />
每组测试数据包括3行：<span class="Apple-converted-space">&nbsp;</span><br />
第一行输入N(1&le;N&le;1000)。表示马的数量。<span class="Apple-converted-space">&nbsp;</span><br />
第二行有N个整型数字，即渊子的N匹马的速度。<span class="Apple-converted-space">&nbsp;</span><br />
第三行有N个整型数字，即对手的N匹马的速度。<span class="Apple-converted-space">&nbsp;</span><br />
当N为0时退出。<span class="Apple-converted-space"> <br />
</span></span></p>]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出&ldquo;YES&rdquo;。<span class="Apple-converted-space">&nbsp;</span><br />
否则输出&ldquo;NO&rdquo;。</span></p>]]></output>
<sample_input><![CDATA[5
2 3 3 4 5
1 2 3 4 5
4
2 2 1 2
2 2 3 1
0]]></sample_input>
<sample_output><![CDATA[YES
NO]]></sample_output>
<test_input><![CDATA[5
2 3 3 4 5
1 2 3 4 5
4
2 2 1 2 
2 2 3 1
10
1 1 1 1 2 8 2 9 10 2
10 5 6 9 4 8 3 2 15 1
5
5 9 2 3 3
4 8 3 10 12
4
2 2 2 2
2 2 2 2
1000
9 6 7 1 4 6 7 6 7 7 0 3 0 7 8 6 8 7 6 4 6 1 4 6 4 4 1 4 3 6 0 4 9 8 7 2 7 3 9 8 7 7 8 5 1 8 6 7 2 9 8 3 8 2 3 1 8 4 1 4 3 3 5 7 7 1 0 8 9 0 5 5 5 7 9 3 9 1 7 4 5 2 3 7 9 5 5 1 0 5 4 0 0 1 3 7 4 4 6 0 8 7 3 9 1 8 4 6 6 4 1 6 6 6 1 7 7 8 0 7 0 6 0 1 6 9 4 2 9 8 6 7 6 6 5 8 6 9 2 5 1 7 9 4 4 0 2 2 4 2 9 9 8 8 0 8 0 8 8 2 2 2 9 0 2 5 0 2 8 2 3 9 3 1 0 7 1 5 6 3 9 6 0 6 5 0 2 0 2 7 5 8 3 7 4 9 6 4 8 2 9 4 7 0 4 6 3 6 6 0 3 0 2 1 5 9 0 4 8 8 2 7 5 0 2 3 3 4 8 5 9 8 7 8 4 5 3 1 0 1 0 6 4 2 3 6 2 8 2 7 6 2 0 8 9 8 9 0 5 4 8 6 4 9 4 2 4 7 1 7 0 1 1 3 7 0 2 2 3 2 3 2 8 1 6 9 5 1 5 7 0 9 6 7 1 6 9 7 8 4 6 4 4 7 0 0 4 3 9 9 7 2 2 7 3 6 0 1 5 0 8 4 9 1 2 9 2 9 2 2 4 7 9 1 0 9 8 8 4 2 5 7 4 7 9 2 1 6 3 4 8 4 0 3 0 8 7 2 5 7 3 8 4 5 1 9 9 6 4 7 7 7 9 5 4 8 5 9 2 2 4 7 4 4 0 1 5 0 0 5 2 1 3 4 7 9 1 8 2 8 8 6 3 7 0 3 8 5 8 5 7 4 2 1 3 9 8 1 2 8 0 9 2 0 0 2 3 8 8 7 8 7 0 6 2 3 0 3 4 7 9 3 4 2 9 5 5 1 4 1 3 2 9 4 5 6 6 9 2 4 4 7 6 1 0 6 4 5 8 3 4 5 9 1 5 5 4 0 1 7 8 2 7 1 6 9 1 6 9 8 4 4 9 7 8 1 8 8 0 2 4 3 6 9 7 0 9 3 7 6 9 0 0 3 4 6 2 5 0 3 1 7 9 1 1 8 3 6 4 9 8 5 8 4 2 8 3 9 5 7 9 2 1 8 0 5 4 7 5 1 3 5 1 7 8 3 1 0 2 7 9 2 0 3 1 6 1 3 7 9 5 7 8 9 6 2 9 8 7 3 6 8 8 2 9 7 9 1 9 2 3 3 1 5 5 7 1 8 3 3 9 0 9 3 6 7 3 1 6 1 4 5 6 6 7 6 5 8 4 4 6 5 7 5 2 8 3 7 0 2 9 9 9 1 5 4 1 5 4 6 0 5 3 3 4 5 9 4 0 9 2 3 1 8 5 3 1 2 4 3 7 5 7 1 7 3 4 1 5 4 9 7 3 0 6 6 9 4 4 9 2 2 2 7 4 2 6 6 8 7 8 3 2 9 8 8 4 5 7 3 7 3 6 3 4 5 1 5 3 3 2 9 3 4 7 8 5 7 9 6 3 3 6 0 4 4 3 1 9 8 2 1 7 4 6 5 3 1 0 9 5 3 3 5 1 8 4 3 4 3 6 0 6 9 6 2 6 0 1 0 1 2 1 5 5 4 0 2 1 7 2 9 5 4 7 6 8 2 4 5 1 9 6 0 7 5 0 0 5 6 2 4 2 7 3 4 1 6 6 5 6 4 7 5 4 6 4 3 3 7 7 2 6 5 0 6 7 3 6 4 2 3 5 4 1 2 8 9 6 8 6 4 0 2 6 6 0 8 5 6 6 2 4 5 0 2 6 8 5 1 6 3 8 0 3 9 8 7 6 9 8 0 9 8 1 0 7 3 5 1 9 4 7 8 4 3 1 0 5 5 0 9 9 7 1 8 3 0 4 3 7 5 9 3 5 8 1 9 2 6 7 4 5 8 7 4 6 7 1 9 8 8 4 9 5 8 3 7 6 7 7 0 1 7 8 7 4 4 9 8 9 4 8 8 5 7 4 2 2 6 9 8 3 6 6 8 4 4 3 6 3 9 8 8 9 5 4 2 6 5 5 9 0 8 7 2 8 2 0 9 1 2 5 8 2 0 6 9 7 5 1 6 2 7 8 6 0 8 9 7 2 2 9 9 4 7 4 8 4 3
3 8 3 2 9 8 4 0 4 0 2 3 7 7 5 1 6 5 3 6 3 2 0 4 2 1 1 2 9 4 4 9 5 7 9 9 1 9 9 5 1 2 1 5 1 8 1 0 2 4 0 0 4 9 2 2 2 3 1 3 3 0 6 1 5 6 7 1 1 1 7 6 5 4 2 4 4 0 0 5 6 4 0 0 3 6 6 6 0 5 4 9 4 7 2 9 3 7 9 9 0 3 9 2 8 7 7 8 4 2 2 5 8 5 3 6 1 3 4 5 7 9 1 1 4 5 0 2 9 8 3 2 6 6 3 5 8 1 5 8 3 5 7 1 8 6 9 7 6 1 5 0 2 3 0 8 1 3 2 1 4 9 1 1 1 9 1 2 7 5 6 3 9 9 5 3 6 8 9 4 0 0 9 1 5 7 3 2 7 2 7 6 6 1 2 5 4 4 1 6 4 0 0 4 4 3 7 0 3 0 1 6 2 0 7 7 6 2 9 0 1 2 5 6 7 4 6 6 5 8 5 5 9 5 8 1 7 8 1 3 8 3 7 4 2 0 7 9 5 8 7 5 3 2 6 2 5 8 3 1 4 4 2 9 3 1 8 3 8 4 9 1 0 7 6 8 0 0 1 6 2 4 9 5 3 3 0 3 2 2 4 3 1 0 2 0 4 8 2 1 8 0 0 6 1 2 7 7 6 2 7 9 8 1 5 0 1 4 8 0 7 6 7 0 6 6 5 6 3 5 8 4 5 7 4 5 0 7 2 2 1 4 7 8 1 9 3 2 8 6 8 2 0 2 4 3 0 4 2 7 1 3 8 3 0 4 1 1 7 2 0 2 3 6 0 2 3 7 4 9 2 9 2 1 1 8 3 1 1 2 1 4 7 2 1 8 4 2 1 2 3 8 2 8 4 9 6 2 3 6 9 1 5 3 9 5 1 4 6 5 1 0 4 7 1 1 7 8 6 1 4 9 6 5 6 0 3 3 5 8 1 6 6 9 6 7 9 4 8 1 2 4 9 9 9 5 3 1 6 4 6 0 1 1 7 3 4 8 0 8 7 9 7 6 7 3 5 1 2 9 4 9 1 0 5 9 8 9 3 1 9 6 4 0 1 9 7 1 4 1 5 3 2 6 1 7 1 3 2 6 8 0 7 8 3 0 9 9 0 9 1 2 4 3 0 0 3 2 5 0 8 9 8 8 1 9 3 8 8 8 7 2 7 6 9 7 8 7 1 0 5 4 7 4 3 6 4 2 9 2 1 9 5 3 9 5 3 7 3 0 8 8 0 9 9 8 9 6 7 9 2 2 3 5 2 6 4 4 6 3 8 6 5 9 5 3 8 2 7 0 2 3 1 5 2 6 5 6 7 7 8 7 0 4 5 2 4 9 9 9 7 6 0 7 7 0 8 9 6 9 5 0 9 6 8 6 1 4 4 9 3 8 3 0 7 7 9 4 5 3 7 8 5 9 5 3 7 1 4 0 2 8 6 5 3 0 7 4 9 2 5 8 8 9 1 9 1 1 7 2 4 7 8 4 2 3 4 5 5 3 3 7 5 6 0 5 6 5 0 7 5 1 0 2 0 1 2 3 4 5 7 5 1 2 2 5 7 7 5 2 2 5 6 9 7 6 8 1 7 0 6 6 9 0 8 3 1 4 6 4 5 0 1 4 6 7 0 1 0 2 0 5 7 8 1 7 7 6 8 3 6 5 5 0 1 1 9 8 9 8 3 9 4 5 8 9 9 4 0 3 1 7 7 3 9 2 0 1 5 7 1 1 4 2 7 0 1 2 4 0 6 2 3 1 1 1 8 9 0 0 4 1 0 3 8 7 0 6 2 0 2 8 8 4 9 9 2 6 9 3 1 7 1 6 7 8 7 8 1 5 0 8 0 5 8 0 2 7 9 1 7 5 6 0 8 2 3 7 0 7 6 5 2 9 4 2 3 1 0 5 8 6 7 6 0 4 3 8 9 3 6 7 5 5 9 2 1 7 4 5 1 4 0 8 5 8 5 8 3 9 2 3 7 4 3 4 3 9 7 6 9 4 2 3 6 2 9 6 7 7 4 4 6 7 3 1 2 1 5 4 6 3 1 1 0 6 7 3 9 9 8 4 3 0 5 0 1 3 8 9 6 2 2 3 3 5 4 5 2 1 2 1 1 3 9 0 5 5 9 3 8 5 8 4 9 3 6 8 8 1 5 4 8 4 8 3 4 9 3 0 5 6 8 9 1 8 5 0 4 9
1000
9 4 1 6 6 4 9 1 6 6 9 4 0 9 3 0 2 4 8 8 0 5 1 7 1 8 3 9 9 0 6 8 7 5 6 4 2 4 2 4 4 5 2 2 3 5 2 3 4 6 5 3 5 1 0 3 3 7 8 5 1 1 1 4 4 7 5 7 7 5 7 3 0 4 9 7 4 1 3 1 5 8 5 4 8 7 3 5 3 6 6 7 2 3 9 5 8 9 6 5 9 7 6 8 4 4 9 6 4 8 8 5 3 0 9 0 0 4 8 3 1 7 8 5 0 5 0 1 1 2 1 9 0 9 8 9 6 5 2 2 1 6 6 4 0 4 5 2 9 2 7 6 7 8 3 8 7 8 5 3 1 5 9 9 8 3 4 5 6 6 9 3 7 4 7 9 5 7 4 0 7 1 9 5 2 9 0 7 1 2 2 1 0 0 0 4 5 6 2 6 4 8 8 0 1 3 1 9 8 2 7 3 3 0 4 9 4 1 1 2 4 6 3 4 7 4 5 5 0 0 3 4 1 0 0 2 3 2 8 6 9 7 3 1 6 9 2 9 5 4 5 2 5 1 7 3 2 0 2 2 3 5 8 7 6 3 6 0 3 2 9 8 8 3 2 6 8 9 3 5 3 8 2 8 4 6 4 8 6 6 2 4 4 1 6 5 8 7 5 4 1 3 2 5 5 9 4 6 9 0 7 6 0 2 3 9 2 2 4 8 7 3 6 2 3 7 7 9 9 1 7 3 7 4 9 8 1 6 9 2 7 2 4 3 5 6 6 6 7 9 7 4 6 0 3 5 0 4 1 9 8 6 2 8 1 6 9 7 4 4 7 3 3 4 5 6 8 2 3 9 0 6 3 6 4 8 2 4 6 1 8 4 5 2 0 8 4 9 1 1 6 2 8 0 8 7 9 4 9 8 2 7 2 4 3 3 0 7 5 9 9 9 8 6 1 8 1 5 4 2 7 1 6 1 3 2 1 0 5 8 9 4 5 1 2 2 5 6 4 6 1 9 1 8 1 2 4 5 5 6 3 6 7 7 3 1 1 0 1 4 5 8 6 1 1 1 9 2 1 4 5 6 1 5 1 7 8 5 5 3 3 4 0 0 9 8 0 1 1 4 0 8 8 3 2 9 0 6 5 1 0 8 6 6 3 7 9 7 7 2 5 1 3 7 5 5 4 5 4 2 5 4 7 4 4 4 5 8 2 7 9 2 2 8 4 7 8 4 5 8 0 6 3 9 7 5 8 1 3 7 6 3 2 9 3 0 4 0 7 7 8 3 2 3 7 3 0 9 7 7 9 9 6 5 9 9 4 0 0 7 4 5 6 5 2 9 6 6 6 2 7 6 6 5 2 4 5 4 5 1 9 6 2 1 5 0 3 9 4 9 9 4 9 9 5 8 6 6 7 3 2 9 5 7 8 3 0 7 6 0 7 4 3 0 2 3 7 0 5 9 7 5 6 2 7 8 2 1 2 8 7 1 0 3 1 7 2 6 7 9 1 3 8 8 1 9 1 6 2 6 5 1 3 6 2 0 8 3 6 5 2 5 4 9 2 2 6 9 0 5 2 3 8 0 7 2 2 5 8 0 0 8 3 3 3 3 6 9 2 4 9 9 4 8 0 8 7 6 8 1 1 0 5 7 9 4 4 7 7 6 2 4 2 5 0 5 5 5 8 8 9 0 0 5 0 7 4 8 5 6 9 4 5 0 5 2 3 3 9 2 4 2 5 9 6 8 5 8 1 3 8 8 0 2 9 0 9 1 6 8 6 2 7 7 2 6 5 7 0 7 2 8 4 4 7 5 4 7 7 2 9 7 6 9 3 9 7 7 1 1 6 9 0 3 4 2 2 7 2 3 0 8 3 5 8 2 6 1 5 1 8 6 1 6 2 0 0 2 2 4 6 7 5 0 8 0 9 6 6 4 7 0 3 3 3 2 5 6 3 8 9 1 7 1 6 1 7 2 9 1 6 1 4 8 1 2 8 3 2 2 2 7 1 7 9 5 0 0 4 5 9 5 6 6 4 7 4 1 9 5 2 5 7 0 6 5 6 5 2 1 3 7 2 5 2 5 9 2 6 9 7 0 2 3 6 7 9 3 6 8 0 8 8 5 7 9 0 8 8 9 9 5 3 4 5 9 2 4 1 5 0 8 3 0 4 2 0 4 3 0 0 9 8 2 7 1 5 8 8 6 9 3 9 4 0 1 1 9 0 3 7 3 2 8 3 6 4 1 6 6
4 8 7 7 5 6 0 2 1 8 8 0 8 7 2 0 6 9 0 4 6 2 6 7 2 9 5 8 2 1 6 4 4 6 8 0 0 1 5 9 5 9 2 9 5 2 8 0 9 7 2 5 0 3 8 7 0 0 0 5 8 1 8 8 2 4 2 8 4 7 4 1 7 0 9 4 0 8 7 7 1 6 7 1 2 4 3 2 7 1 9 8 2 3 4 7 8 4 9 3 5 3 5 9 8 2 9 5 4 5 9 9 1 6 6 3 2 5 1 3 1 4 1 6 4 4 3 2 2 4 8 3 4 0 0 3 6 5 3 1 5 2 5 6 9 6 7 1 1 8 2 0 4 7 6 0 5 7 5 2 4 4 2 8 2 8 8 3 3 8 9 3 5 0 4 9 5 7 2 4 7 1 7 2 4 0 3 0 4 0 0 8 4 6 8 9 7 6 9 7 8 2 9 1 2 8 5 8 0 9 0 3 2 4 4 0 3 4 5 5 0 4 9 0 2 7 7 6 1 5 3 8 1 7 1 4 8 7 0 3 2 1 1 8 5 8 5 3 0 9 9 6 5 8 0 7 9 0 0 8 3 4 0 4 2 2 7 3 2 6 8 3 3 4 5 8 6 3 9 2 5 5 6 3 8 3 5 0 3 3 5 6 3 4 0 6 1 8 6 7 4 7 9 9 1 7 2 4 5 8 6 7 9 1 6 5 9 8 2 9 6 7 4 0 1 5 4 4 8 4 8 7 4 8 4 0 8 1 2 5 2 4 6 7 0 8 0 3 9 4 3 3 7 1 6 9 7 6 1 7 4 1 3 3 2 9 1 7 3 6 5 2 7 1 9 3 9 5 7 6 6 1 7 3 6 6 1 4 2 8 0 5 7 9 1 4 9 1 2 0 6 1 2 5 1 8 5 4 7 3 7 5 1 9 4 8 3 2 9 5 4 1 3 0 9 7 3 1 3 4 5 8 7 7 2 3 2 6 5 1 3 1 0 0 5 7 5 9 8 8 0 1 5 4 9 0 9 6 7 3 6 7 2 2 7 4 4 7 2 5 7 4 6 1 6 1 7 5 8 6 2 5 4 2 4 8 8 5 6 6 5 2 7 1 2 1 4 1 0 7 0 4 3 3 8 1 5 6 7 5 4 8 3 2 2 0 1 2 1 6 2 6 6 5 6 6 5 6 0 9 9 2 6 4 2 7 9 1 7 8 5 5 4 6 3 1 3 3 6 7 6 3 7 6 9 5 3 1 1 7 3 7 2 3 0 4 3 6 7 2 3 5 1 5 7 0 1 9 6 1 9 3 4 6 9 8 6 0 8 7 0 3 5 6 7 9 2 5 9 2 3 4 1 8 5 6 2 9 7 9 3 6 0 0 6 4 9 0 7 0 1 3 3 5 5 6 5 1 2 7 7 2 8 6 3 7 7 8 1 4 1 9 3 6 9 6 1 8 8 3 0 7 3 0 8 3 3 6 7 9 1 9 8 9 0 9 8 1 8 1 4 4 3 9 6 1 7 4 9 7 5 6 6 9 2 8 7 6 9 7 1 2 7 2 2 1 1 3 6 0 6 4 9 0 3 1 2 2 3 2 0 2 9 0 6 6 0 7 9 5 4 9 9 1 2 5 0 9 0 7 7 6 3 7 7 2 1 2 2 9 6 1 4 2 2 4 8 9 6 6 4 0 6 1 0 6 5 9 1 2 7 2 1 7 8 2 9 9 8 5 4 1 8 0 1 9 3 9 4 8 0 5 2 0 7 4 4 6 6 4 4 1 2 7 8 3 1 6 3 2 2 8 0 9 8 1 1 0 2 5 3 3 2 5 3 5 5 7 1 2 5 0 1 6 5 3 9 6 2 2 1 0 5 2 9 3 6 1 5 8 0 2 5 3 2 6 7 7 2 1 2 3 2 6 1 6 6 0 2 3 1 8 2 5 6 6 0 2 3 3 1 1 5 9 0 8 0 8 5 4 7 6 5 0 8 2 5 2 6 7 9 7 9 5 6 4 5 1 5 7 7 5 1 0 9 6 8 9 7 0 5 6 0 1 2 3 1 9 1 4 3 5 9 6 4 2 3 0 2 7 4 8 0 7 4 4 0 5 0 6 1 3 9 5 1 7 1 1 3 7 0 1 9 4 2 1 8 0 3 1 7 3 5 4 0 0 0 4 0 3 4 9 4 6 5 9 1 4 4 5 2 6 3 4 3 3 8 1 9 9 6 8 1 0 9 5 9 4 9 0
1000
8 3 2 7 5 0 5 8 8 1 0 5 0 5 9 2 5 3 7 7 9 8 3 0 2 7 7 3 6 9 1 1 4 3 3 1 4 4 8 3 4 9 9 0 6 5 7 6 5 3 9 9 7 8 2 8 2 5 7 6 1 4 7 8 8 4 7 0 1 0 5 4 7 7 1 1 0 5 9 6 3 4 5 6 3 9 5 1 0 4 1 4 4 9 5 0 0 5 4 5 6 6 4 0 9 6 6 7 2 6 4 1 0 6 3 9 8 0 1 1 6 4 8 9 5 6 7 8 1 7 4 6 9 2 6 2 9 6 5 9 3 8 3 2 4 9 5 7 0 2 0 5 0 4 8 9 5 3 2 2 9 0 7 2 0 9 2 0 7 6 6 7 1 0 4 8 7 2 0 1 0 4 2 6 2 4 1 4 2 0 9 1 6 3 3 4 0 7 0 3 3 7 1 0 8 3 8 0 7 5 8 1 9 7 7 2 2 5 7 5 8 8 0 6 1 7 3 2 8 5 2 2 8 9 9 9 2 6 6 8 6 9 9 6 6 1 5 3 0 7 6 2 2 7 5 7 4 2 5 5 3 4 7 6 0 1 0 4 5 1 7 2 3 4 3 7 1 5 7 1 7 0 9 4 3 7 2 3 5 7 1 4 7 4 5 7 1 4 4 4 6 5 0 1 8 0 0 4 4 0 1 4 1 3 4 2 3 7 2 5 4 3 0 8 9 4 6 2 9 7 1 0 5 1 7 5 2 6 1 6 5 6 9 2 4 7 3 6 2 7 6 2 1 9 2 8 0 5 0 4 6 1 1 1 2 7 7 5 3 2 4 4 4 2 0 6 5 1 5 5 8 9 2 5 7 6 7 4 8 6 8 1 1 6 5 8 8 3 1 1 2 0 1 7 1 9 4 6 4 6 0 0 2 1 2 4 0 4 5 5 4 8 8 3 4 1 1 1 1 1 7 3 0 8 1 7 7 6 1 2 1 2 8 1 5 3 5 8 2 2 7 2 9 1 2 1 5 7 1 9 3 9 6 0 6 6 4 1 0 4 1 3 6 8 9 7 5 6 1 8 2 1 1 4 2 5 9 5 5 4 4 3 3 7 9 3 9 6 0 2 2 3 5 9 0 5 4 9 4 0 0 4 9 0 9 3 2 9 9 5 2 1 0 3 0 6 4 1 1 5 9 8 2 2 1 2 1 2 1 6 1 5 2 5 5 1 0 6 1 3 2 0 8 9 9 8 6 6 3 5 2 6 1 9 0 2 1 0 1 0 2 9 6 0 8 2 0 1 4 6 8 8 8 1 1 7 1 9 0 6 5 5 0 7 7 6 6 2 3 3 9 9 5 8 9 6 6 4 2 3 1 1 3 4 7 7 3 6 6 5 3 7 0 0 6 9 5 9 0 4 9 2 5 9 2 2 0 2 8 2 2 5 1 2 7 1 0 9 3 6 4 7 3 9 8 1 1 1 7 8 3 5 8 7 9 9 2 2 0 9 2 6 1 7 4 8 8 8 5 7 1 6 6 5 1 1 0 8 3 4 2 2 3 8 0 8 1 9 5 7 7 6 0 5 7 1 0 0 8 6 4 0 7 7 1 8 8 4 4 0 4 8 0 2 2 1 5 4 1 0 2 8 3 5 1 0 2 5 0 7 5 4 5 9 2 9 8 7 3 8 2 7 3 2 1 7 9 5 4 5 9 2 1 5 7 3 5 1 5 9 3 0 1 3 0 3 4 1 9 2 5 2 2 1 0 7 5 8 3 9 5 3 6 5 3 7 9 3 3 7 6 4 8 9 5 2 8 3 5 4 3 2 6 7 6 0 5 2 2 4 6 4 0 6 0 8 9 5 9 3 3 9 5 0 7 4 7 3 0 9 3 7 1 8 6 2 3 5 8 8 3 7 7 9 8 4 3 2 8 9 7 4 7 6 3 6 9 4 7 4 4 0 0 1 1 9 3 8 3 5 9 5 6 5 7 5 8 8 4 6 0 8 3 5 3 0 8 3 4 9 6 5 1 7 5 6 4 6 8 5 6 1 9 2 3 8 4 2 2 8 3 1 5 3 7 7 3 8 2 1 3 1 2 7 2 0 8 1 1 9 1 2 3 2 6 0 3 7 0 0 9 3 0 7 3 4 0 9 6 3 3 9 4 7 7 0 5 8 9 7 0 7 3 0 2 9 2 9 6 2 3 8 0 5 5 3 4 0 1 3 2 3 3 8 8 0 9 3 2 2
9 4 3 1 3 8 5 2 6 8 2 2 5 6 3 1 9 0 8 2 9 6 1 8 1 8 6 8 0 7 2 2 6 1 9 1 1 7 0 1 8 8 1 8 5 6 9 3 0 7 6 9 6 1 3 9 7 8 7 2 9 2 5 7 2 9 8 6 7 7 9 5 8 8 3 0 3 6 9 1 0 5 6 2 1 6 8 6 1 9 1 1 6 7 1 7 5 7 0 7 1 8 1 4 6 9 9 7 9 6 2 5 8 4 0 1 4 2 7 9 3 0 8 6 1 3 1 4 7 6 6 3 3 9 6 9 3 1 7 0 3 7 8 4 4 3 7 5 6 8 9 7 4 2 8 7 4 9 3 6 7 6 4 5 3 0 4 0 7 3 9 8 5 9 7 9 8 3 7 5 5 5 3 0 2 5 1 3 6 6 8 3 5 6 6 3 2 2 6 7 0 6 4 2 6 2 9 9 0 4 0 0 3 3 1 0 9 8 8 5 5 4 7 7 1 7 0 6 8 5 0 9 0 0 2 2 5 5 4 5 0 5 6 1 8 1 2 5 4 2 7 3 3 3 9 6 6 9 8 5 3 9 8 7 9 4 3 7 1 8 2 7 8 7 6 8 2 0 6 5 7 6 0 6 9 2 4 0 8 1 9 0 6 3 8 0 6 9 7 8 6 3 4 4 5 0 8 0 4 9 4 1 8 2 5 5 3 1 2 0 9 4 3 0 7 8 2 9 1 4 4 5 9 7 8 7 9 3 4 8 4 9 4 3 7 7 4 9 5 1 3 6 7 7 0 6 6 3 9 4 4 1 5 7 0 3 6 6 2 7 2 2 2 0 7 1 4 4 6 9 5 2 7 7 4 1 0 7 3 9 9 4 6 7 9 5 9 9 7 0 3 1 4 1 8 1 4 4 0 1 1 5 3 4 5 4 9 6 4 4 8 6 2 0 5 5 5 9 7 6 1 0 2 6 9 6 3 3 4 3 3 8 0 6 0 6 5 7 2 1 0 7 2 3 9 2 3 3 5 8 2 3 8 5 9 2 7 7 5 6 7 7 5 7 1 3 4 9 9 5 3 7 0 5 3 1 8 9 9 1 8 2 6 1 8 6 4 8 9 3 6 9 3 7 4 6 6 6 7 2 6 9 3 4 3 9 3 9 1 1 2 0 4 3 8 0 1 3 8 5 3 5 5 3 2 2 2 5 3 4 8 6 5 8 0 1 9 9 1 9 6 0 4 0 3 9 7 9 8 5 9 2 0 2 2 7 4 4 8 5 4 8 7 0 8 4 6 9 8 4 7 8 5 4 4 1 6 0 5 9 7 3 9 0 1 5 7 2 9 0 3 6 8 7 4 6 5 4 9 7 0 5 1 9 7 3 3 2 1 7 2 0 0 7 7 9 5 4 0 8 8 3 5 8 5 2 9 2 4 1 1 6 5 1 3 0 2 9 9 3 0 0 6 1 6 6 3 8 2 8 1 4 9 1 5 0 5 3 2 8 6 3 1 6 4 3 3 1 0 0 4 6 1 9 8 3 5 1 7 8 2 8 0 1 4 5 4 2 8 9 4 5 2 0 9 6 5 1 2 4 1 6 6 9 6 3 9 5 7 1 9 9 5 3 8 9 2 4 0 5 5 1 3 3 0 3 5 7 0 4 8 6 6 8 7 2 4 3 7 8 2 7 9 0 1 4 3 7 3 9 5 9 4 8 1 1 2 2 0 9 8 3 3 0 3 6 6 7 5 8 4 2 1 9 7 2 0 1 7 6 7 0 8 4 7 2 7 0 7 7 2 1 9 8 6 4 4 9 3 1 9 9 9 6 2 6 4 5 3 4 9 5 4 6 9 9 3 0 1 0 5 7 3 4 3 8 7 9 8 8 8 7 7 6 2 1 7 9 8 8 8 2 9 5 5 8 8 5 1 5 3 0 6 3 1 7 0 4 6 4 5 3 1 3 7 8 3 7 4 8 1 1 7 5 7 6 8 5 6 1 3 5 3 1 1 4 8 1 0 5 3 0 5 3 2 0 1 6 2 3 5 2 2 6 9 4 4 7 5 8 1 8 9 0 1 2 8 1 3 6 3 2 8 7 8 9 2 7 7 9 0 0 9 2 1 1 4 9 8 9 5 7 5 6 7 2 8 4 8 4 6 1 0 5 2 4 4 1 9 5 7 8 5 7 6 7 8 6 2 0 0 2 7 1 6 4 8 9 2 7 2 2 7 7 0 3 4 2 4 8
1000
5 4 0 3 9 5 6 8 3 3 3 6 1 5 3 1 6 3 3 1 5 1 9 6 7 4 2 7 3 1 6 1 9 3 6 3 0 4 0 5 7 0 8 8 0 9 3 7 4 3 0 9 6 5 9 5 4 1 8 7 1 0 2 9 1 3 5 9 0 3 6 7 8 7 5 5 7 3 5 8 0 3 1 3 4 9 2 0 0 9 7 2 7 9 1 3 1 3 8 1 8 3 6 5 8 5 6 8 2 8 0 5 4 4 5 2 1 4 8 1 3 7 0 3 1 0 3 3 9 4 3 8 4 3 8 9 6 4 9 7 5 4 9 7 6 5 2 8 7 0 7 7 5 6 5 9 3 1 8 8 6 6 2 1 9 5 4 8 2 3 6 1 6 0 0 5 7 7 2 8 0 7 0 9 5 6 3 1 4 3 6 9 0 8 3 9 1 6 3 3 6 3 6 1 6 7 5 9 5 0 5 4 1 4 5 7 3 6 5 9 2 5 7 5 3 1 8 3 1 9 5 3 8 4 9 6 3 5 3 8 2 3 2 6 1 2 4 0 9 7 9 2 9 8 2 8 3 5 6 3 0 2 1 9 8 5 5 7 9 3 4 3 7 7 1 4 9 0 6 9 4 9 7 1 3 1 9 5 2 9 7 9 7 6 9 1 6 7 5 4 2 2 8 4 0 1 4 7 4 9 0 4 6 1 8 6 6 5 0 9 9 4 1 9 2 0 0 8 3 0 7 7 4 1 5 0 1 6 0 6 8 8 8 4 7 3 2 6 7 0 4 8 4 9 9 6 5 5 5 1 7 3 3 5 4 1 6 2 0 2 9 0 0 9 0 9 5 7 9 2 6 5 1 2 7 5 9 8 6 0 3 9 0 6 2 8 3 2 9 9 7 9 1 0 1 0 4 1 2 1 0 3 3 1 1 3 9 2 3 6 5 6 3 4 1 1 3 7 9 3 6 2 3 6 6 6 9 1 1 8 7 6 3 0 9 8 4 9 8 9 9 0 2 3 7 3 0 6 8 2 3 5 5 1 6 3 4 7 5 3 2 0 0 1 0 3 2 5 0 0 6 7 9 9 8 1 5 9 7 1 7 3 6 8 8 5 8 2 5 4 0 6 5 9 1 7 9 1 4 3 0 7 2 6 2 3 1 9 5 0 2 8 8 9 6 1 4 5 7 1 0 7 2 9 2 3 1 3 2 5 3 2 2 0 5 5 8 4 3 7 8 7 6 4 2 1 5 5 3 1 5 0 7 5 3 3 2 2 8 1 8 5 1 1 8 8 7 5 7 0 3 7 5 9 7 2 0 8 2 9 6 2 1 0 8 9 2 8 5 7 4 8 7 0 7 1 7 2 7 6 0 1 1 7 4 7 7 0 0 1 7 5 1 9 6 1 2 8 9 3 1 8 7 7 9 1 1 1 9 2 6 7 5 9 7 7 7 0 5 9 4 0 0 0 0 1 8 2 9 3 4 9 1 4 9 6 4 7 4 2 4 7 2 8 4 1 1 8 3 0 1 8 1 4 1 7 1 0 8 4 9 4 8 5 3 6 9 6 3 9 4 4 2 8 6 1 5 0 4 0 2 4 5 8 1 4 1 3 6 3 7 7 2 0 9 3 9 4 7 6 4 7 2 6 3 5 9 4 0 4 4 3 4 5 7 9 4 9 8 1 4 3 3 0 9 2 9 0 7 7 3 7 9 0 9 9 8 7 0 7 8 4 3 6 9 1 7 0 0 0 4 9 5 8 8 4 8 9 6 9 9 6 8 8 7 9 4 2 5 5 9 1 9 9 9 9 7 2 5 2 9 7 8 8 9 8 1 9 1 3 2 8 4 0 0 1 8 4 6 6 6 8 6 6 3 0 4 4 9 0 2 4 2 0 0 8 6 4 2 4 7 1 6 7 2 1 1 3 2 4 7 1 0 7 1 2 1 7 7 8 3 3 6 8 8 8 0 8 6 6 1 0 6 6 8 7 3 6 9 7 9 0 6 7 7 2 4 8 1 9 8 4 1 1 9 1 6 1 8 8 0 4 9 6 8 6 8 8 7 8 6 1 9 1 4 3 7 2 5 5 5 7 8 0 2 5 0 6 8 0 4 0 7 7 4 3 3 1 7 0 5 5 1 6 3 8 9 9 0 8 5 2 2 0 5 7 6 5 9 1 3 5 8 2 6 5 8 1 1 3 3 2 5 7 4 1 9 1 2 7 6 9 2 0 1 9 0 4 3 1
6 6 1 6 1 4 9 0 9 9 2 0 8 5 9 5 5 7 9 9 4 4 6 7 8 8 4 4 4 2 3 2 1 3 2 2 2 7 5 0 9 8 7 2 0 8 6 9 5 3 2 3 4 3 8 9 2 8 0 4 6 1 6 8 5 9 7 4 0 1 4 5 7 7 5 0 1 2 6 9 2 1 8 3 2 2 4 8 4 7 0 0 6 0 3 1 6 7 4 1 7 6 7 7 3 8 5 4 0 7 9 4 8 8 7 8 7 2 3 2 4 8 2 2 4 0 2 9 6 5 5 4 2 1 2 3 7 8 9 4 7 2 5 5 1 7 9 9 2 2 5 1 2 9 7 9 0 1 5 2 4 4 9 3 5 6 0 6 9 0 6 9 2 8 4 1 3 6 4 5 4 3 0 7 9 1 6 2 4 2 1 1 9 3 5 7 7 3 2 4 0 2 6 9 5 4 6 3 3 6 2 7 4 5 8 8 3 3 8 0 6 4 0 6 3 3 5 7 6 0 7 8 8 4 0 6 7 1 2 1 1 6 4 5 3 7 9 4 6 6 2 5 7 6 2 7 6 4 8 2 4 7 5 7 5 8 6 7 6 9 1 4 7 7 9 9 9 0 3 6 6 0 0 4 5 9 7 3 6 5 5 4 9 5 6 2 0 2 5 5 4 7 2 3 2 8 6 7 4 4 1 4 5 4 1 0 2 3 6 4 4 7 4 0 3 4 0 2 3 6 8 8 0 6 7 7 4 1 7 2 7 8 2 7 2 9 6 1 7 7 7 2 1 9 7 3 5 4 7 9 4 1 4 7 4 6 5 7 5 3 1 2 8 2 6 6 7 4 3 7 0 2 2 4 5 2 2 1 5 4 7 0 3 7 3 1 6 6 6 3 3 7 9 8 7 8 2 1 0 0 3 9 1 8 9 3 8 6 1 4 3 4 1 8 0 4 5 1 6 7 1 4 0 1 9 9 4 4 2 1 2 7 7 7 0 4 0 7 9 1 3 4 9 6 7 1 5 1 0 7 4 8 8 1 5 6 2 7 9 0 6 7 1 4 4 1 8 1 4 7 8 6 8 8 4 8 7 0 9 8 8 8 1 1 9 4 8 1 9 9 3 8 2 9 9 2 3 0 3 8 1 2 5 1 6 9 6 0 0 4 1 6 0 5 5 3 2 2 9 7 8 8 4 6 1 6 5 1 6 5 7 6 1 3 0 7 7 5 7 4 6 4 0 5 4 8 8 7 9 6 9 3 1 1 4 4 4 9 8 0 2 5 9 5 5 0 4 4 1 7 6 7 5 0 8 5 2 6 9 1 9 6 6 0 7 1 2 3 0 7 0 0 2 1 8 4 1 2 5 2 9 4 2 2 7 1 4 5 2 0 8 5 2 1 2 8 6 6 8 3 8 1 0 0 4 2 6 4 1 0 5 0 9 7 7 7 3 8 9 6 6 9 5 0 8 1 5 7 8 7 2 3 0 1 9 1 9 0 3 5 4 4 3 9 3 6 1 3 1 0 1 7 3 4 0 6 7 8 7 6 4 3 4 4 5 6 5 3 8 3 7 6 9 3 8 8 0 0 2 9 3 8 1 9 3 5 3 3 0 0 7 5 2 6 4 6 4 7 9 5 0 1 9 7 8 8 2 8 0 0 1 6 8 2 0 2 7 1 5 0 5 7 5 6 4 3 3 8 5 3 2 8 5 5 0 0 0 8 5 9 3 5 9 3 5 1 6 5 3 3 4 8 4 1 1 7 8 7 9 1 9 5 3 2 2 5 8 3 6 4 5 0 9 7 4 2 6 6 1 9 3 1 2 6 6 0 6 8 6 5 4 5 7 3 2 6 4 0 5 7 4 6 3 2 9 3 8 0 1 7 4 4 5 4 8 5 1 4 8 0 7 0 7 9 8 7 9 1 8 1 0 1 5 3 0 4 1 6 0 0 8 3 5 9 1 2 2 5 9 4 9 3 1 0 8 4 1 6 4 7 5 8 3 6 0 6 4 7 7 4 0 0 8 5 4 5 0 7 4 5 0 0 7 7 8 6 7 9 8 0 7 3 5 0 4 1 8 5 7 1 5 7 8 1 2 2 2 1 2 7 4 6 4 1 4 1 8 7 4 5 8 1 8 9 9 8 3 8 9 9 8 6 7 7 5 2 8 5 7 8 7 3 2 7 1 8 9 5 2 5 9 2 2 6 8 7 6 1 0 4 3 9 7 1 2 1 9 4 8 4
1000
0 6 5 4 8 9 2 1 2 1 8 7 3 9 8 8 5 5 6 0 6 2 0 4 4 6 0 2 1 6 1 8 2 4 7 1 3 2 6 9 3 7 8 6 4 7 7 5 1 3 9 5 0 0 0 5 9 2 2 8 2 0 7 8 2 3 1 3 6 5 2 3 3 3 1 0 4 5 0 8 5 2 5 5 1 8 3 2 3 9 6 0 1 4 6 4 0 2 9 1 6 9 2 2 0 0 7 9 2 4 5 6 7 2 4 1 1 8 0 4 4 7 3 7 8 8 8 5 6 2 0 5 5 4 5 8 6 8 6 4 8 4 4 0 7 3 6 3 9 8 9 2 4 5 4 0 3 3 4 2 0 3 3 5 2 9 1 8 9 7 8 5 2 5 6 0 5 4 2 0 5 8 2 6 2 4 8 9 6 9 2 4 2 5 0 0 8 5 1 5 1 6 3 2 4 6 1 5 1 6 0 3 9 9 8 5 7 3 5 3 7 5 4 2 3 7 1 0 1 1 3 7 1 5 2 4 5 7 9 6 6 8 2 2 2 1 7 0 1 3 5 3 7 2 8 6 1 9 4 7 2 9 9 4 9 6 3 1 3 9 1 3 9 1 7 6 2 4 9 0 4 4 8 8 4 0 6 6 8 3 0 9 2 6 7 7 5 7 8 5 0 2 5 5 9 4 5 5 1 7 4 6 4 5 4 0 0 8 7 0 3 6 0 6 0 5 9 6 0 8 6 4 4 6 3 3 8 9 6 1 8 0 2 8 2 7 3 6 3 7 1 1 6 1 2 9 5 4 4 1 2 0 7 8 7 0 3 6 5 4 0 2 3 5 4 5 9 9 6 9 5 6 9 7 7 6 8 8 9 3 2 1 3 3 1 8 8 5 7 5 0 9 7 8 6 9 8 8 3 2 1 7 5 6 9 9 6 2 7 2 1 3 3 7 1 7 8 4 7 0 4 0 3 5 8 1 7 5 6 7 6 6 0 0 3 7 3 7 3 8 9 2 1 4 7 8 8 1 8 6 4 6 4 0 5 2 1 8 6 1 7 1 7 0 2 0 0 8 9 0 8 5 4 8 0 6 5 5 3 5 2 3 0 3 7 6 4 9 8 2 3 8 1 1 6 5 7 5 4 0 9 8 2 3 2 9 6 8 5 8 6 1 8 5 3 0 4 7 2 7 8 1 9 5 8 6 3 1 5 5 7 3 2 3 4 1 4 6 1 1 9 6 7 7 8 4 5 8 3 4 8 6 1 6 2 3 8 7 8 7 6 1 7 6 8 3 3 0 8 9 3 4 6 0 6 3 1 8 4 6 6 7 1 5 7 6 4 2 1 4 2 4 1 3 6 0 7 8 1 0 6 7 4 8 6 9 4 0 6 7 2 6 1 6 3 5 6 2 4 1 8 6 3 2 8 0 3 4 9 9 7 0 7 1 3 3 9 4 9 8 5 2 8 5 0 0 3 5 8 4 2 1 8 4 3 0 9 3 8 9 4 6 1 1 1 0 0 8 5 5 3 7 8 3 2 6 2 9 2 6 4 1 8 2 0 8 1 9 2 2 1 5 3 9 4 2 8 5 5 4 4 1 5 6 3 0 4 7 7 5 8 8 2 4 2 3 6 7 6 8 9 6 2 1 5 7 4 4 8 6 9 0 6 3 5 5 1 2 5 8 5 5 2 0 4 2 5 5 5 2 0 8 9 6 2 8 9 0 3 7 1 2 0 7 2 1 3 6 3 9 3 1 7 2 5 3 9 6 5 7 7 2 3 9 2 2 9 6 7 0 9 0 7 4 0 5 1 4 9 7 8 3 0 4 1 4 6 7 7 6 4 0 2 8 3 0 9 3 5 4 8 5 4 4 7 2 7 3 2 3 3 8 5 2 5 7 9 2 5 1 8 1 0 4 1 0 1 2 8 9 9 3 2 5 7 8 9 5 3 2 7 8 6 0 6 6 7 1 9 5 2 6 2 2 5 8 2 7 8 4 0 2 1 2 0 2 8 4 5 4 7 2 5 8 6 3 0 6 8 6 3 4 7 1 9 9 8 3 7 0 2 7 6 0 1 2 0 3 7 9 4 8 9 2 6 3 5 7 7 2 7 1 0 9 0 7 0 1 9 9 4 8 5 1 5 3 9 3 3 1 5 6 6 8 9 3 1 5 2 1 8 4 5 7 0 9 1 4 3 9 9 5 5 3 6 5 7 3 5 4 0 4 0 3 1 4 7 4 8 2
7 5 1 1 0 4 3 5 1 2 0 2 6 2 9 2 5 0 1 8 9 6 0 3 3 0 9 5 4 7 9 4 0 1 8 3 3 1 0 7 8 0 0 1 1 9 6 8 2 6 0 8 2 9 3 7 5 9 1 2 8 9 2 3 1 7 7 2 5 9 9 4 4 8 3 6 5 7 7 9 7 2 1 4 3 2 9 7 5 8 5 4 1 3 9 7 0 3 0 6 5 8 2 6 8 7 9 7 7 6 0 6 1 9 5 6 1 6 8 2 3 7 3 3 2 7 9 6 8 0 6 5 2 7 7 5 0 7 8 3 7 5 6 8 2 7 3 3 8 0 0 4 9 7 4 6 1 1 2 1 3 8 5 0 8 7 6 9 0 8 0 4 5 5 6 6 2 5 3 6 3 5 5 1 3 8 8 6 8 6 8 2 7 6 7 1 2 7 8 9 8 9 6 1 1 6 9 9 0 3 7 5 6 1 4 3 5 9 5 1 3 2 7 8 9 6 3 8 5 8 3 4 4 0 4 4 5 7 4 9 5 3 4 9 8 7 5 1 6 2 5 1 6 9 0 0 9 5 1 0 5 0 1 5 9 3 6 3 7 8 3 3 9 3 4 9 7 4 0 5 4 4 8 8 8 6 5 8 7 6 2 7 3 2 2 1 2 6 1 7 8 1 5 4 2 3 7 5 4 2 8 4 1 7 4 0 7 4 4 1 3 6 7 1 0 5 7 3 2 9 9 6 6 4 1 0 2 5 3 6 0 0 9 9 6 1 4 7 5 2 6 0 7 8 5 0 5 8 4 1 1 4 0 2 3 8 9 1 0 7 2 2 4 9 3 0 9 6 7 0 1 1 1 4 0 0 6 4 8 2 5 5 8 8 4 3 8 2 0 9 7 9 5 5 6 8 0 6 0 1 2 9 5 1 9 5 0 3 0 4 9 7 9 4 3 4 1 9 1 7 5 2 1 2 1 3 6 8 1 8 9 7 1 4 7 1 0 0 9 6 7 0 8 2 6 8 6 0 2 2 2 2 3 0 4 6 9 6 4 9 4 5 6 3 3 4 7 2 4 2 6 1 7 2 5 8 6 8 8 7 5 9 1 9 4 4 5 0 1 6 0 0 1 8 1 0 8 9 5 3 1 9 1 5 1 9 0 5 9 4 7 4 2 3 9 5 8 4 4 5 6 1 5 2 1 7 5 8 7 1 2 5 2 1 4 1 7 1 4 2 5 6 5 2 2 2 4 3 5 0 1 1 4 1 7 5 3 1 7 6 8 7 6 8 6 9 5 6 7 0 5 0 5 3 0 1 5 7 8 1 5 1 6 7 5 7 8 8 9 1 6 5 2 0 9 1 2 3 4 3 0 4 5 9 7 6 4 0 1 7 0 9 8 7 0 4 0 9 7 2 9 7 4 5 0 8 0 5 2 3 2 0 6 3 3 8 3 4 6 0 0 3 9 9 5 0 1 2 7 6 3 6 1 8 0 5 1 2 9 0 5 8 7 8 5 8 9 8 2 8 6 0 2 5 7 9 4 8 1 0 8 9 8 2 6 5 4 6 5 1 6 5 1 9 1 6 7 9 3 8 4 8 5 1 8 2 3 9 7 1 9 8 2 8 2 7 5 7 7 7 2 6 1 1 1 5 3 5 2 6 5 9 9 3 1 3 6 5 8 0 3 0 4 8 8 2 3 4 6 5 7 9 2 7 4 7 3 7 3 5 1 8 5 1 7 4 5 5 8 3 0 2 2 5 8 8 8 2 2 1 1 9 6 2 5 3 6 5 9 5 1 5 2 5 4 3 8 1 8 8 3 7 1 5 4 6 1 8 2 8 0 8 9 8 2 5 2 5 5 2 7 8 7 6 7 9 0 6 3 3 9 2 1 7 9 8 9 2 1 0 8 9 5 6 0 3 7 9 1 3 3 1 9 7 1 8 5 8 5 9 0 0 8 6 2 2 6 1 7 3 9 1 7 6 9 5 4 4 0 3 4 6 9 0 4 1 4 0 5 2 8 4 1 4 5 1 6 3 1 6 9 1 6 4 0 8 1 5 1 0 1 8 9 5 2 9 2 1 4 3 9 2 9 8 5 3 0 6 3 0 4 0 3 3 0 7 5 6 1 5 2 2 0 4 8 9 5 9 3 7 3 6 7 8 8 4 2 7 3 2 4 2 5 6 1 2 3 1 4 0 9 5 5 9 7 1 0 9 5 0 7 8 0 0 7 0 5 0 2 8
0
]]></test_input>
<test_output><![CDATA[YES
NO
NO
NO
NO
YES
YES
YES
YES
YES
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[考试排名]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">C++编程考试使用的实时提交系统，具有即时获得成绩排名的特点。它的功能是怎么实现的呢？  <br />
我们做好了题目的解答，提交之后，要么&ldquo;AC&rdquo;，要么错误，不管怎样错法，总是给你记上一笔，表明你曾经有过一次错误提交，因而当你一旦提交该题 &ldquo;AC&rdquo;后，就要与你算一算帐了，总共该题错误提交了几回。虽然你在题数上，大步地跃上了一个台阶，但是在耗时上要摊上你共花去的时间。特别是，曾经有过 的错误提交，每次都要摊上一定的单位时间分。这样一来，你在做出的题数上，可能领先别人很多，但是，在做出同样题数的人群中，你可能会在耗时上处于排名的 劣势。  <br />
例如：某次考试一共8题（A，B，C，D，E，F，G，H），每个人做的题都在对应的题号下有个数量标记，负数表示该学生在该题上有过的错误提交 次数，但到现在还没有AC，正数表示AC所耗的时间，如果正数a跟上一对括号，里面有个整数b，那就表示该学生提交该题AC了，耗去了时间a，同时，曾经 错误提交了b次，因此对于下述输入数据：  <br />
name A B C D E F G H  <br />
Smith -1 -16 8 0 0 120 39 0  <br />
John 116 -2 11 0 0 82 55(1) 0  <br />
Jose 72(3) 126 10 -3 0 47 21(2) -2  <br />
Bush 0 -1 -8 0 0 0 0 0  <br />
Alice -2 67(2) 13 -1 0 133 79(1) -1  <br />
Bob 0 0 57(5) 0 0 168 -7 0  <br />
若每次错误提交的罚分为20分，则其排名从高到低应该是这样的：  <br />
Jose 5 376  <br />
John 4 284  <br />
Alice 4 352  <br />
Smith 3 167  <br />
Bob 2 325  <br />
Bush 0 0 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据的第一行是考试题数n（1&le;n&le;12）以及单位罚分数 m（10&le;m&le;20），每行数据描述一个学生的用户名（不多于10个字符的字串）以及对所有n道题的答题现状，其描述采用问题描述中的数量标记的格式，见 上面的表格，提交次数总是小于100，AC所耗时间总是小于1000。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">将这些学生的考试现状，输出一个实时排名。实时排名显然先按AC题数的多 少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字（10个字符宽），做出 的题数（2个字符宽，右对齐）和时间分（4个字符宽，右对齐）。名字、题数和时间分相互之间有一个空格。</font></p>]]></output>
<sample_input><![CDATA[8 20
Smith     -1      -16     8       0      0      120     39      0
John      116     -2      11      0      0      82      55(1)   0
Josephus  72(3)   126     10      -3     0      47      21(2)   -2
Bush      0       -1      -8      0      0      0       0       0
Alice     -2      67(2)   13      -1     0      133     79(1)   -1
Bob       0       0       57(5)   0      0      168     -7      0]]></sample_input>
<sample_output><![CDATA[Josephus    5  376
John        4  284
Alice       4  352
Smith       3  167
Bob         2  325
Bush        0    0]]></sample_output>
<test_input><![CDATA[8 20
Smith     -1      -16     8       0      0      120     39      0
John      116     -2      11      0      0      82      55(1)   0
Josephus  72(3)   126     10      -3     0      47      21(2)   -2
Bush      0       -1      -8      0      0      0       0       0
Alice     -2      67(2)   13      -1     0      133     79(1)   -1
Bob       0       0       57(5)   0      0      168     -7      0
Ofelia    -3      -8     180       0      0      999     28      0
Hermione  72(3)   126     10      -3     0      47      21(2)   -2
Gyllenhaal -2      67(2)   13      -1     0      133     79(1)   -1]]></test_input>
<test_output><![CDATA[Hermione    5  376
Josephus    5  376
John        4  284
Alice       4  352
Gyllenhaal  4  352
Smith       3  167
Ofelia      3 1207
Bob         2  325
Bush        0    0
]]></test_output>
<test_input><![CDATA[8 20
Smith     -1      -16     8       0      0      120     39      0
John      116     -2      11      0      0      82      55(1)   0
Josephus  72(3)   126     10      -3     0      47      21(2)   -2
Bush      0       -1      -8      0      0      0       0       0
Alice     -2      67(2)   13      -1     0      133     79(1)   -1
Bob       0       0       57(5)   0      0      168     -7      0
Ofelia    -3      -8     180       0      0      999     28      0
Hermione  72(3)   126     10      -3     0      47      21(2)   -2
Gyllenhaal -2      67(2)   13      -1     0      133     79(1)   -1]]></test_input>
<test_output><![CDATA[Hermione    5  376
Josephus    5  376
John        4  284
Alice       4  352
Gyllenhaal  4  352
Smith       3  167
Ofelia      3 1207
Bob         2  325
Bush        0    0
]]></test_output>
<test_input><![CDATA[12 10
Smith     -1      -16     8       0      0      120     39      0    120    -1      -16     8    
John      116     -2      11      0      0      82      55(1)   0   82     116     -2      11   
Josephus  72(3)   126     10      -3     0      47      21(2)   -2   47     72(3)   126     10   
Bush      0       -1      -8      0      0      0       0       0   0      0       -1      -8   
Alice     -2      67(2)   13      -1     0      133     79(1)   -1   133    -2      67(2)   13   
Bob       0       0       57(5)   0      0      168     -7      0   168    0       0       57(5)
Ofelia    -3      -8     180       0      0      999     28      0    999   -3      -8     180   
Hermione  72(3)   126     10      -3     0      47      21(2)   -2   47     72(3)   126     10 
Gyllenhaal -2      67(2)   13      -1     0      133     79(1)   -1    133    -2      67(2)   13]]></test_input>
<test_output><![CDATA[Hermione    9  611
Josephus    9  611
John        7  483
Alice       7  555
Gyllenhaal  7  555
Smith       5  295
Ofelia      5 2386
Bob         4  550
Bush        0    0
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[能量项链]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有 N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标 记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗 能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m， 尾标记为n。  <br />
需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。  <br />
例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：  <br />
(4◎1)=10*2*3=60。  <br />
这一串项链可以得到最优值的一个聚合顺序所释放的总能量为  <br />
((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行 是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗 珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。  <br />
至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。  </font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量</font></p>]]></output>
<sample_input><![CDATA[4
2  3  5  10]]></sample_input>
<sample_output><![CDATA[710]]></sample_output>
<test_input><![CDATA[7
23 17 212 113 71 301 33 ]]></test_input>
<test_output><![CDATA[31182687
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[诡秘的余数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">不可否认，小强是一名数学天才，大家都这么说。天才小强的两大最新发现如下：（1） 正整数n除3的余数，等价于，正整数n的各位数字之和除3的余数；（2） 正整数n除9的余数可以通过这样的方法来计算：计算n 的各位数之和，设为m，如果m已经是一位数，那么余数就是m；否则设n=m，重新进行计算n的各位数之和m，直到m是一个一位数。但是，正整数除1，2，4，5，6，7，8，也存在类似的性质吗？这真是一个难题啊！小强想睡觉了，不去管了。现在请你计算一下正整数n除一位数m的余数。文件中有一些数对，一为大整数（可能大到100位）n，另一为一位数m（&gt;0）。求其n除以m的余数。</font></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[23 7
123 9]]></sample_input>
<sample_output><![CDATA[2
6]]></sample_output>
<test_input><![CDATA[78648 3
34586790 9
123456789876655456787665566554554445545356343 1
123456789876655456787665566554554445545356343 2
123456789876655456787665566554554445545356343 3
123456789876655456787665566554554445545356343 4
123456789876655456787665566554554445545356343 5
123456789876655456787665566554554445545356343 6
123456789876655456787665566554554445545356343 7
123456789876655456787665566554554445545356343 8
123456789876655456787665566554554445545356343 9
]]></test_input>
<test_output><![CDATA[0
6
0
1
1
3
3
1
1
7
7
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[超级楼梯]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？ </font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每个测试实例，请输出不同走法的数量 </font></p>]]></output>
<sample_input><![CDATA[2
2
3

]]></sample_input>
<sample_output><![CDATA[1
2

]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[连续自然数和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">对一个给定的自然数M，求出所有的连续的自然数段（连续个数大于1），这些连续的自然数段中的全部数之和为M。  <br />
例子：1998+1999+2000+2001+2002 = 10000，所以从1998到2002的一个自然数段为M=10000的一个解。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">包含一个整数的单独一行给出M的值（10 &lt;= M &lt;= 2,000,000）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">每行两个自然数，给出一个满足条件的连续自然数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。</font></p>]]></output>
<sample_input><![CDATA[10000

21334

2000000]]></sample_input>
<sample_output><![CDATA[18 142 
297 328 
388 412 
1998 2002

5332 5335

923 2202
2888 3512
7685 7940
15938 16062
79988 80012
399998 400002]]></sample_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[送分题素数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">输出100-&gt;200之间的素数的个数，以及所有的素数。</span></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[<p><span style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; " class="Apple-style-span">100-&gt;200之间的素数的个数，以及所有的素数。</span></p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[21
101 103 ... 197 199]]></sample_output>
<test_input><![CDATA[]]></test_input>
<test_output><![CDATA[21
101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[逆反的01串]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">Fans是个ACM程序设计迷。有时侯，他表现出很强烈的逆反心理，你往东，他往西，你往南，他偏往北。这一次，不知道又是谁惹着他了，好端端的一个个01串，到了他的手里，都变成10串了。请你编个程序来模仿他的行为，将01串（长度&le;200），全变成10串吧。</font></p>]]></description>
<input><![CDATA[<pre><font><font size="3" face="Times New Roman">0110100100100 1000000010000000000</font></font></pre>]]></input> 
<output><![CDATA[<pre><font><font size="3" face="Times New Roman">1001011011011 0111111101111111111</font></font></pre>]]></output>
<sample_input><![CDATA[0110100100100
1000000010000000000]]></sample_input>
<sample_output><![CDATA[1001011011011
0111111101111111111]]></sample_output>
<test_input><![CDATA[1010000100101010010010100101001001001010101001111111110000000000110100100100
11111111111110000000010100000000011111111110000111111100000000
011111111111111110000001001010000000001111111111101001010010010010
000000000000000000000000000000011111111111111111
011010010010000000000000000000011111111
100000001000000000000100100000000000000000000111
]]></test_input>
<test_output><![CDATA[0101111011010101101101011010110110110101010110000000001111111111001011011011
00000000000001111111101011111111100000000001111000000011111111
100000000000000001111110110101111111110000000000010110101101101101
111111111111111111111111111111100000000000000000
100101101101111111111111111111100000000
011111110111111111111011011111111111111111111000
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[速算24点]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">速算24点相信绝大多数人都玩过。就是随机给你四张牌，包括 A(1),2,3,4,5,6,7,8,9,10,J(11),Q(12),K(13)。要求只用'+','-','*','/'运算符以及括号改变运算 顺序，使得最终运算结果为24(每个数必须且仅能用一次)。游戏很简单，但遇到无解的情况往往让人很郁闷。你的任务就是针对每一组随机产生的四张牌，判断 是否有解。我们另外规定，整个计算过程中都不能出现小数。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据占一行，给定四张牌。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">如果有解则输出&quot;Y&quot;，无解则输出&quot;N&quot;。</font></p>]]></output>
<sample_input><![CDATA[A 2 3 6]]></sample_input>
<sample_output><![CDATA[Y]]></sample_output>
<test_input><![CDATA[1 2 2 4]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<test_input><![CDATA[9 5 2 1]]></test_input>
<test_output><![CDATA[Y]]></test_output>
<test_input><![CDATA[1 1 2 2]]></test_input>
<test_output><![CDATA[N]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[邮局选址问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font face="Times New Roman">问题描述： <br />
在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 <br />
居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 <br />
编程任务： <br />
给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。 </font></p>]]></description>
<input><![CDATA[<p><font face="Times New Roman">第1 行是居民点数n，1<n></n>&lt;10000。&lt; 个整数x 行是居民点的位置，每行2&gt;</font></p>]]></input> 
<output><![CDATA[<p><font face="Times New Roman">n个居民点到邮局的距离总和的最小值。</font></p>]]></output>
<sample_input><![CDATA[5
1 2
2 2
1 3
3 -2
3 3
]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
<test_input><![CDATA[3
-4 -3
-4 5
5 2
]]></test_input>
<test_output><![CDATA[17]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[金明的预算方案]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">　金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专 用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做 预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />
<br />
主件 	附件  <br />
电脑 	打印机，扫描仪  <br />
书柜 	图书  <br />
书桌 	台灯，文具  <br />
工作椅 	无  <br />
<br />
如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />
设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />
v[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />
请你帮助金明设计一个满足要求的购物单。  </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">第1行，为两个正整数，用一个空格隔开：  <br />
N m  <br />
（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />
从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />
v p q  <br />
（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>]]></output>
<sample_input><![CDATA[1000 5
800 2 0
400 5 1
300 5 1
400 3 0
500 2 0]]></sample_input>
<sample_output><![CDATA[2200]]></sample_output>
<test_input><![CDATA[1500 7
500 1 0
400 4 0
300 5 1
400 5 1
200 5 0
500 4 0
400 4 0]]></test_input>
<test_output><![CDATA[6200
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
</item>
<item>
<title><![CDATA[防御导弹]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">整数M。表示：这套系统最多能拦截 M 枚导弹.</font></p>]]></output>
<sample_input><![CDATA[300 250 275 252 200 138 245]]></sample_input>
<sample_output><![CDATA[5]]></sample_output>
<test_input><![CDATA[700 651 762 658 774 600 554 257 300 221 137]]></test_input>
<test_output><![CDATA[7]]></test_output>
<test_input><![CDATA[600 500 400 300 200 100 200 100 210 59]]></test_input>
<test_output><![CDATA[8]]></test_output>
<test_input><![CDATA[300 250 275 252 200 138 245]]></test_input>
<test_output><![CDATA[5]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
<item>
<title><![CDATA[青年歌手大奖赛_评委会打分]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉一个最高分和一个最低分，然后计算平均得分，请编程输出某选手的得分</font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">输入数据有多组，每组占一行，每行的第一个数是n(2＜n＜100)，表示评委的人数，然后是n个评委的打分。</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">对于每组输入数据，输出选手的得分，结果保留2位小数，每组输出占一行。</font></p>]]></output>
<sample_input><![CDATA[3 99 98 97
4 100 99 98 97]]></sample_input>
<sample_output><![CDATA[98.00
98.50]]></sample_output>
<test_input><![CDATA[5 88 96 93 91 90]]></test_input>
<test_output><![CDATA[91.33]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件服务外包学院]]></source>
</item>
<item>
<title><![CDATA[马拦过河卒]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><font size="3" face="Times New Roman">棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为&ldquo;马拦过河卒&rdquo;。  <br />
棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过15的整数)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。 </font></p>]]></description>
<input><![CDATA[<p><font size="3" face="Times New Roman">一行四个数据，分别表示B点坐标和马的坐标。（保证所有的数据有解）</font></p>]]></input> 
<output><![CDATA[<p><font size="3" face="Times New Roman">一个数据，表示所有的路径条数。</font></p>]]></output>
<sample_input><![CDATA[6 6 3 3]]></sample_input>
<sample_output><![CDATA[6]]></sample_output>
<test_input><![CDATA[12	12	5	6]]></test_input>
<test_output><![CDATA[235597]]></test_output>
<test_input><![CDATA[8	7	3	4]]></test_input>
<test_output><![CDATA[373]]></test_output>
<test_input><![CDATA[12	10	5	4]]></test_input>
<test_output><![CDATA[30912]]></test_output>
<test_input><![CDATA[13	12	6	8]]></test_input>
<test_output><![CDATA[1157745]]></test_output>
<test_input><![CDATA[10	9	4	4]]></test_input>
<test_output><![CDATA[3401]]></test_output>
<test_input><![CDATA[14	15	5	6]]></test_input>
<test_output><![CDATA[7149564]]></test_output>
<test_input><![CDATA[15	15	4	4]]></test_input>
<test_output><![CDATA[9062088]]></test_output>
<test_input><![CDATA[6	7	3	4]]></test_input>
<test_output><![CDATA[20]]></test_output>
<test_input><![CDATA[6	6	3	3]]></test_input>
<test_output><![CDATA[6]]></test_output>
<test_input><![CDATA[5	6	2	2]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[8	8	4	4]]></test_input>
<test_output><![CDATA[278]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[吉首大学软件学院]]></source>
</item>
</fps>