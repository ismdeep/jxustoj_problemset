<?xml version="1.0" encoding="UTF-8"?> 
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[The 3n + 1 problem]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>

<img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1865_1.gif]]></src><base64><![CDATA[R0lGODlhXwAZAIAAAAAAAP///yH5BAEAAAEALAAAAABfABkAAAKWjI+py50AnZyP2tti0BhD3oUUB3aAdYqbmqWbG8IOrJWKzC5gjd/oceK1cjPay2CrjIAfZO9I1H1cU6fk6WMCGdOu99uckKhScHKlhUqjWav7jMAq38EyO07NW+XyuB+JtnbnpkbW17dFGMY1SJf2cijWFdPIhHhVman5t9np+QkaKjpKWmp6ipqqusra6voKGys721EAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1865_2.gif]]></src><base64><![CDATA[R0lGODlhSgAbAIAAAAAAAP///yH5BAEAAAEALAAAAABKABsAAAKCjI+py+0Onpy0LhANzrb7mWEa95Wmhh6iR54dtwbiGjetK4d3mquzDtmZIrRbDbHZjGzCobKXEBZVzKT1ipXCLhcYkIlTTKNG0lTbLJ2RrRiRmj7itmYj25uWhX2+Otn6kbdHNVhoIWeY2KXIaNP4KAYpOUlZaXmJmam5ydnp+QlaAAA7]]></base64></img><description><![CDATA[<p>Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive).  In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.</p>
<p></p>
<p>Consider the following algorithm:</p>
<pre><tt> <br />		1. 		 input <i>n</i><br /></tt><p><br /><tt>		2. 		 print <i>n</i><br /></tt></p><p><br /><tt>		3. 		 if <i>n</i> = 1 then STOP<br /></tt></p><p><br /><tt>		4. 		 		 if <i>n</i> is odd then  <img width="95" height="25" src="http://127.1:80/web/admin/../upload/pimg1865_1.gif" alt="tex2html_wrap_inline44" /> <br /></tt></p><p><br /><tt>		5. 		 		 else  <img width="74" height="27" src="http://127.1:80/web/admin/../upload/pimg1865_2.gif" alt="tex2html_wrap_inline46" /> <br /></tt></p><p><br /><tt>		6. 		 GOTO 2<br /></tt></p><p></p></pre>
<p>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1</p>
<p>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value.  Despite the simplicity of the algorithm, it is unknown whether this conjecture is true.  It has been verified, however, for all integers <i>n</i> such that 0 &lt; <i>n</i> &lt; 1,000,000 (and, in fact, for many more numbers than this.)</p>
<p>Given an input <i>n</i>, it is possible to determine the number of numbers printed (including  the 1).  For a given <i>n</i> this is called the <em>cycle-length</em> of <i>n</i>.  In the example above, the cycle length of 22 is 16.</p>
<p>For any two numbers <i>i</i> and <i>j</i> you are to determine the maximum cycle length over all numbers between <u> <i>i</i> and <i>j</i>. </u></p>]]></description>
<input><![CDATA[<p>The input will consist of a series of pairs of integers <i>i</i> and <i>j</i>, one pair of integers per line.  All integers will be less than 1,000,000 and greater than 0.</p>
<p>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including <i>i</i> and <i>j</i>.</p>]]></input> 
<output><![CDATA[<p>For each pair of input integers <i>i</i> and <i>j</i> you should output <i>i</i>, <i>j</i>, and the maximum cycle length for integers between and including <i>i</i> and <i>j</i>.  These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input.  The integers <i>i</i> and <i>j</i> must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).</p>]]></output>
<sample_input><![CDATA[1 10
100 200
201 210
900 1000
]]></sample_input>
<sample_output><![CDATA[1 10 20
100 200 125
201 210 89
900 1000 174
]]></sample_output>
<test_input><![CDATA[20 20
9999 9999
1 9999
340 3000
3000 340
500 101
1 1
9999 9998
]]></test_input>
<test_output><![CDATA[20 20 8
9999 9999 92
1 9999 262
340 3000 217
3000 340 217
500 101 144
1 1 1
9999 9998 92
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[www.csie.nctu.edu.tw]]></source>
</item>
<item>
<title><![CDATA[The Blocks Problem]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>

<img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1866_1.gif]]></src><base64><![CDATA[R0lGODlhagAfAOMAAAAAAJmZmXd3d1VVVe7u7jMzM8zMzBEREaqqqoiIiGZmZv///0RERN3d3SIiIru7uyH5BAEAAAsALAAAAABqAB8AQAT+cMlJq7046827pwHwTIyDGUwRdM8gcEjBIFqiPE0iCMS3CQANISAw+DiP3kcwwBAaE0LySK1ar9gs5bFLKD/QDFFL1jQUmNBIUtIIHIPvSXQhvHkfR0KCAIS1QGWCg4SFhoeIiYpYBy8SADQbBgMHkWUtixaBF0BrCwxBFQ8HCn8/AX0YLQWWbgEPAEYLBY6AoRcOjgR0HEOkGAxFTRkECY2mFn1KkAZotlgIDNLT08OZ19jZ2tvc3d7f4OHi4wsxPQEMHw8KBRoDzuRbCg63FQaQEwXWFw0DBXuCJrHatkkTr0/1JPRz0EpInIT2UjS0QOAGAAZQVJQpWKETCYhsEhLoQ3bBAAEG+yaEmJjBpIB2CxocnBCNGrWUFDhSkAlwwS8hCXKRnPCmmBNjAoba48UATU8sOnc6SKKglgdZFt4xkJMhaFIMCtJJaBQnC5cCAKoq3SDlgdu3brHGm0u3rt27ePPq3cu375UIADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1866_2.gif]]></src><base64><![CDATA[R0lGODlhsQE0AIAAAAAAAP///yH5BAEAAAEALAAAAACxATQAQAL+jI+py+0Po5y02ouz3rx7DoTiSJbmiabkxxph670wCMydbGt4zkt7PxkBM79hpGh8IJOOJZPhfPKiUpcoVgtQfdnbZxu8bsAUoa77RWPI1XSPbYU3u/JFHao+s+4KPhTh5wdoMpZXUWK3koDYUidDJWfWpmQ4eSCYg5lZaWnVOaQJI/lJWmp6OsWJqoc62qo6GSoKG0vbJrs6uOp6irtnK+X7m6sFTMy1K5YrjLVs/MTcfCzdq8zqWUhNQy0YXXy9reldbfEIG2n96rze+IxHjMm4qDjIu/06fq+eDO+elF8K4AUVBAsaPIgwocKFDBs6fAgxosNpbvD5+3cRiMD+gRk1dnzzkeKlkDPsBSRZEuWsfixFZrN4bGM5le1a8nMJ7qRMjuz23fyJkydMm+SAFjUatAzNBu5MltP1Up/Ua92WmusoLJ3QpDOV1nCKLUyoHeJU4mIWb+nIj7LMTeWK7FCWq2Sbal3zYqxZmm3lbb0xN5Dab1Hx0lvritCwoT2POn5sametZJLlNo48WBtkuBAqH7l78nJo0aM5h6EsMbXq1axbu34Nm6Fpr7Fr276NO7fu3bZn0+ZdMGbmt6Q8x0Xq+x1j5J+Mdx5OvDh0zKiFk24+PSf15M+rE93uM/xm7vO8X+/knNJ38OSVV0vfnTn67ETo420/x7x8S/D+mdr/Ox5+hL33H4ClBTjfegKGhVl/+e032XkJLthHgWJZaBmEt2B4moTtOVjhWaB1pWEVICai4ILjgJVIXyNFR1tF96S1WFUrFUYhgynJpRdU2t2nWX0vClnRiPHFMCCROQ4plo4V8ohSXTBmCNgsbA1m5GdfOEniklyqR9hh6PTIpJI4/oimUjZk+SAIZQJ5hhMmsQhnh5DY5eKXalYZpJJXLpYklTKaydFhcSTmF59cnNAim4gBOuWijh5ZiKGC0kBnm4BN6l+lvCiGGKfHNchhh+IdiCB/JFl6qCGsnondiSiWGEypWnpInqyPpjjhqaiyt6Suh1pHKzS2Upozaq7H+iesj8mauKymzybXbKYb4gotr716Wa2oXn4LrqLcRtsocOaei2666qIQbjHrllAAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/101img4.gif]]></src><base64><![CDATA[R0lGODlhTAAfAOMAAAAAAJmZmXd3d1VVVe7u7jMzM8zMzBEREaqqqoiIiGZmZv///0RERN3d3SIiIru7uyH5BAEAAAsALAAAAABMAB8AQAT+cMlJq704681XAM/EOJnBFAH3DEKHFAySJcrTJIJAYEQgGJ3g4rETLgSDC6ExIRCN0Kg0+MglikYmxjeVfkKS0UbgGGAvBhCPrAs6EhIEQNut2+/4vH7PxxxaEgAyHAYDB4N5K10CamEAFw8HCnQaAgFyGSsFiBmWDwBACwWAFQ6ABI0cPZIXDD9JGgQJf5QVckWCBgpTCAy+v7+wfcPExcbHyMnKy8zNEy87AQxGDwoFGQO7ymmIBcIYDQMFcHqFm4upDI8W4Q6cGQRm6yUn7xUENQAMTCgWjGAL1M3wVsuCAQIMvlH4YA/DQQHXFjRINWEiuQWsNsgyVVACGVk48GYJ6EghDRgGuy5WdEBEASkhoSpkY3BGQwKOFxRMk/DHzBQnD4IKDRrTmdGjSJMqXcq0qdNjEQAAOw==]]></base64></img><description><![CDATA[<p>Many areas of Computer Science use simple, abstract domains  for both analytical and empirical studies.  For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks.</p>
<p>In this problem you will model a simple block world under certain rules and constraints.  Rather than determine how to achieve a specified state, you will ``program'' a robotic arm to respond to a limited set of commands.</p>
<p>The problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table.  Initially there are <i>n</i> blocks on the table (numbered from 0 to <i>n</i>-1) with block <i>b</i><sub><i>i</i></sub> adjacent to block <i>b</i><sub><i>i</i>+1</sub> for all   <img border="0" width="106" height="31" src="http://127.1:80/web/admin/../upload/pimg1866_1.gif" alt="$0 \leq i &lt; n-1$" /> as shown in the diagram below:</p>
<div align="CENTER"><a name="74">&nbsp;</a>
<table width="50%">
    <tbody>
        <tr>
            <td><img width="433" height="52" src="http://127.1:80/web/admin/../upload/pimg1866_2.gif" alt="\begin{figure} \centering \setlength{\unitlength}{0.0125in} % \begin{picture} (2... ...raisebox{0pt}[0pt][0pt]{$\bullet \bullet \bullet$ }}} \end{picture} \end{figure}" /></td>
        </tr>
    </tbody>
</table>
<strong>Figure:</strong> Initial Blocks World</div>
<p></p>
<p>The valid commands for the robot arm that manipulates blocks are:</p>
<ul>
    <li>move <i>a</i> onto <i>b</i>
    <p>where <i>a</i> and <i>b</i> are block numbers, puts block <i>a</i> onto block <i>b</i> after returning any blocks that are stacked on top of blocks <i>a</i> and <i>b</i> to their initial positions.</p>
    <p></p>
    </li>
    <li>move <i>a</i> over <i>b</i>
    <p>where <i>a</i> and <i>b</i> are block numbers, puts block <i>a</i> onto the top of the stack containing block <i>b</i>, after returning any blocks that are stacked on top of block <i>a</i> to their initial positions.</p>
    <p></p>
    </li>
    <li>pile <i>a</i> onto <i>b</i>
    <p>where <i>a</i> and <i>b</i> are block numbers, moves the pile of blocks consisting of block <i>a</i>,  and any blocks that are stacked above block <i>a</i>, onto block <i>b</i>.  All blocks on top of block <i>b</i> are moved to their initial positions prior to the pile taking place.  The blocks stacked above block <i>a</i> retain their order when moved.</p>
    <p></p>
    </li>
    <li>pile <i>a</i> over <i>b</i>
    <p>where <i>a</i> and <i>b</i> are block numbers, puts the pile of blocks consisting of block <i>a</i>, and any blocks that are stacked above  block <i>a</i>, onto the top of the stack containing block <i>b</i>.  The blocks stacked above block <i>a</i> retain their original order when moved.</p>
    <p></p>
    </li>
    <li>quit
    <p>terminates manipulations in the block world.</p>
    </li>
</ul>
<p>Any command in which <i>a</i> = <i>b</i> or in which <i>a</i> and <i>b</i> are in the same stack of blocks is an illegal command.  All illegal commands should be ignored and should have no affect on the configuration of blocks.</p>]]></description>
<input><![CDATA[<p>The input begins with an integer <i>n</i> on a line by itself representing the number of blocks in the block world.  You may assume that   0 &lt; <i>n</i> &lt; 25.</p>
<p>The number of blocks is followed by a sequence of block commands, one command per line.  Your program should process all commands until the <tt>quit</tt> command is encountered.</p>
<p>You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands.</p>]]></input> 
<output><![CDATA[<p>The output should consist of the final state of the blocks world.  Each original block position numbered <i>i</i>  (  <img border="0" width="76" height="31" alt="$0 \leq i &lt; n$" src="http://127.1:80/web/upload/201012/101img4.gif" /> where <i>n</i> is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of  blocks that appear stacked in that position with each block number  separated from other block numbers by a space. Don't put any trailing  spaces on a line.</p>
<p>There should be one line of output for each block position (i.e., <i>n</i> lines of output where <i>n</i> is the  integer on the first line of input).</p>]]></output>
<sample_input><![CDATA[10
move 9 onto 1
move 8 over 1
move 7 over 1
move 6 over 1
pile 8 over 6
pile 8 over 5
move 2 over 1
move 4 over 9
quit
]]></sample_input>
<sample_output><![CDATA[ 0: 0
 1: 1 9 2 4
 2:
 3: 3
 4:
 5: 5 8 7 6
 6:
 7:
 8:
 9:
]]></sample_output>
<test_input><![CDATA[21
move 2 onto 1
move 3 onto 2
move 4 onto 3
move 5 over 1
pile 1 over 10
move 9 over 8
move 11 over 8
pile 3 over 8
pile 8 over 3
move 20 over 19
pile 19 over 18
pile 18 onto 15
move 15 over 3
pile 20 onto 19
pile 19 onto 18
pile 18 over 17
quit]]></test_input>
<test_output><![CDATA[ 0:  0
 1: 
 2: 
 3: 
 4: 
 5: 
 6:  6
 7:  7
 8:  8 9 11 3 4 5 15
 9: 
10:  10 1 2
11: 
12:  12
13:  13
14:  14
15: 
16:  16
17:  17 18 19 20
18: 
19: 
20: 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[www.csie.nctu.edu.tw]]></source>
</item>
<item>
<title><![CDATA[Ecological Bin Packing]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>Bin packing, or the placement of objects of certain weights into different bins subject to certain constraints, is an historically interesting problem.  Some bin packing problems are NP-complete but are amenable to dynamic programming solutions or to approximately optimal heuristic solutions.</p>
<p>In this problem you will be solving a bin packing problem that deals with recycling glass.</p>
<p>Recycling glass requires that the glass be separated by color into one of three categories: brown glass, green glass, and clear glass.  In this problem you will be given three recycling bins, each containing a specified number of brown, green and clear bottles.  In order to be recycled, the bottles will need to be moved so that each bin contains bottles of only one color.</p>
<p>The problem is to minimize the number of bottles that are moved.  You may assume that the only problem is to minimize the number of movements between boxes.</p>
<p>For the purposes of this problem, each bin has infinite capacity and the only constraint is moving the bottles so that each bin contains bottles of a single color. The total number of bottles will never exceed 2^31.</p>]]></description>
<input><![CDATA[<p>The input consists of a series of lines with each line containing 9 integers.  The first three integers on a line represent the number of brown, green, and clear bottles (respectively) in bin number 1, the second three represent the number of brown, green and clear bottles (respectively) in bin number 2, and the last three integers represent the number of brown, green, and clear bottles (respectively) in bin number 3.  For example, the line 10 15 20 30 12 8 15 8 31</p>
<p>indicates that there are 20 clear bottles in bin 1, 12 green bottles in bin 2, and 15 brown bottles in bin 3.</p>
<p>Integers on a line will be separated by one or more spaces.  Your program should process all lines in the input file.</p>]]></input> 
<output><![CDATA[<p>For each line of input there will be one line of output indicating what color bottles go in what bin to minimize the number of bottle movements. You should also print the minimum number of bottle movements.</p>
<p>The output should consist of a string of the three upper case characters 'G', 'B', 'C' (representing the colors green, brown, and clear) representing the color associated with each bin.</p>
<p>The first character of the string represents the color associated with the first bin, the second character of the string represents the color associated with the second bin, and the third character represents the color associated with the third bin.</p>
<p>The integer indicating the minimum number of bottle movements should follow the string.</p>
<p>If more than one order of brown, green, and clear bins yields the minimum number of movements then the alphabetically first string representing a minimal configuration should be printed.</p>]]></output>
<sample_input><![CDATA[1 2 3 4 5 6 7 8 9
5 10 5 20 10 5 10 20 10]]></sample_input>
<sample_output><![CDATA[BCG 30
CBG 50]]></sample_output>
<test_input><![CDATA[1 2 3 4 5 6 7 8 9
1000 200 1500 350 5000 1000 1000 2000 13000
5 10 5 20 10 5 10 20 10
60 20 1000 1000 60 20 10000 20 500
20 1000 50 2000 50 500 1500 20 3000
20 1000 50 2000 50 5000 1500 20 300
]]></test_input>
<test_output><![CDATA[BCG 30
BGC 6050
CBG 50
CGB 1620
GBC 2140
GCB 2440
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[www.csie.nctu.edu.tw]]></source>
</item>
<item>
<title><![CDATA[Stacking Boxes]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>

<img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_1.gif]]></src><base64><![CDATA[R0lGODlhRAAYAIAAAAAAAP///yH5BAEAAAEALAAAAABEABgAAAKIjA2ny42QnJQwLjtzgE/rumGh9ykc6ZybqTIi0qgt7KaWvNrXG0b8PDvIfDSKcFLhHYuxW+KkFD6jvaB0RHHmtkgqJ9n9TJPkrpeVpbpE6m+UrbNeO6YwvTbf5df36o/917eHxSdnhNek9JOG0uj4CBkpOUlZaXmJmam5ydnp+QkaKjpKWhpaAAA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_2.gif]]></src><base64><![CDATA[R0lGODlhWwAZAIAAAAAAAP///yH5BAEAAAEALAAAAABbABkAAAKnhBGpy3vYopx0vmoqzbp7zW3Q54zkSYaWearoi7ER4nq0DOfKvfJpVtPBDoFgEWJcJZLC33IU4kRxDCmS2Gxdd1CuF/PdZj/Q7u5ZBqGXzzF5zS7Kj6V6tV0Vl1hYrqmmJ/fQhwfnJzPF50J49LdIyDiDaEPj4HYGEpl3ZxM3d0nVgCTSF5pXeukJRpeiYzqUGis7S1tre4ubq7vL2+v7CxwsPEwMUwAAOw==]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_3.gif]]></src><base64><![CDATA[R0lGODlhCwAZAIAAAAAAAP///yH5BAEAAAEALAAAAAALABkAAAIlhBGpaevtFIwBTdluRRvDeWAP81mkeHDVSnWtSWntTNf2jed4AQA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_4.gif]]></src><base64><![CDATA[R0lGODlhHAAaAIAAAAAAAP///yH5BAEAAAEALAAAAAAcABoAAAJIhBGpy73mokxw2oeuRlXHE3QeU3XilpmZcoYpuzptSZVx3dAunN+7awrBDiCcREVUTTgkXwvTaxY9zxHUis1qt9yu9wsOixUFADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_5.gif]]></src><base64><![CDATA[R0lGODlhSwAbAIAAAAAAAP///yH5BAEAAAEALAAAAABLABsAAAKSjI+py+2fgJKwIkCtw/lgw3UVt4na8k2d2ZDni7IpaM1w2dpXxkZ6XvvtQKJZj3icBIS7JHG5XPFyzFjVBXHZjA9stuf9gqcj55MRBgq5weTHXfVI3j7PK/00x6P84jxkdoGGp8KUErZ3oxgVqLT4CKnSBkgYedJomTmoyQmD2QkaKjpKWmp6ipqqusra6vpKWgAAOw==]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/103img6.gif]]></src><base64><![CDATA[R0lGODlhYAAZAIAAAAAAAP///yH5BAEAAAEALAAAAABgABkAAAKojA15y70JnJy0OmhRzFPxD16bNYaPiYYl5aVB68YiiaXQKss3u8Gf58vZerhDK0gzFoWg4/I1WiEZR+WUKal2iNSnUmMEYzNAb9mZhCq44/RuzV0/SkH4qyue42rWL16ucbbjF9h1Qxflw9enx2j1dhdZUfcTQdcmOdlDJtWEENbm9WfJwyeqpzV2+rX4o4O5iik7S1tre4ubq7vL2+v7CxwsPExcTFsAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_7.gif]]></src><base64><![CDATA[R0lGODlhXQARAIAAAAAAAP///yH5BAEAAAEALAAAAABdABEAAAKEjAGmy33popy0IXoDrCxvDoaLJ2Wa+CgfypbbOiKmBjuyebe6mrt2bYFBZjsRMXKkcY5DYBEjTHhevE5UZU1ZV7JtLIh9TLvVGLdXpp3XXt6aNITaQJePc3cv55mh+OE5tyQlhYR2Ikh2CDhCN5gXqPPIIrlYaXmJmam5ydnp+QkaulkAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_8.gif]]></src><base64><![CDATA[R0lGODlhDQAZAIAAAAAAAP///yH5BAEAAAEALAAAAAANABkAAAIqjA15u8oMHowyJDcRbRvbe2ya44XUdUbKan7oaVWtHItPSef6zvf+DywAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_6.gif]]></src><base64><![CDATA[R0lGODlhYAAZAIAAAAAAAP///yH5BAEAAAEALAAAAABgABkAAAKojA15y70JnJy0OmhRzFPxD16bNYaPiYYl5aVB68YiiaXQKss3u8Gf58vZerhDK0gzFoWg4/I1WiEZR+WUKal2iNSnUmMEYzNAb9mZhCq44/RuzV0/SkH4qyue42rWL16ucbbjF9h1Qxflw9enx2j1dhdZUfcTQdcmOdlDJtWEENbm9WfJwyeqpzV2+rX4o4O5iik7S1tre4ubq7vL2+v7CxwsPExcTFsAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_11.gif]]></src><base64><![CDATA[R0lGODlhCAAIAIAAAAAAAP///yH5BAEAAAEALAAAAAAIAAgAAAIODI6pYMwBH4xuthupxgUAOw==]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_12.gif]]></src><base64><![CDATA[R0lGODlhLAAMAIAAAAAAAP///yH5BAEAAAEALAAAAAAsAAwAAAI2jGGpy+0LInq02mmzPrtfv0UHxoGfGKClSUmTmrIXRsZy+9b1DeX239PBUkOazVVMCkkqSaAAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_13.gif]]></src><base64><![CDATA[R0lGODlhlwAaAIAAAAAAAP///yH5BAEAAAEALAAAAACXABoAAAL+jA15y+3/EoC02ouRynnz73jgSFpi2Uwoqa6u277HKVd0jdvxK+15KvkJIb3a5iY8+oY/pcyDZCw50KmUyWpFF9aZ1mTdemdgYpcJLZsDTps0dtbI3RpRPKkSs03sfDCyYxenFJXWN4YV4lc4GKSg1TNxIsjl8yjpVWRYhVgZOEn5dgipCXmYGblYKtrZ9xlZt8p66vr2autpW+QqG1sZUdtKO4xwIRnaOtlkHDyHuSd8Bff5y0UFPSdnSpZzRzaNCE5EC1rNjXGcXJyNbXTNqf3MSD79p4yeng3L7n2NTz/mDzE1a3CI0ZOIYEF/45ZR6JfwIR8Q85qEgRgR0EMfjNYydvQ4hCPIkSRLmjyJMqXKlSxbunwJM6bMmTUKAAA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_15.gif]]></src><base64><![CDATA[R0lGODlhRAAaAIAAAAAAAP///yH5BAEAAAEALAAAAABEABoAAAKLjA15y+0Pozxq2oslyLzj6nVgmIyhVaJbU5knlE4tA7rPmsUyzut4VFvZAjpVsST8wRY12NDxbBVZSmbVeqVqFVxsKmjdiRGIDdJ3NvfCuyiSnIWPZr8nNQ7Fw9nEuv5FFAjUR8EjSAgIpMe1VsaXCFnoFElJsVRZaWOHScLp+QkaKjpKWmp6ilpZAAA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1868_16.gif]]></src><base64><![CDATA[R0lGODlhRgAZAIAAAAAAAP///yH5BAEAAAEALAAAAABGABkAAAJ7jGGpy52AnJwMQlqv1DjYXoEeJ25k6YEnmrFLNH3d+tLt+MZ2g9gy1ouQYJldkfj4USxCIrIoMip1j9zsycPeqDiFNvvFhZNhzQU2hmZTKl+1ySxp4/L1wejK6/f8fpQJmAYWiOdneIiYqLjI2Oj4CBkpOUlZaXmJKVIAADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/103img14.gif]]></src><base64><![CDATA[R0lGODlhEgAPAIAAAAAAAP///yH5BAEAAAEALAAAAAASAA8AAAIrjI8HkL3KGoqGwrpeYHrbz0netYndo3VlxGYjxsKZJZJ1ot4jXaM6lKsVAAA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/103img15.gif]]></src><base64><![CDATA[R0lGODlhRQAaAIAAAAAAAP///yH5BAEAAAEALAAAAABFABoAAAKAjGGpy52AnHQwnjobljCrrVmf93QkCVLic5qn53Ixm6XTzNjqNcrrHcBdfrJg0EIcJkPCyjJncj2P089TpyJWebCt0HrMvbAlY3fZSffGX3WriXA7v5Tsdg2mvvb8vv8PGGg15+RHOCeYqLjI2Oj4CBkpOUlZaXmJmam5ydlpWQAAOw==]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/103img14(1).gif]]></src><base64><![CDATA[R0lGODlhEgAPAIAAAAAAAP///yH5BAEAAAEALAAAAAASAA8AAAIrjI8HkL3KGoqGwrpeYHrbz0netYndo3VlxGYjxsKZJZJ1ot4jXaM6lKsVAAA7]]></base64></img><description><![CDATA[<p>Consider an <i>n</i>-dimensional ``box'' given by its dimensions.  In two dimensions the box (2,3) might represent a box with length 2 units and width 3 units.  In three dimensions the box (4,8,9) can represent a box  <img align="MIDDLE" width="68" height="24" alt="tex2html_wrap_inline40" src="http://127.1:80/web/admin/../upload/pimg1868_1.gif" />  (length, width, and height).  In 6 dimensions it is, perhaps, unclear what the box (4,5,6,7,8,9) represents; but we can analyze properties of the box such as the sum of its dimensions.</p>
<p></p>
<p>In this problem you will analyze a property of a group of <i>n</i>-dimensional boxes. You are to determine the longest <em>nesting string</em> of boxes, that is a sequence of boxes  <img align="MIDDLE" width="91" height="25" alt="tex2html_wrap_inline44" src="http://127.1:80/web/admin/../upload/pimg1868_2.gif" />  such that each box  <img align="MIDDLE" width="11" height="25" alt="tex2html_wrap_inline46" src="http://127.1:80/web/admin/../upload/pimg1868_3.gif" />   nests in box  <img align="MIDDLE" width="28" height="26" alt="tex2html_wrap_inline48" src="http://127.1:80/web/admin/../upload/pimg1868_4.gif" />  ( <img align="MIDDLE" width="75" height="27" alt="tex2html_wrap_inline50" src="http://127.1:80/web/admin/../upload/pimg1868_5.gif" /> .</p>
<p>A box D = ( <img width="96" height="25" alt="tex2html_wrap_inline52" src="http://127.1:80/web/upload/201012/103img6.gif" /> )  nests in a box E = ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="http://127.1:80/web/admin/../upload/pimg1868_7.gif" /> ) if there is some rearrangement of the  <img align="MIDDLE" width="13" height="25" alt="tex2html_wrap_inline56" src="http://127.1:80/web/admin/../upload/pimg1868_8.gif" />   such that when rearranged each dimension is less than the corresponding dimension in box E.  This loosely corresponds to turning box D to see if it will fit in box E. However, since any rearrangement suffices, box D can be contorted, not just turned (see examples below).</p>
<p>For example, the box D = (2,6) nests in the box E = (7,3) since D can be rearranged as (6,2) so that each dimension is less than the corresponding dimension in E.  The box D = (9,5,7,3) does NOT nest in the box E = (2,10,6,8) since no rearrangement of D results in a box that satisfies the nesting property, but F = (9,5,7,1) does nest in box E since F can be rearranged as (1,9,5,7) which nests in E.</p>
<p>Formally, we define nesting as follows: box D = ( <img align="MIDDLE" width="96" height="25" alt="tex2html_wrap_inline52" src="http://127.1:80/web/admin/../upload/pimg1868_6.gif" /> ) <em>nests</em> in  box E = ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="http://127.1:80/web/admin/../upload/pimg1868_7.gif" /> ) if there is a permutation  <img align="BOTTOM" width="8" height="8" alt="tex2html_wrap_inline62" src="http://127.1:80/web/admin/../upload/pimg1868_11.gif" />  of  <img align="BOTTOM" width="44" height="12" alt="tex2html_wrap_inline64" src="http://127.1:80/web/admin/../upload/pimg1868_12.gif" />  such that  ( <img align="MIDDLE" width="151" height="26" alt="tex2html_wrap_inline66" src="http://127.1:80/web/admin/../upload/pimg1868_13.gif" /> ) ``fits'' in ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="http://127.1:80/web/admin/../upload/pimg1868_7.gif" /> ) i.e., if  <img align="MIDDLE" width="68" height="26" alt="tex2html_wrap_inline70" src="http://127.1:80/web/admin/../upload/pimg1868_15.gif" />  for all  <img align="MIDDLE" width="70" height="25" alt="tex2html_wrap_inline72" src="http://127.1:80/web/admin/../upload/pimg1868_16.gif" /> .</p>]]></description>
<input><![CDATA[<p>The input consists of a series of box sequences.  Each box sequence begins with a line consisting of the the number of boxes <i>k</i> in the sequence followed by the dimensionality of the boxes, <i>n</i> (on the same line.)</p>
<p>This line is followed by <i>k</i> lines, one line per box with the <i>n</i> measurements of each box on one line separated by one or more spaces.  The  <img width="18" height="15" alt="tex2html_wrap_inline82" src="http://127.1:80/web/upload/201012/103img14.gif" />  line in the sequence ( <img width="69" height="26" alt="tex2html_wrap_inline84" src="http://127.1:80/web/upload/201012/103img15.gif" /> ) gives the measurements for the  <img width="18" height="15" alt="tex2html_wrap_inline82" src="http://127.1:80/web/upload/201012/103img14(1).gif" />  box.</p>
<p>There may be several box sequences in the input file. Your program should process all of them and determine, for each sequence, which of the <i>k</i>  boxes determine the longest nesting string and the length of that nesting string (the number of boxes in the string).</p>
<p>In this problem the maximum dimensionality is 10 and the minimum dimensionality is 1.  The maximum number of boxes in a sequence is 30.</p>]]></input> 
<output><![CDATA[<p>For each box sequence in the input file, output the length of the longest nesting string on one line followed on the next line by a list of the boxes that comprise this string in order.  The ``smallest'' or ``innermost'' box of the nesting string should be listed first, the next box (if there is one) should be listed second, etc.</p>
<p>The boxes should be numbered according to the order in which they appeared in the input file (first box is box 1, etc.).</p>
<p>If there is more than one longest nesting string then any one of them can be output.</p>]]></output>
<sample_input><![CDATA[5 2
3 7
8 10
5 2
9 11
21 18
8 6
5 2 20 1 30 10
23 15 7 9 11 3
40 50 34 24 14 4
9 10 11 12 13 14
31 4 18 8 27 17
44 32 13 19 41 19
1 2 3 4 5 6
80 37 47 18 21 9
]]></sample_input>
<sample_output><![CDATA[5
3 1 2 4 5
4
7 2 5 6
]]></sample_output>
<test_input><![CDATA[5 2
3 7
8 10
5 2
9 11
21 18
8 6
5 2 20 1 30 10
23 15 7 9 11 3
40 50 34 24 14 4
9 10 11 12 13 14
31 4 18 8 27 17
44 32 13 19 41 19
1 2 3 4 5 6
80 37 47 18 21 9
10 2
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
6 1
6
8
10
4
5
4
30 10
1 2 3 4 5 6 7 8 9 10
11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
31 32 33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48 49 50
1 2 3 4 5 6 7 8 9 10
11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
31 32 33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48 49 50
200 201 202 203 204 205 206 207 208 209 
100 101 102 103 104 105 106 107 108 109 
300 301 302 303 304 305 306 307 308 309 
200 201 202 203 204 205 206 207 208 209 
100 101 102 103 104 105 106 107 108 109 
300 301 302 303 304 305 306 307 308 309 
400 401 402 403 404 405 406 407 408 409 
500 501 502 503 504 505 506 507 508 509 
411 412 413 414 415 416 417 418 419 420 
521 522 523 524 525 526 527 528 529 530
50 60 70 80 90 50 60 70 80 90
20 30 40 50 60 70 80 90 10 99
10 9 8 7 6 5 4 3 2 1
19 29 39 49 59 69 79 89 95 9
15 35 25 45 65 55 85 75 93 5
50 60 70 80 90 50 60 70 80 90
20 30 40 50 60 70 80 90 10 99
10 9 8 7 6 5 4 3 2 1
19 29 39 49 59 69 79 89 95 9
15 35 25 45 65 55 85 75 93 5
]]></test_input>
<test_output><![CDATA[5
3 1 2 4 5 
4
7 2 5 6 
1
1 
5
4 5 1 2 3 
13
1 2 3 4 5 21 12 11 13 17 19 18 20 
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[www.csie.nctu.edu.tw]]></source>
</item>
<item>
<title><![CDATA[Arbitrage]]></title>
<time_limit><![CDATA[1]]></time_limit>
<memory_limit><![CDATA[128]]></memory_limit>

<img><src><![CDATA[http://127.1:80/web/admin/../upload/pimg1869_1.gif]]></src><base64><![CDATA[R0lGODlh0QAYAIAAAAAAAP///yH5BAEAAAEALAAAAADRABgAAAL+jGGpyx0A3ZO0vujQsfxq+ilY14UNZB7p5q3kEo0wir5n7NKujWe12LPdZIygCkGciIS+RFKpYgKdGWkzKjF9ntbd6OvUakGnW9iySl8vZXJxzWVhrW4zNv6jZsV2dn0G2Pe0M1c4ZQhzSJe1d+ZXNlax1Yio2AYlmIbkpQdHGFIzqKMjSekXCiqn2oS39Sm5CeJ6yWWU+feVMjr6F3g6e5rIEfdITOgo6wGbzPx4WXzMY4qRKxcJ+wnctxdtOdd6XM2ITCzkBVy9O7ncilwUHjutqw1oTP9GPq9uLP+tK9zvljJ37wgeokbNm7+AeVSJW9RpoLiHnXgVVBglF6hgc77qudKAQ1NHj2E+/rC1iFceWyhJDXs2A944gO+yccLno1tNiOaSNOQJNKjQoUSLGj2KNKnSpUybOn0KNarUqVSrWr2KNavWrVy7ev0KNqzYsWTLmj2LNq3atWzbYi0AADs=]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/104img2.gif]]></src><base64><![CDATA[R0lGODlhRgAZAIAAAAAAAP///yH5BAEAAAEALAAAAABGABkAAAKCTICmy+2WnpwtRqoQkBdrvGyZSH2g151X6rBnS74Q6Y4xd1c1Y+WH/wNWfg+Th4gcFY0lpk3IM3V2M2gI6sRlri/qDORFrmjgXcJanfQO7K3Kde7WyBuNXdaOhnkwG/4PGCg4SChnd/h3qFjI2Oj4CBkpOUlZaXmJmam5ydnp+WlQAAA7]]></base64></img><img><src><![CDATA[http://127.1:80/web/upload/201012/104img3.gif]]></src><base64><![CDATA[R0lGODlhEQAPAIAAAAAAAP///yH5BAEAAAEALAAAAAARAA8AAAIqjI8GkLn3GkTMsYVViLtueklc5IHQVY3fiqEK+baldNLibD/4vdrx3igAADs=]]></base64></img><description><![CDATA[<p>The use of computers in the finance industry has been marked with controversy lately as programmed trading -- designed to take advantage of extremely small fluctuations in prices -- has been outlawed at many Wall Street firms.  The ethics of computer programming is a fledgling field with many thorny issues.</p>
<p><em>Arbitrage</em> is the trading of one currency for another with the hopes of taking advantage of small differences in conversion rates among several currencies in order to achieve a profit.   For example, if $1.00 in U.S. currency buys 0.7 British pounds currency, &pound;1 in British currency buys 9.5 French francs, and 1 French franc buys 0.16 in U.S. dollars, then an arbitrage trader can start with $1.00 and earn  <img width="209" height="24" alt="tex2html_wrap_inline29" src="http://127.1:80/web/admin/../upload/pimg1869_1.gif" />  dollars thus earning a profit of 6.4 percent.</p>
<p>You will write a program that determines whether a sequence of currency exchanges can yield a profit as described above.</p>
<p>To result in successful arbitrage, a sequence of exchanges must begin and end with the same currency, but any starting currency may be considered.</p>]]></description>
<input><![CDATA[<p>The input file consists of one or more conversion tables.  You must solve the arbitrage problem for each of the tables in the input file.</p>
<p>Each table is preceded by an integer <i>n</i> on a line by itself giving the dimensions of the table.  The maximum dimension is 20; the minimum dimension is 2.</p>
<p>The table then follows in row major order but with the diagonal elements of the table missing (these are assumed to have value 1.0). Thus the first row of the table represents the conversion rates between country 1 and <i>n</i>-1 other countries, i.e., the amount of currency of country <i>i</i> ( <img width="70" height="25" alt="tex2html_wrap_inline37" src="http://127.1:80/web/upload/201012/104img2.gif" /> ) that can be purchased with one unit of the currency of country 1.</p>
<p>Thus each table consists of <i>n</i>+1 lines in the input file: 1 line containing <i>n</i> and <i>n</i> lines representing the conversion table.</p>]]></input> 
<output><![CDATA[<p>For each table in the input file you must determine whether a sequence of exchanges exists that results in a profit of more than  1 percent (0.01).  If a sequence exists you must print the sequence of exchanges that results in a profit.  If there is more than one sequence that results in a profit of more than 1 percent you must print a  sequence of minimal length, i.e., one of the sequences that uses the fewest exchanges of currencies to yield a profit.</p>
<p></p>
<p>Because the IRS (United States Internal Revenue Service) notices lengthy transaction sequences, all profiting sequences must consist of <i>n</i> or fewer transactions where <i>n</i> is the dimension of the table giving conversion rates. The sequence 1 2 1 represents two conversions.</p>
<p>If a profiting sequence exists you must print  the sequence of exchanges that results in a profit.  The sequence is printed as a sequence of integers with the integer <i>i</i> representing the  <img width="17" height="15" alt="tex2html_wrap_inline51" src="http://127.1:80/web/upload/201012/104img3.gif" />  line of the conversion table (country <i>i</i>).  The first integer in the sequence is the country  from which the profiting sequence starts.  This integer also ends the sequence.</p>
<p>If no profiting sequence of <i>n</i> or fewer transactions exists, then the line</p>
<pre>
no arbitrage sequence exists</pre>
<p>should be printed.</p>]]></output>
<sample_input><![CDATA[3
1.2 .89
.88 5.1
1.1 0.15
4
3.1    0.0023    0.35
0.21   0.00353   8.13 
200    180.559   10.339
2.11   0.089     0.06111
2
2.0
0.45
]]></sample_input>
<sample_output><![CDATA[1 2 1
1 2 4 1
no arbitrage sequence exists
]]></sample_output>
<test_input><![CDATA[3
1.2 0.89
0.88 5.1
1.1 0.15
4
3.1    0.0023    0.35
0.21   0.00353   8.13 
200    180.559   10.339
2.11   0.089     0.06111
2
2.0
0.45
9
0.23078  0.77339  0.00103  0.00933   0.68647   0.9193    2.2956  1.1696
4.3331   3.3512   0.00448  0.04043   2.9745    3.9843    9.947   5.0680
1.2930   0.29840  0.00134  0.01206   0.8876    1.1889    2.9682  1.5123
968.3    223.46   748.86   9.035     664.69    890.33    2222.8  1132.5
107.17   24.734   82.887   0.11068   73.571    98.546    246.02  125.35
1.4567   0.33619  1.1266   0.00150   0.01359   1.3395    3.3440  1.7038
1.0876   0.25099  0.84110  0.00112   0.01015   0.74657   2.4966  1.272
0.43562  0.10053  0.33691  0.00045   0.00406   0.29904   0.40055 0.5095
0.85499  0.19732  0.66124  0.00088   0.00798   0.58692   0.78616 1.9627
10
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
]]></test_input>
<test_output><![CDATA[1 2 1
1 4 3 1
no arbitrage sequence exists
3 4 3 4 3 4 3
no arbitrage sequence exists
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[www.csie.nctu.edu.tw]]></source>
</item>
</fps>